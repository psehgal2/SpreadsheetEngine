beginning of profiler log written on 2024-03-13 14:11:52.784993 ran on the computer of kevin

##################Running pro_load_workbook... #######################
for test <function pro_load_workbook at 0x0000017F1670A160> total time: 15.335352300000006
Total Logs
         2252602 function calls (2241402 primitive calls) in 1.355 seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
     2100    0.241    0.000    0.868    0.000 earley.py:78(predict_and_complete)
   103200    0.130    0.000    0.230    0.000 earley_common.py:9(__init__)
      200    0.079    0.000    0.264    0.001 earley_forest.py:283(visit)
267800/259000    0.066    0.000    0.119    0.000 {built-in method builtins.hash}
    89700    0.055    0.000    0.085    0.000 utils.py:345(add)
    76800    0.054    0.000    0.102    0.000 grammar.py:18(__eq__)
   113200    0.050    0.000    0.050    0.000 grammar.py:121(__hash__)
     1900    0.044    0.000    0.141    0.000 xearley.py:41(scan)
   146700    0.039    0.000    0.056    0.000 grammar.py:25(__hash__)
    72500    0.033    0.000    0.042    0.000 lexer.py:265(__eq__)
     8200    0.031    0.000    0.074    0.000 earley_forest.py:50(__init__)
     4600    0.029    0.000    0.106    0.000 earley.py:135(<listcomp>)
    81700    0.029    0.000    0.029    0.000 earley_common.py:28(__eq__)
    23500    0.027    0.000    0.032    0.000 typing.py:868(__new__)
   201100    0.026    0.000    0.026    0.000 {built-in method builtins.isinstance}
    38400    0.025    0.000    0.041    0.000 utils.py:342(__contains__)
   137100    0.018    0.000    0.018    0.000 earley_common.py:31(__hash__)
     7200    0.016    0.000    0.070    0.000 earley_forest.py:437(_visit_node_out_helper)
     3600    0.015    0.000    0.032    0.000 earley_forest.py:603(transform_packed_node)
    22500    0.014    0.000    0.017    0.000 {built-in method fromkeys}
   121800    0.014    0.000    0.014    0.000 {method 'append' of 'list' objects}
   132500    0.014    0.000    0.014    0.000 {built-in method builtins.len}
    61200    0.013    0.000    0.013    0.000 {built-in method builtins.next}
    22500    0.012    0.000    0.029    0.000 utils.py:339(__init__)
     7200    0.012    0.000    0.024    0.000 {built-in method builtins.sorted}
    19300    0.012    0.000    0.022    0.000 parser_frontends.py:184(match)
    20100    0.011    0.000    0.011    0.000 {method 'match' of 're.Pattern' objects}
     8400    0.011    0.000    0.034    0.000 earley_forest.py:64(add_family)
    80000    0.010    0.000    0.010    0.000 {built-in method builtins.id}
     8400    0.010    0.000    0.017    0.000 earley_forest.py:131(__init__)
     8400    0.008    0.000    0.033    0.000 earley_common.py:25(advance)
    22700    0.008    0.000    0.011    0.000 utils.py:348(__iter__)
      200    0.007    0.000    1.017    0.005 xearley.py:39(_parse)
     3600    0.007    0.000    0.019    0.000 earley_forest.py:631(visit_packed_node_in)
     7200    0.007    0.000    0.036    0.000 earley_forest.py:85(children)
    24800    0.006    0.000    0.006    0.000 {built-in method __new__ of type object at 0x00007FFB2480DCB0}
     2800    0.006    0.000    0.016    0.000 earley_forest.py:581(transform_symbol_node)
     3600    0.006    0.000    0.051    0.000 earley_forest.py:638(visit_packed_node_out)
    11800    0.006    0.000    0.008    0.000 {method 'setdefault' of 'dict' objects}
     3600    0.006    0.000    0.029    0.000 earley_forest.py:422(visit_symbol_node_in)
     3600    0.005    0.000    0.011    0.000 earley_forest.py:427(visit_packed_node_in)
     3600    0.005    0.000    0.047    0.000 earley_forest.py:625(visit_symbol_node_in)
    18300    0.005    0.000    0.005    0.000 {method 'add' of 'set' objects}
    29900    0.005    0.000    0.005    0.000 {built-in method builtins.iter}
      100    0.004    0.000    0.005    0.000 {method 'read' of '_io.TextIOWrapper' objects}
     2800    0.004    0.000    0.009    0.000 earley_forest.py:565(_call_rule_func)
    33300    0.004    0.000    0.004    0.000 {method 'pop' of 'collections.deque' objects}
     7200    0.004    0.000    0.006    0.000 earley_forest.py:145(sort_key)
     2800    0.004    0.000    0.007    0.000 earley_forest.py:556(_collapse_ambig)
    31700    0.004    0.000    0.004    0.000 {method 'append' of 'collections.deque' objects}
      300    0.003    0.000    1.330    0.004 Workbook.py:638(recompute_cell_and_parents)
     3600    0.003    0.000    0.003    0.000 earley_forest.py:499(__init__)
      200    0.003    0.000    1.294    0.006 earley.py:262(parse)
     3600    0.003    0.000    0.004    0.000 earley_forest.py:155(children)
    10800    0.002    0.000    0.002    0.000 {method 'remove' of 'set' objects}
     3600    0.002    0.000    0.004    0.000 earley_forest.py:70(load_paths)
      200    0.002    0.000    1.297    0.006 parser_frontends.py:100(parse)
     3600    0.002    0.000    0.044    0.000 earley_forest.py:450(visit_packed_node_out)
     7200    0.002    0.000    0.003    0.000 utils.py:357(__len__)
     1300    0.002    0.000    0.003    0.000 lexer.py:213(_future_new)
      300    0.002    0.000    1.342    0.004 Workbook.py:727(set_cell_contents)
     3200    0.002    0.000    0.003    0.000 {built-in method builtins.getattr}
     7200    0.002    0.000    0.002    0.000 earley_forest.py:141(is_empty)
      500    0.002    0.000    0.004    0.000 Cell.py:81(set_cell_value)
     2800    0.002    0.000    0.025    0.000 earley_forest.py:444(visit_symbol_node_out)
      300    0.002    0.000    0.007    0.000 Parser.py:253(cell)
     1300    0.002    0.000    0.003    0.000 Sheet.py:93(get_cell_value)
      200    0.002    0.000    1.319    0.007 Workbook.py:544(get_formula_value)
      600    0.002    0.000    0.006    0.000 xearley.py:88(<listcomp>)
     8300    0.002    0.000    0.002    0.000 earley_forest.py:101(__hash__)
      800    0.002    0.000    0.002    0.000 earley_forest.py:591(transform_intermediate_node)
     2300    0.002    0.000    0.003    0.000 parse_tree_builder.py:20(__call__)
     8400    0.002    0.000    0.002    0.000 earley_forest.py:169(__hash__)
      300    0.001    0.000    0.007    0.000 Sheet.py:60(set_cell_contents)
      300    0.001    0.000    0.002    0.000 utils.py:179(convert_location_to_idx)
     1300    0.001    0.000    0.005    0.000 lexer.py:202(__new__)
      100    0.001    0.000    1.355    0.014 Workbook.py:74(load_workbook)
     3600    0.001    0.000    0.001    0.000 earley_forest.py:158(<listcomp>)
     1000    0.001    0.000    0.002    0.000 earley_forest.py:432(visit_token_node)
     7200    0.001    0.000    0.001    0.000 earley_forest.py:548(_check_cycle)
     2800    0.001    0.000    0.002    0.000 earley_forest.py:571(_call_ambig_func)
     1300    0.001    0.000    0.002    0.000 earley_forest.py:193(__init__)
  800/200    0.001    0.000    0.018    0.000 visitors.py:421(_visit_tree)
      100    0.001    0.000    0.001    0.000 {method 'seek' of '_io.TextIOWrapper' objects}
  800/200    0.001    0.000    0.015    0.000 visitors.py:430(<listcomp>)
  800/200    0.001    0.000    0.016    0.000 visitors.py:444(inner)
     7200    0.001    0.000    0.001    0.000 {method 'pop' of 'list' objects}
     2200    0.001    0.000    0.001    0.000 utils.py:354(__bool__)
      800    0.001    0.000    0.011    0.000 Parser.py:40(fix_formula)
      900    0.001    0.000    0.001    0.000 re.py:289(_compile)
      200    0.001    0.000    0.265    0.001 earley_forest.py:535(visit)
     5900    0.001    0.000    0.001    0.000 {method 'lower' of 'str' objects}
      300    0.001    0.000    0.004    0.000 Workbook.py:806(get_cell_value)
      300    0.001    0.000    0.001    0.000 Workbook.py:687(_get_sheet_name_location)
      600    0.001    0.000    0.001    0.000 xearley.py:85(<listcomp>)
      200    0.001    0.000    0.003    0.000 earley.py:284(<listcomp>)
      200    0.001    0.000    0.001    0.000 earley_forest.py:523(__init__)
  800/200    0.001    0.000    0.015    0.000 visitors.py:429(visit_children)
      400    0.001    0.000    1.345    0.003 Workbook.py:35(run_func)
     1300    0.001    0.000    0.001    0.000 utils.py:78(get_hidden_name)
      200    0.001    0.000    0.001    0.000 parser_frontends.py:96(_make_lexer_thread)
      200    0.001    0.000    0.001    0.000 Parser.py:243(number)
      100    0.001    0.000    0.001    0.000 decoder.py:343(raw_decode)
      100    0.001    0.000    0.002    0.000 Workbook.py:868(new_sheet)
      200    0.001    0.000    0.001    0.000 Parser.py:97(__init__)
      800    0.001    0.000    0.001    0.000 utils.py:295(get_highest_precedence_error)
      600    0.001    0.000    0.003    0.000 utils.py:131(check_valid_cell_location)
     2800    0.001    0.000    0.001    0.000 {built-in method builtins.hasattr}
      900    0.001    0.000    0.001    0.000 {method 'join' of 'str' objects}
     1300    0.001    0.000    0.001    0.000 {method 'group' of 're.Match' objects}
      200    0.001    0.000    0.003    0.000 Workbook.py:700(add_children_cells)
      600    0.001    0.000    0.002    0.000 re.py:188(match)
     2300    0.001    0.000    0.001    0.000 {method 'get' of 'dict' objects}
      300    0.001    0.000    0.001    0.000 utils.py:207(remove_exponent)
      800    0.001    0.000    0.005    0.000 earley_forest.py:447(visit_intermediate_node_out)
      200    0.001    0.000    0.266    0.001 earley_forest.py:397(transform)
      300    0.001    0.000    0.001    0.000 Graph.py:68(add_connection)
      100    0.000    0.000    0.001    0.000 Parser.py:211(mul_expr)
      800    0.000    0.000    0.000    0.000 tree.py:61(__init__)
      200    0.000    0.000    0.001    0.000 earley_forest.py:390(__init__)
      300    0.000    0.000    0.002    0.000 Cell.py:65(set_contents)
      200    0.000    0.000    0.001    0.000 Parser.py:169(add_expr)
     2700    0.000    0.000    0.000    0.000 {method 'end' of 're.Match' objects}
      100    0.000    0.000    0.001    0.000 decoder.py:332(decode)
      300    0.000    0.000    0.000    0.000 {method 'sub' of 're.Pattern' objects}
      300    0.000    0.000    0.003    0.000 Cell.py:46(__init__)
      300    0.000    0.000    0.000    0.000 Sheet.py:124(update_extent)
      300    0.000    0.000    0.001    0.000 re.py:203(sub)
      100    0.000    0.000    0.001    0.000 utils.py:307(error_matcher)
      200    0.000    0.000    0.002    0.000 Sheet.py:104(set_cell_value)
      100    0.000    0.000    0.000    0.000 Workbook.py:56(__init__)
      300    0.000    0.000    0.001    0.000 Workbook.py:540(get_sheet_name_from_hidden)
      200    0.000    0.000    1.298    0.006 lark.py:640(parse)
      100    0.000    0.000    0.000    0.000 utils.py:96(check_new_name)
      200    0.000    0.000    0.001    0.000 parse_tree_builder.py:145(__call__)
      100    0.000    0.000    0.002    0.000 __init__.py:299(loads)
      300    0.000    0.000    0.000    0.000 {built-in method _abc._abc_instancecheck}
     1300    0.000    0.000    0.000    0.000 earley_forest.py:207(__hash__)
     1200    0.000    0.000    0.000    0.000 {method 'extend' of 'list' objects}
      600    0.000    0.000    0.000    0.000 Sheet.py:120(get_cell)
      300    0.000    0.000    0.000    0.000 Workbook.py:714(clean_children_cells)
      300    0.000    0.000    0.000    0.000 Graph.py:330(tarjans)
     1600    0.000    0.000    0.000    0.000 {method 'strip' of 'str' objects}
      200    0.000    0.000    0.000    0.000 parser_frontends.py:86(_verify_start)
      300    0.000    0.000    0.000    0.000 {method 'split' of 'str' objects}
      300    0.000    0.000    0.000    0.000 {method 'to_integral' of 'decimal.Decimal' objects}
     1000    0.000    0.000    0.000    0.000 Cell.py:125(get_value)
      600    0.000    0.000    0.000    0.000 {built-in method _heapq.heappush}
      100    0.000    0.000    0.000    0.000 {built-in method _codecs.charmap_decode}
      300    0.000    0.000    0.000    0.000 utils.py:212(is_formula)
      200    0.000    0.000    0.000    0.000 lark.py:220(__getattr__)
      300    0.000    0.000    0.000    0.000 {method 'quantize' of 'decimal.Decimal' objects}
      100    0.000    0.000    0.000    0.000 cp1252.py:22(decode)
      300    0.000    0.000    0.001    0.000 abc.py:96(__instancecheck__)
      200    0.000    0.000    0.018    0.000 visitors.py:415(visit)
     1000    0.000    0.000    0.000    0.000 earley_forest.py:418(transform_token_node)
      100    0.000    0.000    0.000    0.000 Sheet.py:25(__init__)
      200    0.000    0.000    0.000    0.000 {method 'update' of 'dict' objects}
      100    0.000    0.000    0.000    0.000 Graph.py:128(get_sheet_parents)
      100    0.000    0.000    0.000    0.000 {method 'startswith' of 'str' objects}
      100    0.000    0.000    0.000    0.000 Workbook.py:857(recompute_sheet_parents)
      200    0.000    0.000    0.000    0.000 earley_forest.py:232(__init__)
      600    0.000    0.000    0.000    0.000 {method 'isalnum' of 'str' objects}
      100    0.000    0.000    0.000    0.000 Workbook.py:505(num_sheets)
      600    0.000    0.000    0.000    0.000 {built-in method builtins.ord}
      100    0.000    0.000    0.000    0.000 Graph.py:121(has_sheet)
      200    0.000    0.000    0.000    0.000 grammar.py:15(__init__)
      200    0.000    0.000    0.000    0.000 Cell.py:59(cache_formula)
      200    0.000    0.000    0.000    0.000 Cell.py:131(set_children)
      400    0.000    0.000    0.000    0.000 Cell.py:128(get_contents)
      300    0.000    0.000    0.000    0.000 {method 'upper' of 'str' objects}
      300    0.000    0.000    0.000    0.000 Sheet.py:54(get_sheet_name)
      300    0.000    0.000    0.000    0.000 {method 'lstrip' of 'str' objects}
      200    0.000    0.000    0.000    0.000 Parser.py:108(get_cell_refs)
      300    0.000    0.000    0.000    0.000 {method 'rstrip' of 'str' objects}
      300    0.000    0.000    0.000    0.000 {method 'is_finite' of 'decimal.Decimal' objects}
      100    0.000    0.000    0.000    0.000 Graph.py:15(__init__)
      200    0.000    0.000    0.000    0.000 Cell.py:62(get_cached_formula)
      100    0.000    0.000    0.000    0.000 Graph.py:124(add_sheet)
      100    0.000    0.000    0.000    0.000 {method 'keys' of 'dict' objects}
      100    0.000    0.000    0.000    0.000 codecs.py:276(reset)
      100    0.000    0.000    0.000    0.000 {method 'keys' of 'collections.OrderedDict' objects}
        1    0.000    0.000    0.000    0.000 cProfile.py:134(__exit__)
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}



##################Running pro_copy_sheet... #######################
for test <function pro_copy_sheet at 0x0000017F1670A280> total time: 7.152299400000001
Total Logs
         993194 function calls (988594 primitive calls) in 0.653 seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
      800    0.114    0.000    0.406    0.001 earley.py:78(predict_and_complete)
    47800    0.065    0.000    0.097    0.000 earley_common.py:9(__init__)
      100    0.039    0.000    0.127    0.001 earley_forest.py:283(visit)
120300/116800    0.033    0.000    0.041    0.000 {built-in method builtins.hash}
    39400    0.027    0.000    0.043    0.000 utils.py:345(add)
    32300    0.025    0.000    0.047    0.000 grammar.py:18(__eq__)
      100    0.021    0.000    0.653    0.007 Workbook.py:1038(copy_sheet)
    65500    0.020    0.000    0.028    0.000 grammar.py:25(__hash__)
      700    0.018    0.000    0.057    0.000 xearley.py:41(scan)
    39000    0.016    0.000    0.016    0.000 earley_common.py:28(__eq__)
    30300    0.015    0.000    0.019    0.000 lexer.py:265(__eq__)
     1800    0.013    0.000    0.048    0.000 earley.py:135(<listcomp>)
    18100    0.013    0.000    0.022    0.000 utils.py:342(__contains__)
     3200    0.013    0.000    0.036    0.000 earley_forest.py:50(__init__)
     9100    0.013    0.000    0.015    0.000 typing.py:868(__new__)
    83400    0.012    0.000    0.012    0.000 {built-in method builtins.isinstance}
     8700    0.009    0.000    0.010    0.000 {built-in method fromkeys}
    60600    0.009    0.000    0.009    0.000 earley_common.py:31(__hash__)
     3000    0.008    0.000    0.034    0.000 earley_forest.py:437(_visit_node_out_helper)
    51700    0.008    0.000    0.008    0.000 grammar.py:121(__hash__)
    55500    0.007    0.000    0.007    0.000 {method 'append' of 'list' objects}
     1500    0.007    0.000    0.015    0.000 earley_forest.py:603(transform_packed_node)
    60500    0.007    0.000    0.007    0.000 {built-in method builtins.len}
    25400    0.006    0.000    0.006    0.000 {built-in method builtins.next}
     3000    0.006    0.000    0.012    0.000 {built-in method builtins.sorted}
     8700    0.005    0.000    0.015    0.000 utils.py:339(__init__)
     3300    0.005    0.000    0.015    0.000 earley_forest.py:64(add_family)
     7400    0.005    0.000    0.005    0.000 {method 'match' of 're.Pattern' objects}
    33300    0.005    0.000    0.005    0.000 {built-in method builtins.id}
     3300    0.004    0.000    0.007    0.000 earley_forest.py:131(__init__)
     7100    0.004    0.000    0.008    0.000 parser_frontends.py:184(match)
     3300    0.004    0.000    0.015    0.000 earley_common.py:25(advance)
     9000    0.003    0.000    0.005    0.000 utils.py:348(__iter__)
     1500    0.003    0.000    0.009    0.000 earley_forest.py:631(visit_packed_node_in)
     3000    0.003    0.000    0.017    0.000 earley_forest.py:85(children)
      100    0.003    0.000    0.467    0.005 xearley.py:39(_parse)
     1200    0.003    0.000    0.008    0.000 earley_forest.py:581(transform_symbol_node)
     1500    0.003    0.000    0.024    0.000 earley_forest.py:638(visit_packed_node_out)
     9600    0.003    0.000    0.003    0.000 {built-in method __new__ of type object at 0x00007FFB2480DCB0}
     1500    0.003    0.000    0.013    0.000 earley_forest.py:422(visit_symbol_node_in)
     1500    0.003    0.000    0.005    0.000 earley_forest.py:427(visit_packed_node_in)
     4700    0.003    0.000    0.003    0.000 {method 'setdefault' of 'dict' objects}
     1500    0.002    0.000    0.022    0.000 earley_forest.py:625(visit_symbol_node_in)
     7600    0.002    0.000    0.002    0.000 {method 'add' of 'set' objects}
    12000    0.002    0.000    0.002    0.000 {built-in method builtins.iter}
      200    0.002    0.000    0.617    0.003 Workbook.py:638(recompute_cell_and_parents)
     1200    0.002    0.000    0.004    0.000 earley_forest.py:565(_call_rule_func)
     3000    0.002    0.000    0.003    0.000 earley_forest.py:145(sort_key)
    13900    0.002    0.000    0.002    0.000 {method 'pop' of 'collections.deque' objects}
      100    0.002    0.000    0.600    0.006 earley.py:262(parse)
     1200    0.002    0.000    0.003    0.000 earley_forest.py:556(_collapse_ambig)
    13300    0.002    0.000    0.002    0.000 {method 'append' of 'collections.deque' objects}
      200    0.002    0.000    0.628    0.003 Workbook.py:727(set_cell_contents)
     1500    0.002    0.000    0.002    0.000 earley_forest.py:499(__init__)
     9050    0.001    0.000    0.001    0.000 {method 'lower' of 'str' objects}
     1500    0.001    0.000    0.002    0.000 earley_forest.py:155(children)
      300    0.001    0.000    0.003    0.000 Cell.py:81(set_cell_value)
     4500    0.001    0.000    0.001    0.000 {method 'remove' of 'set' objects}
     1500    0.001    0.000    0.002    0.000 earley_forest.py:70(load_paths)
      200    0.001    0.000    0.006    0.000 Sheet.py:60(set_cell_contents)
     1500    0.001    0.000    0.021    0.000 earley_forest.py:450(visit_packed_node_out)
      100    0.001    0.000    0.602    0.006 parser_frontends.py:100(parse)
      700    0.001    0.000    0.002    0.000 Sheet.py:93(get_cell_value)
     3000    0.001    0.000    0.002    0.000 utils.py:357(__len__)
      200    0.001    0.000    0.002    0.000 utils.py:179(convert_location_to_idx)
     3000    0.001    0.000    0.001    0.000 earley_forest.py:141(is_empty)
      100    0.001    0.000    0.611    0.006 Workbook.py:544(get_formula_value)
      500    0.001    0.000    0.001    0.000 lexer.py:213(_future_new)
     1200    0.001    0.000    0.012    0.000 earley_forest.py:444(visit_symbol_node_out)
     1400    0.001    0.000    0.001    0.000 {built-in method builtins.getattr}
     3200    0.001    0.000    0.001    0.000 earley_forest.py:101(__hash__)
     1000    0.001    0.000    0.001    0.000 parse_tree_builder.py:20(__call__)
      300    0.001    0.000    0.001    0.000 earley_forest.py:591(transform_intermediate_node)
  400/100    0.001    0.000    0.653    0.007 Workbook.py:35(run_func)
      100    0.001    0.000    0.003    0.000 Parser.py:253(cell)
     3300    0.001    0.000    0.001    0.000 earley_forest.py:169(__hash__)
      100    0.001    0.000    0.002    0.000 Workbook.py:868(new_sheet)
      200    0.001    0.000    0.002    0.000 xearley.py:88(<listcomp>)
      500    0.001    0.000    0.002    0.000 lexer.py:202(__new__)
     3000    0.001    0.000    0.001    0.000 earley_forest.py:548(_check_cycle)
     1500    0.001    0.000    0.001    0.000 earley_forest.py:158(<listcomp>)
     1200    0.001    0.000    0.001    0.000 earley_forest.py:571(_call_ambig_func)
      500    0.001    0.000    0.001    0.000 earley_forest.py:193(__init__)
     5350    0.001    0.000    0.001    0.000 {method 'keys' of 'collections.OrderedDict' objects}
      500    0.001    0.000    0.001    0.000 {method 'join' of 'str' objects}
      400    0.001    0.000    0.001    0.000 earley_forest.py:432(visit_token_node)
  300/100    0.001    0.000    0.007    0.000 visitors.py:421(_visit_tree)
     3000    0.001    0.000    0.001    0.000 {method 'pop' of 'list' objects}
     1000    0.001    0.000    0.001    0.000 utils.py:78(get_hidden_name)
  300/100    0.000    0.000    0.006    0.000 visitors.py:444(inner)
      100    0.000    0.000    0.128    0.001 earley_forest.py:535(visit)
      400    0.000    0.000    0.001    0.000 re.py:289(_compile)
      100    0.000    0.000    0.001    0.000 utils.py:307(error_matcher)
      100    0.000    0.000    0.001    0.000 earley.py:284(<listcomp>)
  300/100    0.000    0.000    0.005    0.000 visitors.py:430(<listcomp>)
      300    0.000    0.000    0.004    0.000 Parser.py:40(fix_formula)
      100    0.000    0.000    0.001    0.000 utils.py:96(check_new_name)
      800    0.000    0.000    0.000    0.000 utils.py:354(__bool__)
      300    0.000    0.000    0.001    0.000 Workbook.py:540(get_sheet_name_from_hidden)
      200    0.000    0.000    0.001    0.000 utils.py:207(remove_exponent)
      100    0.000    0.000    0.001    0.000 parser_frontends.py:96(_make_lexer_thread)
      100    0.000    0.000    0.001    0.000 earley_forest.py:523(__init__)
      100    0.000    0.000    0.001    0.000 Workbook.py:687(_get_sheet_name_location)
      100    0.000    0.000    0.000    0.000 Parser.py:97(__init__)
      200    0.000    0.000    0.002    0.000 Cell.py:65(set_contents)
      300    0.000    0.000    0.001    0.000 re.py:188(match)
      300    0.000    0.000    0.002    0.000 utils.py:131(check_valid_cell_location)
      100    0.000    0.000    0.001    0.000 Workbook.py:806(get_cell_value)
     1300    0.000    0.000    0.000    0.000 {method 'get' of 'dict' objects}
  300/100    0.000    0.000    0.005    0.000 visitors.py:429(visit_children)
      200    0.000    0.000    0.003    0.000 Cell.py:46(__init__)
      200    0.000    0.000    0.000    0.000 Sheet.py:124(update_extent)
     1200    0.000    0.000    0.000    0.000 {built-in method builtins.hasattr}
      100    0.000    0.000    0.000    0.000 Parser.py:243(number)
      200    0.000    0.000    0.000    0.000 xearley.py:85(<listcomp>)
      300    0.000    0.000    0.000    0.000 utils.py:295(get_highest_precedence_error)
      100    0.000    0.000    0.128    0.001 earley_forest.py:397(transform)
      100    0.000    0.000    0.000    0.000 Parser.py:169(add_expr)
      100    0.000    0.000    0.001    0.000 Workbook.py:700(add_children_cells)
      100    0.000    0.000    0.000    0.000 earley_forest.py:390(__init__)
      300    0.000    0.000    0.002    0.000 earley_forest.py:447(visit_intermediate_node_out)
      500    0.000    0.000    0.000    0.000 {method 'group' of 're.Match' objects}
      100    0.000    0.000    0.001    0.000 Sheet.py:104(set_cell_value)
      300    0.000    0.000    0.000    0.000 tree.py:61(__init__)
      200    0.000    0.000    0.000    0.000 Workbook.py:505(num_sheets)
      400    0.000    0.000    0.000    0.000 Sheet.py:120(get_cell)
      100    0.000    0.000    0.000    0.000 Graph.py:68(add_connection)
      100    0.000    0.000    0.602    0.006 lark.py:640(parse)
      100    0.000    0.000    0.000    0.000 parse_tree_builder.py:145(__call__)
      200    0.000    0.000    0.000    0.000 {built-in method _abc._abc_instancecheck}
     1200    0.000    0.000    0.000    0.000 {method 'strip' of 'str' objects}
      900    0.000    0.000    0.000    0.000 {method 'end' of 're.Match' objects}
      100    0.000    0.000    0.000    0.000 {method 'sub' of 're.Pattern' objects}
      200    0.000    0.000    0.000    0.000 Workbook.py:714(clean_children_cells)
      200    0.000    0.000    0.000    0.000 Graph.py:330(tarjans)
      100    0.000    0.000    0.001    0.000 re.py:203(sub)
      100    0.000    0.000    0.000    0.000 Graph.py:128(get_sheet_parents)
      200    0.000    0.000    0.000    0.000 utils.py:212(is_formula)
      500    0.000    0.000    0.000    0.000 earley_forest.py:207(__hash__)
      792    0.000    0.000    0.000    0.000 {method 'isalnum' of 'str' objects}
      200    0.000    0.000    0.000    0.000 {method 'quantize' of 'decimal.Decimal' objects}
      200    0.000    0.000    0.000    0.000 {method 'to_integral' of 'decimal.Decimal' objects}
      200    0.000    0.000    0.000    0.000 abc.py:96(__instancecheck__)
      400    0.000    0.000    0.000    0.000 {built-in method _heapq.heappush}
      100    0.000    0.000    0.000    0.000 parser_frontends.py:86(_verify_start)
      500    0.000    0.000    0.000    0.000 Cell.py:125(get_value)
      400    0.000    0.000    0.000    0.000 {method 'extend' of 'list' objects}
      100    0.000    0.000    0.000    0.000 Sheet.py:25(__init__)
      100    0.000    0.000    0.000    0.000 Workbook.py:857(recompute_sheet_parents)
      100    0.000    0.000    0.000    0.000 {method 'split' of 'str' objects}
      400    0.000    0.000    0.000    0.000 Cell.py:128(get_contents)
      100    0.000    0.000    0.007    0.000 visitors.py:415(visit)
      100    0.000    0.000    0.000    0.000 lark.py:220(__getattr__)
      100    0.000    0.000    0.000    0.000 {method 'update' of 'dict' objects}
      100    0.000    0.000    0.000    0.000 Graph.py:121(has_sheet)
      400    0.000    0.000    0.000    0.000 earley_forest.py:418(transform_token_node)
      300    0.000    0.000    0.000    0.000 Sheet.py:54(get_sheet_name)
      400    0.000    0.000    0.000    0.000 {built-in method builtins.ord}
      100    0.000    0.000    0.000    0.000 earley_forest.py:232(__init__)
      200    0.000    0.000    0.000    0.000 {method 'upper' of 'str' objects}
      200    0.000    0.000    0.000    0.000 {method 'rstrip' of 'str' objects}
      100    0.000    0.000    0.000    0.000 Graph.py:124(add_sheet)
      100    0.000    0.000    0.000    0.000 grammar.py:15(__init__)
      200    0.000    0.000    0.000    0.000 {method 'lstrip' of 'str' objects}
      100    0.000    0.000    0.000    0.000 Cell.py:59(cache_formula)
      100    0.000    0.000    0.000    0.000 Cell.py:131(set_children)
      200    0.000    0.000    0.000    0.000 {method 'is_finite' of 'decimal.Decimal' objects}
      100    0.000    0.000    0.000    0.000 Parser.py:108(get_cell_refs)
      100    0.000    0.000    0.000    0.000 {method 'items' of 'dict' objects}
      100    0.000    0.000    0.000    0.000 Sheet.py:57(get_sheet_cells)
      100    0.000    0.000    0.000    0.000 Cell.py:62(get_cached_formula)
      100    0.000    0.000    0.000    0.000 {method 'keys' of 'dict' objects}
        1    0.000    0.000    0.000    0.000 cProfile.py:134(__exit__)
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}



##################Running pro_rename_sheet... #######################
for test <function pro_rename_sheet at 0x0000017F1670A3A0> total time: 14.197144800000002
Total Logs
         2642192 function calls (2521392 primitive calls) in 1.456 seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
100800/100400    0.130    0.000    0.596    0.000 visitors.py:111(_call_userfunc)
    12000    0.107    0.000    0.185    0.000 tree.py:137(iter_subtrees)
     4000    0.089    0.000    0.256    0.000 visitors.py:293(transform)
    86500    0.079    0.000    0.095    0.000 typing.py:868(__new__)
     6500    0.074    0.000    0.764    0.000 visitors.py:278(transform)
197300/153200    0.073    0.000    0.116    0.000 {built-in method builtins.getattr}
164200/150400    0.073    0.000    0.560    0.000 visitors.py:143(_transform_children)
    72500    0.059    0.000    0.159    0.000 visitors.py:171(__default__)
   517800    0.055    0.000    0.057    0.000 {built-in method builtins.isinstance}
    85500    0.047    0.000    0.067    0.000 tree.py:147(<listcomp>)
      100    0.030    0.000    1.356    0.014 load_grammar.py:690(compile)
    20100    0.029    0.000    0.035    0.000 tree.py:179(expand_kids_by_data)
    82300    0.028    0.000    0.028    0.000 tree.py:61(__init__)
    59100    0.025    0.000    0.473    0.000 visitors.py:275(_transform_tree)
     4100    0.024    0.000    0.024    0.000 {built-in method builtins.compile}
94900/53400    0.021    0.000    0.032    0.000 {built-in method builtins.hash}
     4100    0.020    0.000    0.111    0.000 load_grammar.py:566(_literal_to_pattern)
     6300    0.019    0.000    0.034    0.000 functools.py:34(update_wrapper)
     4100    0.016    0.000    0.027    0.000 load_grammar.py:536(_rfind)
    67200    0.016    0.000    0.024    0.000 grammar.py:25(__hash__)
    86600    0.016    0.000    0.016    0.000 {built-in method __new__ of type object at 0x00007FFB2480DCB0}
   159000    0.016    0.000    0.016    0.000 {built-in method builtins.id}
    78800    0.016    0.000    0.016    0.000 tree.py:66(meta)
    26900    0.015    0.000    0.026    0.000 grammar.py:18(__eq__)
10500/4500    0.015    0.000    0.106    0.000 load_grammar.py:389(expansion)
     2800    0.014    0.000    0.074    0.000 tree_matcher.py:106(_build_recons_rules)
     4100    0.014    0.000    0.056    0.000 load_grammar.py:540(eval_escaping)
14600/8400    0.013    0.000    0.150    0.000 visitors.py:342(_call_userfunc)
   105100    0.011    0.000    0.011    0.000 {method 'append' of 'list' objects}
4000/1100    0.010    0.000    0.176    0.000 visitors.py:362(visit)
     9300    0.010    0.000    0.016    0.000 visitors.py:130(_call_userfunc_token)
5800/1200    0.010    0.000    0.033    0.000 visitors.py:155(_transform_tree)
     4100    0.010    0.000    0.040    0.000 ast.py:51(literal_eval)
    15500    0.009    0.000    0.044    0.000 load_grammar.py:384(_flatten)
     8400    0.009    0.000    0.025    0.000 grammar.py:103(__init__)
     6300    0.009    0.000    0.050    0.000 visitors.py:481(__get__)
     3500    0.008    0.000    0.035    0.000 load_grammar.py:420(expansions)
    83400    0.008    0.000    0.008    0.000 {built-in method builtins.len}
13900/12900    0.008    0.000    0.022    0.000 tree.py:134(__hash__)
1500/1300    0.007    0.000    0.074    0.000 load_grammar.py:405(<listcomp>)
    16100    0.007    0.000    0.009    0.000 lexer.py:265(__eq__)
     3500    0.007    0.000    0.015    0.000 tree_matcher.py:121(<listcomp>)
     1100    0.007    0.000    0.013    0.000 load_grammar.py:450(pattern)
     4100    0.007    0.000    0.126    0.000 load_grammar.py:601(literal)
     6300    0.006    0.000    0.041    0.000 visitors.py:470(__init__)
    48300    0.006    0.000    0.006    0.000 {method 'pop' of 'list' objects}
     4900    0.006    0.000    0.023    0.000 tree_matcher.py:57(make_recons_rule)
      100    0.006    0.000    1.442    0.014 tree_matcher.py:89(__init__)
     2500    0.006    0.000    0.759    0.000 visitors.py:258(transform)
    31500    0.005    0.000    0.005    0.000 {built-in method builtins.setattr}
     6300    0.005    0.000    0.156    0.000 visitors.py:478(__call__)
     6300    0.005    0.000    0.160    0.000 visitors.py:500(_vargs_inline)
     4700    0.005    0.000    0.005    0.000 lexer.py:41(__init__)
     4300    0.004    0.000    0.012    0.000 {built-in method builtins.max}
     2500    0.004    0.000    0.185    0.000 load_grammar.py:674(nr_deepcopy_tree)
    12300    0.004    0.000    0.007    0.000 load_grammar.py:537(<genexpr>)
      100    0.004    0.000    0.011    0.000 load_grammar.py:793(<setcomp>)
    10500    0.003    0.000    0.007    0.000 load_grammar.py:759(<genexpr>)
     4100    0.003    0.000    0.028    0.000 ast.py:30(parse)
     8200    0.003    0.000    0.003    0.000 {method 'rfind' of 'str' objects}
      100    0.003    0.000    0.004    0.000 Graph.py:28(rename_sheet)
      100    0.003    0.000    0.005    0.000 tree_matcher.py:28(_best_from_group)
     1500    0.003    0.000    0.011    0.000 utils.py:190(<listcomp>)
     3500    0.003    0.000    0.008    0.000 load_grammar.py:798(<lambda>)
     5400    0.003    0.000    0.004    0.000 lexer.py:50(__hash__)
     2000    0.003    0.000    0.016    0.000 load_grammar.py:631(expansions)
  300/200    0.002    0.000    1.458    0.007 Workbook.py:35(run_func)
     5100    0.002    0.000    0.002    0.000 grammar.py:69(__init__)
      100    0.002    0.000    0.003    0.000 load_grammar.py:806(<setcomp>)
     1000    0.002    0.000    0.008    0.000 load_grammar.py:346(expr)
    12000    0.002    0.000    0.002    0.000 {method 'values' of 'collections.OrderedDict' objects}
      100    0.002    0.000    1.454    0.015 Workbook.py:936(rename_sheet)
     6400    0.002    0.000    0.002    0.000 {method 'update' of 'dict' objects}
    11300    0.002    0.000    0.002    0.000 {method 'replace' of 'str' objects}
      100    0.002    0.000    0.325    0.003 load_grammar.py:710(<listcomp>)
     2000    0.002    0.000    0.004    0.000 load_grammar.py:637(<lambda>)
     4100    0.002    0.000    0.003    0.000 {built-in method builtins.all}
     4600    0.002    0.000    0.003    0.000 load_grammar.py:668(value)
      100    0.002    0.000    0.002    0.000 Workbook.py:1003(move_sheet)
      200    0.002    0.000    0.010    0.000 utils.py:271(<listcomp>)
      100    0.002    0.000    0.006    0.000 tree_matcher.py:115(<setcomp>)
     2000    0.002    0.000    0.005    0.000 lexer.py:81(to_regexp)
     1400    0.002    0.000    0.008    0.000 tree_matcher.py:61(make_recons_rule_to_term)
      600    0.002    0.000    0.006    0.000 {method 'sort' of 'list' objects}
    11600    0.002    0.000    0.002    0.000 tree.py:175(<lambda>)
     4900    0.002    0.000    0.002    0.000 tree_matcher.py:17(__init__)
     4800    0.002    0.000    0.002    0.000 grammar.py:42(__init__)
     4000    0.002    0.000    0.005    0.000 {method 'add' of 'set' objects}
     2100    0.002    0.000    0.005    0.000 lexer.py:125(__init__)
     3500    0.001    0.000    0.002    0.000 load_grammar.py:621(expansion)
      100    0.001    0.000    0.004    0.000 tree_matcher.py:108(<setcomp>)
     3500    0.001    0.000    0.006    0.000 grammar.py:22(__ne__)
     1500    0.001    0.000    0.013    0.000 utils.py:184(dedup_list)
     5000    0.001    0.000    0.001    0.000 {method 'startswith' of 'str' objects}
     4100    0.001    0.000    0.002    0.000 ast.py:76(_convert)
     2000    0.001    0.000    0.001    0.000 {method 'translate' of 'str' objects}
     1500    0.001    0.000    0.023    0.000 tree.py:169(find_pred)
     6900    0.001    0.000    0.001    0.000 tree_matcher.py:12(is_discarded_terminal)
     2000    0.001    0.000    0.003    0.000 re.py:270(escape)
     9300    0.001    0.000    0.001    0.000 visitors.py:178(__default_token__)
     3100    0.001    0.000    0.001    0.000 visitors.py:108(__init__)
     2500    0.001    0.000    0.007    0.000 load_grammar.py:639(<genexpr>)
     5400    0.001    0.000    0.001    0.000 grammar.py:15(__init__)
     2100    0.001    0.000    0.001    0.000 {built-in method _abc._abc_instancecheck}
      100    0.001    0.000    0.002    0.000 tree_matcher.py:116(<setcomp>)
      100    0.001    0.000    0.090    0.001 load_grammar.py:693(<listcomp>)
     2100    0.001    0.000    0.001    0.000 lexer.py:70(_get_flags)
     1500    0.001    0.000    0.001    0.000 lexer.py:53(__eq__)
      500    0.001    0.000    0.008    0.000 {method 'join' of 'str' objects}
     8900    0.001    0.000    0.001    0.000 grammar.py:121(__hash__)
     1500    0.001    0.000    0.024    0.000 tree.py:173(find_data)
     4900    0.001    0.000    0.001    0.000 load_grammar.py:572(<genexpr>)
     3500    0.001    0.000    0.001    0.000 {built-in method builtins.any}
     2100    0.001    0.000    0.002    0.000 abc.py:96(__instancecheck__)
     6500    0.001    0.000    0.001    0.000 typing.py:1149(cast)
    10300    0.001    0.000    0.001    0.000 {method 'items' of 'dict' objects}
      100    0.001    0.000    0.097    0.001 load_grammar.py:694(<listcomp>)
      100    0.001    0.000    0.003    0.000 load_grammar.py:246(_add_recurse_rule)
      100    0.001    0.000    1.444    0.014 reconstruct.py:80(__init__)
     3500    0.001    0.000    0.001    0.000 load_grammar.py:431(expansion)
     1200    0.001    0.000    0.034    0.000 visitors.py:159(transform)
      100    0.001    0.000    0.002    0.000 load_grammar.py:446(<dictcomp>)
     2000    0.001    0.000    0.001    0.000 lexer.py:88(max_width)
      600    0.001    0.000    0.001    0.000 load_grammar.py:411(alias)
     4100    0.001    0.000    0.001    0.000 {built-in method builtins.iter}
      100    0.001    0.000    0.002    0.000 Workbook.py:868(new_sheet)
      200    0.001    0.000    0.001    0.000 utils.py:96(check_new_name)
     2100    0.001    0.000    0.001    0.000 load_grammar.py:809(<lambda>)
     2000    0.001    0.000    0.001    0.000 lexer.py:84(min_width)
      100    0.001    0.000    0.002    0.000 copy.py:66(copy)
     3000    0.001    0.000    0.001    0.000 load_grammar.py:663(value)
     3000    0.001    0.000    0.001    0.000 load_grammar.py:617(pattern)
     2500    0.001    0.000    0.001    0.000 tree_matcher.py:44(<lambda>)
      100    0.000    0.000    0.005    0.000 load_grammar.py:375(maybe)
      500    0.000    0.000    0.000    0.000 load_grammar.py:640(<setcomp>)
      400    0.000    0.000    0.001    0.000 grammar.py:124(__eq__)
      100    0.000    0.000    0.001    0.000 load_grammar.py:642(expr)
      500    0.000    0.000    0.001    0.000 load_grammar.py:613(_make_joined_pattern)
      900    0.000    0.000    0.001    0.000 load_grammar.py:210(_args_as_int)
      100    0.000    0.000    0.000    0.000 load_grammar.py:235(_name_rule)
      600    0.000    0.000    0.000    0.000 utils.py:78(get_hidden_name)
     1100    0.000    0.000    0.000    0.000 tree.py:32(__init__)
      300    0.000    0.000    0.000    0.000 Graph.py:128(get_sheet_parents)
      100    0.000    0.000    0.000    0.000 reconstruct.py:83(<dictcomp>)
      100    0.000    0.000    0.001    0.000 copy.py:258(_reconstruct)
      200    0.000    0.000    0.001    0.000 visitors.py:163(__mul__)
      200    0.000    0.000    0.001    0.000 visitors.py:263(__mul__)
     2700    0.000    0.000    0.000    0.000 tree_matcher.py:43(<lambda>)
      800    0.000    0.000    0.000    0.000 load_grammar.py:434(alias)
      100    0.000    0.000    0.000    0.000 {method '__reduce_ex__' of 'object' objects}
      100    0.000    0.000    0.002    0.000 load_grammar.py:443(__init__)
      100    0.000    0.000    0.001    0.000 load_grammar.py:763(<listcomp>)
     1600    0.000    0.000    0.000    0.000 {built-in method builtins.next}
      100    0.000    0.000    0.006    0.000 tree_matcher.py:42(_best_rules_from_group)
     1490    0.000    0.000    0.000    0.000 {method 'isalnum' of 'str' objects}
     1200    0.000    0.000    0.000    0.000 {method 'lower' of 'str' objects}
      100    0.000    0.000    0.001    0.000 load_grammar.py:240(_add_rule)
      100    0.000    0.000    0.000    0.000 load_grammar.py:445(<setcomp>)
      200    0.000    0.000    0.011    0.000 utils.py:269(classify_bool)
      100    0.000    0.000    0.000    0.000 load_grammar.py:516(__init__)
      100    0.000    0.000    0.000    0.000 load_grammar.py:743(<setcomp>)
      100    0.000    0.000    0.000    0.000 Parser.py:349(__init__)
      200    0.000    0.000    0.000    0.000 load_grammar.py:201(_will_not_get_removed)
     1100    0.000    0.000    0.000    0.000 load_grammar.py:428(expansions)
      200    0.000    0.000    0.000    0.000 {built-in method builtins.sum}
      200    0.000    0.000    0.000    0.000 {method 'pop' of 'collections.OrderedDict' objects}
      200    0.000    0.000    0.000    0.000 Workbook.py:857(recompute_sheet_parents)
      200    0.000    0.000    0.000    0.000 Workbook.py:505(num_sheets)
      400    0.000    0.000    0.000    0.000 visitors.py:255(__init__)
      200    0.000    0.000    0.000    0.000 lark.py:220(__getattr__)
      200    0.000    0.000    0.001    0.000 load_grammar.py:219(expansion)
      100    0.000    0.000    0.000    0.000 {method 'index' of 'list' objects}
      200    0.000    0.000    0.001    0.000 load_grammar.py:222(expansions)
      100    0.000    0.000    0.000    0.000 load_grammar.py:797(<setcomp>)
      100    0.000    0.000    0.000    0.000 Sheet.py:25(__init__)
      100    0.000    0.000    0.000    0.000 {method 'insert' of 'list' objects}
      100    0.000    0.000    0.000    0.000 Sheet.py:134(set_sheet_name)
      400    0.000    0.000    0.000    0.000 {method 'get' of 'dict' objects}
      100    0.000    0.000    0.000    0.000 load_grammar.py:228(__init__)
      100    0.000    0.000    0.000    0.000 load_grammar.py:498(__init__)
      100    0.000    0.000    0.000    0.000 copyreg.py:90(__newobj__)
      100    0.000    0.000    0.000    0.000 Graph.py:121(has_sheet)
      100    0.000    0.000    0.000    0.000 lexer.py:98(to_regexp)
      500    0.000    0.000    0.000    0.000 {method 'keys' of 'collections.OrderedDict' objects}
      100    0.000    0.000    0.000    0.000 reconstruct.py:29(__init__)
      100    0.000    0.000    0.000    0.000 load_grammar.py:198(__init__)
      100    0.000    0.000    0.000    0.000 Graph.py:124(add_sheet)
      200    0.000    0.000    0.000    0.000 {method 'values' of 'dict' objects}
      100    0.000    0.000    0.000    0.000 {method 'reverse' of 'list' objects}
      100    0.000    0.000    0.000    0.000 Sheet.py:54(get_sheet_name)
      100    0.000    0.000    0.000    0.000 {built-in method builtins.hasattr}
      100    0.000    0.000    0.000    0.000 {method 'keys' of 'dict' objects}
      100    0.000    0.000    0.000    0.000 {built-in method builtins.issubclass}
      100    0.000    0.000    0.000    0.000 {method 'items' of 'collections.OrderedDict' objects}
        1    0.000    0.000    0.000    0.000 cProfile.py:134(__exit__)
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}



##################Running pro_copy_cells... #######################
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
for test <function pro_copy_cells at 0x0000017F1670A4C0> total time: 37.30392859999998
Total Logs
         6408586 function calls (6275225 primitive calls) in 3.818 seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
      198    0.229    0.001    0.457    0.002 grammar_analysis.py:78(calculate_sets)
     2178    0.212    0.000    0.784    0.000 earley.py:78(predict_and_complete)
   261855    0.154    0.000    0.271    0.000 grammar.py:18(__eq__)
101079/100683    0.147    0.000    0.698    0.000 visitors.py:111(_call_userfunc)
639045/587466    0.132    0.000    0.167    0.000 {built-in method builtins.hash}
    97515    0.125    0.000    0.190    0.000 earley_common.py:9(__init__)
    12177    0.122    0.000    0.210    0.000 tree.py:137(iter_subtrees)
   111076    0.121    0.000    0.145    0.000 typing.py:868(__new__)
  1005147    0.119    0.000    0.122    0.000 {built-in method builtins.isinstance}
   457677    0.118    0.000    0.171    0.000 grammar.py:25(__hash__)
     3960    0.104    0.000    0.296    0.000 visitors.py:293(transform)
      495    0.095    0.000    0.319    0.001 earley_forest.py:283(visit)
204324/160665    0.088    0.000    0.137    0.000 {built-in method builtins.getattr}
     6732    0.086    0.000    0.890    0.000 visitors.py:278(transform)
165528/151470    0.084    0.000    0.661    0.000 visitors.py:143(_transform_children)
   159283    0.077    0.000    0.098    0.000 lexer.py:265(__eq__)
    71874    0.066    0.000    0.180    0.000 visitors.py:171(__default__)
    85635    0.053    0.000    0.076    0.000 tree.py:147(<listcomp>)
    19998    0.052    0.000    0.156    0.000 grammar_analysis.py:187(_expand_rule)
    80586    0.052    0.000    0.081    0.000 utils.py:345(add)
     4059    0.052    0.000    0.052    0.000 {built-in method builtins.compile}
    64251    0.036    0.000    0.036    0.000 grammar_analysis.py:70(update_set)
       99    0.035    0.000    1.537    0.016 load_grammar.py:690(compile)
     8613    0.034    0.000    0.080    0.000 earley_forest.py:50(__init__)
341098/341091    0.034    0.000    0.034    0.000 {built-in method builtins.len}
    83358    0.032    0.000    0.032    0.000 tree.py:61(__init__)
    19899    0.030    0.000    0.037    0.000 tree.py:179(expand_kids_by_data)
    65633    0.030    0.000    0.067    0.000 {method 'add' of 'set' objects}
   247005    0.030    0.000    0.030    0.000 {built-in method builtins.id}
    59499    0.030    0.000    0.554    0.000 visitors.py:275(_transform_tree)
     4554    0.028    0.000    0.103    0.000 earley.py:135(<listcomp>)
    73953    0.028    0.000    0.028    0.000 earley_common.py:28(__eq__)
   229216    0.028    0.000    0.028    0.000 {method 'append' of 'list' objects}
    12375    0.027    0.000    0.198    0.000 utils.py:275(bfs)
   112957    0.025    0.000    0.025    0.000 {built-in method __new__ of type object at 0x00007FFB2480DCB0}
     1188    0.025    0.000    0.083    0.000 xearley.py:41(scan)
   170874    0.024    0.000    0.024    0.000 grammar.py:121(__hash__)
     4059    0.023    0.000    0.137    0.000 load_grammar.py:566(_literal_to_pattern)
    33759    0.022    0.000    0.037    0.000 utils.py:342(__contains__)
    34254    0.021    0.000    0.027    0.000 grammar_analysis.py:17(__init__)
     6237    0.021    0.000    0.037    0.000 functools.py:34(update_wrapper)
     7920    0.020    0.000    0.089    0.000 earley_forest.py:437(_visit_node_out_helper)
    80685    0.020    0.000    0.021    0.000 tree.py:66(meta)
     3960    0.018    0.000    0.043    0.000 earley_forest.py:603(transform_packed_node)
      396    0.017    0.000    0.034    0.000 utils.py:23(classify)
    70884    0.016    0.000    0.016    0.000 {built-in method builtins.next}
10395/4455    0.016    0.000    0.114    0.000 load_grammar.py:389(expansion)
     4059    0.016    0.000    0.088    0.000 load_grammar.py:540(eval_escaping)
     2772    0.016    0.000    0.079    0.000 tree_matcher.py:106(_build_recons_rules)
   116622    0.015    0.000    0.015    0.000 earley_common.py:31(__hash__)
14454/8316    0.014    0.000    0.162    0.000 visitors.py:342(_call_userfunc)
     7920    0.014    0.000    0.028    0.000 {built-in method builtins.sorted}
      198    0.014    0.000    0.764    0.004 earley.py:32(__init__)
    34254    0.013    0.000    0.032    0.000 grammar_analysis.py:45(__hash__)
      495    0.013    0.000    1.286    0.003 earley.py:262(parse)
    23265    0.013    0.000    0.028    0.000 utils.py:339(__init__)
    23265    0.013    0.000    0.015    0.000 {built-in method fromkeys}
     9999    0.012    0.000    0.026    0.000 visitors.py:130(_call_userfunc_token)
     8811    0.012    0.000    0.038    0.000 earley_forest.py:64(add_family)
     2475    0.012    0.000    0.214    0.000 grammar_analysis.py:180(expand_rule)
6039/1287    0.011    0.000    0.048    0.000 visitors.py:155(_transform_tree)
     8712    0.011    0.000    0.030    0.000 grammar.py:103(__init__)
      198    0.011    0.000    0.551    0.003 grammar_analysis.py:141(__init__)
     4059    0.011    0.000    0.070    0.000 ast.py:51(literal_eval)
     8811    0.011    0.000    0.018    0.000 earley_forest.py:131(__init__)
     6237    0.011    0.000    0.056    0.000 visitors.py:481(__get__)
3960/1089    0.011    0.000    0.189    0.000 visitors.py:362(visit)
    15345    0.011    0.000    0.047    0.000 load_grammar.py:384(_flatten)
    13064    0.010    0.000    0.010    0.000 {method 'match' of 're.Pattern' objects}
    56913    0.009    0.000    0.009    0.000 {method 'pop' of 'list' objects}
    33858    0.009    0.000    0.009    0.000 grammar_analysis.py:28(next)
     8811    0.009    0.000    0.036    0.000 earley_common.py:25(advance)
     3465    0.009    0.000    0.039    0.000 load_grammar.py:420(expansions)
      495    0.009    0.000    0.043    0.000 earley.py:188(scan)
13959/12969    0.009    0.000    0.024    0.000 tree.py:134(__hash__)
    23265    0.008    0.000    0.012    0.000 utils.py:348(__iter__)
1485/1287    0.008    0.000    0.080    0.000 load_grammar.py:405(<listcomp>)
     7920    0.008    0.000    0.042    0.000 earley_forest.py:85(children)
     3960    0.008    0.000    0.021    0.000 earley_forest.py:631(visit_packed_node_in)
     3168    0.008    0.000    0.020    0.000 earley_forest.py:581(transform_symbol_node)
     4059    0.007    0.000    0.153    0.000 load_grammar.py:601(literal)
     1089    0.007    0.000    0.014    0.000 load_grammar.py:450(pattern)
     6237    0.007    0.000    0.045    0.000 visitors.py:470(__init__)
     3465    0.007    0.000    0.015    0.000 tree_matcher.py:121(<listcomp>)
     3960    0.007    0.000    0.066    0.000 earley_forest.py:638(visit_packed_node_out)
     4851    0.007    0.000    0.024    0.000 tree_matcher.py:57(make_recons_rule)
       99    0.007    0.000    1.631    0.016 tree_matcher.py:89(__init__)
      297    0.006    0.000    1.020    0.003 tree_matcher.py:148(match_tree)
     2475    0.006    0.000    0.866    0.000 visitors.py:258(transform)
    12573    0.006    0.000    0.009    0.000 {method 'setdefault' of 'dict' objects}
     3960    0.006    0.000    0.033    0.000 earley_forest.py:422(visit_symbol_node_in)
    36036    0.006    0.000    0.006    0.000 {built-in method builtins.iter}
     3960    0.006    0.000    0.055    0.000 earley_forest.py:625(visit_symbol_node_in)
    31185    0.006    0.000    0.006    0.000 {built-in method builtins.setattr}
     3960    0.006    0.000    0.012    0.000 earley_forest.py:427(visit_packed_node_in)
      198    0.006    0.000    0.803    0.004 xearley.py:39(_parse)
     6237    0.006    0.000    0.187    0.000 visitors.py:478(__call__)
     6237    0.006    0.000    0.193    0.000 visitors.py:500(_vargs_inline)
     3168    0.005    0.000    0.016    0.000 earley_forest.py:565(_call_rule_func)
     9108    0.005    0.000    0.011    0.000 parser_frontends.py:184(match)
    40491    0.005    0.000    0.005    0.000 {method 'append' of 'collections.deque' objects}
     7920    0.005    0.000    0.007    0.000 earley_forest.py:145(sort_key)
     4653    0.005    0.000    0.005    0.000 lexer.py:41(__init__)
     4455    0.005    0.000    0.014    0.000 {built-in method builtins.max}
     3168    0.005    0.000    0.009    0.000 earley_forest.py:556(_collapse_ambig)
     3168    0.005    0.000    0.015    0.000 tree_matcher.py:48(_match)
     2475    0.005    0.000    0.214    0.000 load_grammar.py:674(nr_deepcopy_tree)
     2079    0.005    0.000    0.005    0.000 earley.py:58(<listcomp>)
       99    0.005    0.000    3.824    0.039 Workbook.py:421(copy_cells)
    35838    0.005    0.000    0.005    0.000 {method 'pop' of 'collections.deque' objects}
    12177    0.005    0.000    0.008    0.000 load_grammar.py:537(<genexpr>)
      297    0.004    0.000    0.008    0.000 tree_matcher.py:28(_best_from_group)
       99    0.004    0.000    0.012    0.000 load_grammar.py:793(<setcomp>)
       99    0.004    0.000    3.819    0.039 Workbook.py:282(transfer_cells)
      297    0.004    0.000    0.121    0.000 earley.py:171(_parse)
     3960    0.004    0.000    0.004    0.000 earley_forest.py:499(__init__)
      990    0.004    0.000    0.007    0.000 reconstruct.py:33(__default__)
      792    0.004    0.000    0.006    0.000 utils.py:179(convert_location_to_idx)
    10395    0.004    0.000    0.008    0.000 load_grammar.py:759(<genexpr>)
     4059    0.004    0.000    0.056    0.000 ast.py:30(parse)
     4546    0.004    0.000    0.006    0.000 re.py:289(_compile)
     4059    0.004    0.000    0.016    0.000 load_grammar.py:536(_rfind)
      297    0.004    0.000    0.566    0.002 Workbook.py:638(recompute_cell_and_parents)
     8118    0.004    0.000    0.004    0.000 {method 'rfind' of 'str' objects}
     3956    0.003    0.000    0.013    0.000 re.py:188(match)
     3960    0.003    0.000    0.005    0.000 earley_forest.py:155(children)
      297    0.003    0.000    0.584    0.002 Workbook.py:727(set_cell_contents)
     5445    0.003    0.000    0.003    0.000 grammar.py:69(__init__)
     5346    0.003    0.000    0.004    0.000 lexer.py:50(__hash__)
     1485    0.003    0.000    0.012    0.000 utils.py:190(<listcomp>)
    11880    0.003    0.000    0.003    0.000 {method 'remove' of 'set' objects}
      297    0.003    0.000    0.004    0.000 Graph.py:330(tarjans)
     1980    0.003    0.000    0.019    0.000 load_grammar.py:631(expansions)
     3960    0.003    0.000    0.058    0.000 earley_forest.py:450(visit_packed_node_out)
     3960    0.003    0.000    0.005    0.000 earley_forest.py:70(load_paths)
     3465    0.003    0.000    0.008    0.000 load_grammar.py:798(<lambda>)
     2178    0.003    0.000    0.010    0.000 tree_matcher.py:65(parse_rulename)
      198    0.003    0.000    0.008    0.000 grammar_analysis.py:82(<setcomp>)
     1782    0.003    0.000    0.004    0.000 lexer.py:213(_future_new)
     2572    0.003    0.000    0.010    0.000 {method 'join' of 'str' objects}
      990    0.003    0.000    0.009    0.000 load_grammar.py:346(expr)
      590    0.003    0.000    0.011    0.000 Parser.py:253(cell)
       99    0.003    0.000    0.382    0.004 load_grammar.py:710(<listcomp>)
     7920    0.003    0.000    0.004    0.000 utils.py:357(__len__)
    12177    0.003    0.000    0.003    0.000 {method 'values' of 'collections.OrderedDict' objects}
     1774    0.003    0.000    0.004    0.000 Sheet.py:93(get_cell_value)
       99    0.003    0.000    0.003    0.000 load_grammar.py:806(<setcomp>)
      891    0.002    0.000    0.003    0.000 utils.py:194(convert_idx_to_location)
      792    0.002    0.000    0.006    0.000 tree_matcher.py:21(__call__)
     6338    0.002    0.000    0.002    0.000 {method 'update' of 'dict' objects}
      198    0.002    0.000    0.004    0.000 earley.py:52(<setcomp>)
    11187    0.002    0.000    0.002    0.000 {method 'replace' of 'str' objects}
     6534    0.002    0.000    0.002    0.000 grammar.py:42(__init__)
      792    0.002    0.000    0.008    0.000 {method 'sort' of 'list' objects}
     1980    0.002    0.000    0.004    0.000 load_grammar.py:637(<lambda>)
      198    0.002    0.000    1.050    0.005 parser_frontends.py:100(parse)
     7920    0.002    0.000    0.002    0.000 earley_forest.py:141(is_empty)
      295    0.002    0.000    0.548    0.002 Workbook.py:544(get_formula_value)
      592    0.002    0.000    0.005    0.000 Cell.py:81(set_cell_value)
     3168    0.002    0.000    0.032    0.000 earley_forest.py:444(visit_symbol_node_out)
     4059    0.002    0.000    0.003    0.000 {built-in method builtins.all}
      198    0.002    0.000    0.003    0.000 tree_matcher.py:178(<dictcomp>)
     2475    0.002    0.000    0.005    0.000 typing.py:255(inner)
      198    0.002    0.000    0.003    0.000 earley.py:53(<setcomp>)
      198    0.002    0.000    0.011    0.000 utils.py:271(<listcomp>)
      198    0.002    0.000    0.003    0.000 {built-in method builtins.print}
      495    0.002    0.000    0.004    0.000 earley_forest.py:523(__init__)
     4554    0.002    0.000    0.003    0.000 load_grammar.py:668(value)
     2475    0.002    0.000    0.003    0.000 typing.py:720(__hash__)
     1287    0.002    0.000    0.002    0.000 earley_forest.py:432(visit_token_node)
     1980    0.002    0.000    0.006    0.000 lexer.py:81(to_regexp)
     4851    0.002    0.000    0.002    0.000 tree_matcher.py:17(__init__)
    11484    0.002    0.000    0.002    0.000 tree.py:175(<lambda>)
     1782    0.002    0.000    0.006    0.000 lexer.py:202(__new__)
       99    0.002    0.000    0.007    0.000 tree_matcher.py:115(<setcomp>)
      295    0.002    0.000    0.002    0.000 Parser.py:211(mul_expr)
     7821    0.002    0.000    0.002    0.000 tree_matcher.py:12(is_discarded_terminal)
     2277    0.002    0.000    0.002    0.000 {built-in method _abc._abc_instancecheck}
     1980    0.002    0.000    0.002    0.000 {method 'translate' of 'str' objects}
     1778    0.002    0.000    0.007    0.000 utils.py:131(check_valid_cell_location)
     8118    0.002    0.000    0.002    0.000 earley_forest.py:101(__hash__)
      495    0.002    0.000    0.321    0.001 earley_forest.py:535(visit)
      392    0.002    0.000    0.023    0.000 Workbook.py:582(recompute_cell_value)
     2079    0.002    0.000    0.006    0.000 lexer.py:125(__init__)
     7920    0.002    0.000    0.002    0.000 earley_forest.py:548(_check_cycle)
     1683    0.002    0.000    0.002    0.000 earley_forest.py:193(__init__)
     6831    0.002    0.000    0.002    0.000 grammar.py:15(__init__)
      792    0.002    0.000    0.002    0.000 earley_forest.py:591(transform_intermediate_node)
     3960    0.002    0.000    0.002    0.000 earley_forest.py:158(<listcomp>)
     3465    0.002    0.000    0.002    0.000 load_grammar.py:621(expansion)
       99    0.002    0.000    0.004    0.000 tree_matcher.py:108(<setcomp>)
     9172    0.002    0.000    0.002    0.000 {method 'lower' of 'str' objects}
     1386    0.002    0.000    0.008    0.000 tree_matcher.py:61(make_recons_rule_to_term)
     1485    0.002    0.000    0.014    0.000 utils.py:184(dedup_list)
     4950    0.002    0.000    0.002    0.000 {method 'startswith' of 'str' objects}
     8811    0.002    0.000    0.002    0.000 earley_forest.py:169(__hash__)
      495    0.002    0.000    0.005    0.000 earley.py:284(<listcomp>)
     3168    0.002    0.000    0.002    0.000 earley_forest.py:571(_call_ambig_func)
  885/295    0.002    0.000    0.023    0.000 visitors.py:421(_visit_tree)
     1485    0.002    0.000    0.027    0.000 tree.py:169(find_pred)
     3465    0.002    0.000    0.006    0.000 grammar.py:22(__ne__)
     4059    0.002    0.000    0.002    0.000 ast.py:76(_convert)
  885/295    0.001    0.000    0.021    0.000 visitors.py:444(inner)
     9900    0.001    0.000    0.001    0.000 {method 'popleft' of 'collections.deque' objects}
     1980    0.001    0.000    0.002    0.000 parse_tree_builder.py:20(__call__)
      495    0.001    0.000    0.322    0.001 earley_forest.py:397(transform)
      590    0.001    0.000    0.006    0.000 Workbook.py:806(get_cell_value)
     9801    0.001    0.000    0.001    0.000 visitors.py:178(__default_token__)
     2561    0.001    0.000    0.002    0.000 utils.py:78(get_hidden_name)
  792/396    0.001    0.000    1.043    0.003 reconstruct.py:85(_reconstruct)
     1980    0.001    0.000    0.003    0.000 re.py:270(escape)
       99    0.001    0.000    0.105    0.001 load_grammar.py:693(<listcomp>)
     2475    0.001    0.000    0.008    0.000 load_grammar.py:639(<genexpr>)
      495    0.001    0.000    0.002    0.000 earley_forest.py:390(__init__)
      885    0.001    0.000    0.015    0.000 Parser.py:40(fix_formula)
     2277    0.001    0.000    0.003    0.000 abc.py:96(__instancecheck__)
      295    0.001    0.000    0.001    0.000 Parser.py:97(__init__)
     2079    0.001    0.000    0.001    0.000 lexer.py:70(_get_flags)
      297    0.001    0.000    0.007    0.000 Sheet.py:60(set_cell_contents)
      394    0.001    0.000    0.002    0.000 Workbook.py:687(_get_sheet_name_location)
     4046    0.001    0.000    0.001    0.000 {method 'get' of 'dict' objects}
     6039    0.001    0.000    0.001    0.000 grammar_analysis.py:149(<lambda>)
  885/295    0.001    0.000    0.017    0.000 visitors.py:430(<listcomp>)
      297    0.001    0.000    0.002    0.000 earley.py:245(<setcomp>)
     1485    0.001    0.000    0.028    0.000 tree.py:173(find_data)
     2970    0.001    0.000    0.001    0.000 visitors.py:108(__init__)
     1485    0.001    0.000    0.001    0.000 lexer.py:53(__eq__)
      297    0.001    0.000    0.003    0.000 Workbook.py:714(clean_children_cells)
       99    0.001    0.000    0.002    0.000 tree_matcher.py:116(<setcomp>)
     4851    0.001    0.000    0.001    0.000 load_grammar.py:572(<genexpr>)
       99    0.001    0.000    0.111    0.001 load_grammar.py:694(<listcomp>)
     3465    0.001    0.000    0.001    0.000 {built-in method builtins.any}
      198    0.001    0.000    0.001    0.000 parser_frontends.py:96(_make_lexer_thread)
      198    0.001    0.000    0.005    0.000 Parser.py:389(CELLREF_NO_ABS)
       99    0.001    0.000    0.003    0.000 load_grammar.py:246(_add_recurse_rule)
     6039    0.001    0.000    0.001    0.000 grammar_analysis.py:172(<lambda>)
  885/295    0.001    0.000    0.017    0.000 visitors.py:429(visit_children)
     6435    0.001    0.000    0.001    0.000 typing.py:1149(cast)
     3366    0.001    0.000    0.001    0.000 tree_matcher.py:44(<lambda>)
       99    0.001    0.000    1.632    0.016 reconstruct.py:80(__init__)
     1683    0.001    0.000    0.001    0.000 utils.py:354(__bool__)
     1287    0.001    0.000    0.049    0.000 visitors.py:159(transform)
     3267    0.001    0.000    0.001    0.000 {built-in method builtins.hasattr}
      198    0.001    0.000    0.018    0.000 grammar_analysis.py:175(<dictcomp>)
      198    0.001    0.000    0.002    0.000 grammar_analysis.py:145(<dictcomp>)
      198    0.001    0.000    0.002    0.000 Parser.py:382(cell)
       99    0.001    0.000    0.002    0.000 copy.py:66(copy)
      198    0.001    0.000    0.001    0.000 grammar_analysis.py:60(__init__)
      297    0.001    0.000    0.011    0.000 tree_matcher.py:42(_best_rules_from_group)
     2178    0.001    0.000    0.001    0.000 tree.py:32(__init__)
       99    0.001    0.000    0.002    0.000 load_grammar.py:446(<dictcomp>)
      594    0.001    0.000    0.001    0.000 load_grammar.py:411(alias)
      297    0.001    0.000    0.585    0.002 Workbook.py:35(run_func)
      885    0.001    0.000    0.001    0.000 utils.py:295(get_highest_precedence_error)
      297    0.001    0.000    0.003    0.000 Cell.py:65(set_contents)
      590    0.001    0.000    0.002    0.000 re.py:203(sub)
     1980    0.001    0.000    0.001    0.000 lexer.py:88(max_width)
     2970    0.001    0.000    0.001    0.000 load_grammar.py:663(value)
      297    0.001    0.000    0.002    0.000 Workbook.py:778(get_cell_contents)
      394    0.001    0.000    0.001    0.000 utils.py:207(remove_exponent)
      295    0.001    0.000    0.004    0.000 Sheet.py:104(set_cell_value)
     2970    0.001    0.000    0.001    0.000 load_grammar.py:617(pattern)
     3465    0.001    0.000    0.001    0.000 load_grammar.py:431(expansion)
      590    0.001    0.000    0.001    0.000 {method 'sub' of 're.Pattern' objects}
     2079    0.001    0.000    0.001    0.000 load_grammar.py:809(<lambda>)
      792    0.001    0.000    0.001    0.000 reconstruct.py:15(is_iter_empty)
     2178    0.001    0.000    0.001    0.000 {method 'groups' of 're.Match' objects}
       99    0.001    0.000    0.005    0.000 load_grammar.py:375(maybe)
      297    0.001    0.000    0.001    0.000 Sheet.py:124(update_extent)
     1980    0.001    0.000    0.001    0.000 lexer.py:84(min_width)
       99    0.001    0.000    0.001    0.000 load_grammar.py:642(expr)
      792    0.001    0.000    0.005    0.000 earley_forest.py:447(visit_intermediate_node_out)
      495    0.001    0.000    0.001    0.000 load_grammar.py:640(<setcomp>)
      198    0.001    0.000    1.050    0.005 lark.py:640(parse)
      986    0.001    0.000    0.001    0.000 Sheet.py:120(get_cell)
      396    0.001    0.000    0.001    0.000 {built-in method _codecs.charmap_encode}
      198    0.001    0.000    0.002    0.000 grammar_analysis.py:166(<dictcomp>)
     1188    0.001    0.000    0.001    0.000 {method 'group' of 're.Match' objects}
      495    0.001    0.000    0.001    0.000 load_grammar.py:613(_make_joined_pattern)
      396    0.001    0.000    0.001    0.000 grammar.py:124(__eq__)
       99    0.001    0.000    1.044    0.011 reconstruct.py:96(reconstruct)
      198    0.000    0.000    0.001    0.000 grammar_analysis.py:163(<dictcomp>)
      396    0.000    0.000    0.001    0.000 cp1252.py:18(encode)
       99    0.000    0.000    0.000    0.000 {method '__reduce_ex__' of 'object' objects}
       99    0.000    0.000    0.001    0.000 utils.py:307(error_matcher)
      198    0.000    0.000    0.019    0.000 grammar_analysis.py:160(<dictcomp>)
      689    0.000    0.000    0.001    0.000 utils.py:212(is_formula)
       99    0.000    0.000    0.002    0.000 Workbook.py:700(add_children_cells)
      392    0.000    0.000    0.001    0.000 Workbook.py:575(get_cell_from_location)
     1771    0.000    0.000    0.000    0.000 Cell.py:125(get_value)
      891    0.000    0.000    0.001    0.000 load_grammar.py:210(_args_as_int)
     1683    0.000    0.000    0.000    0.000 earley_forest.py:207(__hash__)
     1881    0.000    0.000    0.000    0.000 {method 'upper' of 'str' objects}
      198    0.000    0.000    0.001    0.000 parse_tree_builder.py:145(__call__)
     3564    0.000    0.000    0.000    0.000 tree_matcher.py:43(<lambda>)
      784    0.000    0.000    0.000    0.000 Graph.py:137(get_parents_from_cell)
      196    0.000    0.000    0.001    0.000 Graph.py:96(update_child)
       99    0.000    0.000    0.002    0.000 load_grammar.py:443(__init__)
       99    0.000    0.000    0.000    0.000 load_grammar.py:235(_name_rule)
      396    0.000    0.000    0.000    0.000 lark.py:220(__getattr__)
       99    0.000    0.000    0.000    0.000 reconstruct.py:83(<dictcomp>)
      198    0.000    0.000    0.001    0.000 visitors.py:163(__mul__)
       99    0.000    0.000    0.001    0.000 copy.py:258(_reconstruct)
      394    0.000    0.000    0.000    0.000 {method 'to_integral' of 'decimal.Decimal' objects}
      199    0.000    0.000    0.001    0.000 Workbook.py:540(get_sheet_name_from_hidden)
      297    0.000    0.000    0.000    0.000 Sheet.py:99(get_cell_contents)
      792    0.000    0.000    0.000    0.000 load_grammar.py:434(alias)
      394    0.000    0.000    0.000    0.000 {method 'split' of 'str' objects}
      198    0.000    0.000    0.000    0.000 common.py:83(__init__)
      495    0.000    0.000    0.000    0.000 earley_forest.py:232(__init__)
      891    0.000    0.000    0.000    0.000 {built-in method builtins.divmod}
      198    0.000    0.000    0.001    0.000 visitors.py:263(__mul__)
      394    0.000    0.000    0.000    0.000 {method 'normalize' of 'decimal.Decimal' objects}
       99    0.000    0.000    0.001    0.000 load_grammar.py:763(<listcomp>)
      891    0.000    0.000    0.000    0.000 {built-in method builtins.chr}
      198    0.000    0.000    0.000    0.000 parser_frontends.py:86(_verify_start)
     1876    0.000    0.000    0.000    0.000 {method 'strip' of 'str' objects}
      295    0.000    0.000    0.023    0.000 visitors.py:415(visit)
      198    0.000    0.000    0.000    0.000 Graph.py:68(add_connection)
     1586    0.000    0.000    0.000    0.000 {built-in method builtins.ord}
      198    0.000    0.000    0.000    0.000 load_grammar.py:201(_will_not_get_removed)
     1188    0.000    0.000    0.000    0.000 {method 'end' of 're.Match' objects}
       99    0.000    0.000    0.000    0.000 load_grammar.py:445(<setcomp>)
       99    0.000    0.000    0.000    0.000 load_grammar.py:516(__init__)
     1083    0.000    0.000    0.000    0.000 Cell.py:128(get_contents)
      198    0.000    0.000    0.011    0.000 utils.py:269(classify_bool)
       99    0.000    0.000    0.001    0.000 load_grammar.py:240(_add_rule)
       99    0.000    0.000    0.000    0.000 load_grammar.py:743(<setcomp>)
      694    0.000    0.000    0.000    0.000 {method 'items' of 'dict' objects}
     1287    0.000    0.000    0.000    0.000 earley_forest.py:418(transform_token_node)
      396    0.000    0.000    0.000    0.000 visitors.py:255(__init__)
      495    0.000    0.000    0.000    0.000 {method 'clear' of 'set' objects}
      198    0.000    0.000    0.001    0.000 load_grammar.py:219(expansion)
      297    0.000    0.000    0.000    0.000 tree_matcher.py:74(__init__)
      198    0.000    0.000    0.001    0.000 {built-in method builtins.sum}
     1089    0.000    0.000    0.000    0.000 load_grammar.py:428(expansions)
       99    0.000    0.000    0.000    0.000 Cell.py:59(cache_formula)
      693    0.000    0.000    0.000    0.000 {method 'values' of 'dict' objects}
      495    0.000    0.000    0.000    0.000 earley.py:254(<setcomp>)
      594    0.000    0.000    0.000    0.000 {method 'lstrip' of 'str' objects}
      211    0.000    0.000    0.000    0.000 {built-in method builtins.min}
      4/1    0.000    0.000    0.000    0.000 sre_parse.py:493(_parse)
      198    0.000    0.000    0.001    0.000 load_grammar.py:222(expansions)
      295    0.000    0.000    0.000    0.000 Cell.py:131(set_children)
       99    0.000    0.000    0.000    0.000 load_grammar.py:797(<setcomp>)
      491    0.000    0.000    0.000    0.000 Cell.py:62(get_cached_formula)
       99    0.000    0.000    0.000    0.000 load_grammar.py:228(__init__)
       99    0.000    0.000    0.000    0.000 lexer.py:98(to_regexp)
      490    0.000    0.000    0.000    0.000 Cell.py:135(get_children)
       99    0.000    0.000    0.000    0.000 load_grammar.py:498(__init__)
      196    0.000    0.000    0.000    0.000 {method 'remove' of 'list' objects}
      594    0.000    0.000    0.000    0.000 {method 'rstrip' of 'str' objects}
       99    0.000    0.000    0.000    0.000 copyreg.py:90(__newobj__)
      297    0.000    0.000    0.000    0.000 tree_matcher.py:77(lex)
      295    0.000    0.000    0.000    0.000 Parser.py:108(get_cell_refs)
       99    0.000    0.000    0.000    0.000 reconstruct.py:29(__init__)
       99    0.000    0.000    0.000    0.000 Parser.py:378(__init__)
      199    0.000    0.000    0.000    0.000 Sheet.py:54(get_sheet_name)
      396    0.000    0.000    0.000    0.000 codecs.py:276(reset)
       99    0.000    0.000    0.000    0.000 load_grammar.py:198(__init__)
      394    0.000    0.000    0.000    0.000 {method 'is_finite' of 'decimal.Decimal' objects}
      6/1    0.000    0.000    0.000    0.000 sre_compile.py:71(_compile)
       99    0.000    0.000    0.000    0.000 {method 'reverse' of 'list' objects}
       99    0.000    0.000    0.000    0.000 {built-in method builtins.issubclass}
        1    0.000    0.000    0.000    0.000 sre_compile.py:598(_code)
      8/3    0.000    0.000    0.000    0.000 sre_parse.py:174(getwidth)
       34    0.000    0.000    0.000    0.000 sre_parse.py:164(__getitem__)
        1    0.000    0.000    0.000    0.000 sre_compile.py:759(compile)
       17    0.000    0.000    0.000    0.000 sre_parse.py:233(__next)
      4/1    0.000    0.000    0.000    0.000 sre_parse.py:435(_parse_sub)
      2/1    0.000    0.000    0.000    0.000 sre_compile.py:461(_get_literal_prefix)
        1    0.000    0.000    0.000    0.000 sre_parse.py:937(parse)
        1    0.000    0.000    0.000    0.000 sre_compile.py:536(_compile_info)
        1    0.000    0.000    0.000    0.000 sre_compile.py:276(_optimize_charset)
       11    0.000    0.000    0.000    0.000 sre_parse.py:286(tell)
       11    0.000    0.000    0.000    0.000 sre_parse.py:254(get)
       15    0.000    0.000    0.000    0.000 sre_parse.py:249(match)
        7    0.000    0.000    0.000    0.000 sre_parse.py:111(__init__)
        1    0.000    0.000    0.000    0.000 enum.py:938(__and__)
       13    0.000    0.000    0.000    0.000 sre_parse.py:160(__len__)
        2    0.000    0.000    0.000    0.000 enum.py:313(__call__)
        2    0.000    0.000    0.000    0.000 sre_parse.py:84(opengroup)
        3    0.000    0.000    0.000    0.000 Cell.py:46(__init__)
        7    0.000    0.000    0.000    0.000 sre_parse.py:172(append)
        1    0.000    0.000    0.000    0.000 sre_compile.py:249(_compile_charset)
        2    0.000    0.000    0.000    0.000 enum.py:631(__new__)
        6    0.000    0.000    0.000    0.000 sre_parse.py:81(groups)
        1    0.000    0.000    0.000    0.000 sre_parse.py:224(__init__)
        3    0.000    0.000    0.000    0.000 sre_compile.py:423(_simple)
        1    0.000    0.000    0.000    0.000 cProfile.py:134(__exit__)
        4    0.000    0.000    0.000    0.000 sre_compile.py:65(_combine_flags)
        1    0.000    0.000    0.000    0.000 {built-in method _sre.compile}
        1    0.000    0.000    0.000    0.000 sre_parse.py:76(__init__)
        1    0.000    0.000    0.000    0.000 sre_compile.py:492(_get_charset_prefix)
        2    0.000    0.000    0.000    0.000 sre_parse.py:96(closegroup)
        2    0.000    0.000    0.000    0.000 sre_compile.py:595(isstring)
        1    0.000    0.000    0.000    0.000 {method 'find' of 'bytearray' objects}
        6    0.000    0.000    0.000    0.000 {built-in method _heapq.heappush}
        1    0.000    0.000    0.000    0.000 sre_parse.py:921(fix_flags)
        1    0.000    0.000    0.000    0.000 sre_parse.py:355(_escape)
        3    0.000    0.000    0.000    0.000 sre_compile.py:453(_get_iscased)
        3    0.000    0.000    0.000    0.000 sre_parse.py:168(__setitem__)
        1    0.000    0.000    0.000    0.000 sre_parse.py:288(seek)
        1    0.000    0.000    0.000    0.000 {method 'extend' of 'list' objects}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}



##################Running pro_copy_cells2... #######################
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
for test <function pro_copy_cells2 at 0x0000017F1670A5E0> total time: 248.60076740000005
Total Logs
         37084339 function calls (36823915 primitive calls) in 24.484 seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
    35739    4.157    0.000   14.315    0.000 earley.py:78(predict_and_complete)
  1658151    2.294    0.000    3.486    0.000 earley_common.py:9(__init__)
     5247    1.661    0.000    5.785    0.001 earley_forest.py:283(visit)
4275374/4112465    1.232    0.000    1.578    0.000 {built-in method builtins.hash}
  1396296    0.978    0.000    1.535    0.000 utils.py:345(add)
  1071774    0.856    0.000    1.560    0.000 grammar.py:18(__eq__)
  2313922    0.700    0.000    1.017    0.000 grammar.py:25(__hash__)
   122067    0.579    0.000    1.471    0.000 earley_forest.py:50(__init__)
   409734    0.561    0.000    0.671    0.000 typing.py:868(__new__)
  1287198    0.525    0.000    0.531    0.000 earley_common.py:28(__eq__)
    20889    0.501    0.000    1.590    0.000 xearley.py:41(scan)
   935895    0.485    0.000    0.620    0.000 lexer.py:265(__eq__)
  3243412    0.484    0.000    0.484    0.000 {built-in method builtins.isinstance}
    66825    0.442    0.000    1.586    0.000 earley.py:135(<listcomp>)
   553806    0.402    0.000    0.663    0.000 utils.py:342(__contains__)
   137016    0.366    0.000    1.580    0.000 earley_forest.py:437(_visit_node_out_helper)
   346104    0.351    0.000    0.401    0.000 {built-in method fromkeys}
    69696    0.329    0.000    0.781    0.000 earley_forest.py:603(transform_packed_node)
  1216132    0.300    0.000    0.300    0.000 {built-in method builtins.next}
  2051775    0.295    0.000    0.295    0.000 earley_common.py:31(__hash__)
  2005933    0.273    0.000    0.273    0.000 {method 'append' of 'list' objects}
  1808033    0.272    0.000    0.272    0.000 grammar.py:121(__hash__)
   134640    0.257    0.000    0.548    0.000 {built-in method builtins.sorted}
  2116253    0.236    0.000    0.236    0.000 {built-in method builtins.len}
  1611825    0.236    0.000    0.236    0.000 {built-in method builtins.id}
   346104    0.209    0.000    0.610    0.000 utils.py:339(__init__)
   125433    0.193    0.000    0.592    0.000 earley_forest.py:64(add_family)
     9603    0.170    0.000    0.935    0.000 earley.py:188(scan)
   391545    0.169    0.000    0.242    0.000 utils.py:348(__iter__)
   247900    0.168    0.000    0.168    0.000 {method 'match' of 're.Pattern' objects}
   125433    0.167    0.000    0.286    0.000 earley_forest.py:131(__init__)
   125433    0.160    0.000    0.593    0.000 earley_common.py:25(advance)
    69696    0.151    0.000    0.436    0.000 earley_forest.py:631(visit_packed_node_in)
   134640    0.148    0.000    0.804    0.000 earley_forest.py:85(children)
     5247    0.147    0.000   23.291    0.004 earley.py:262(parse)
    69696    0.128    0.000    1.216    0.000 earley_forest.py:638(visit_packed_node_out)
    49698    0.125    0.000    0.304    0.000 earley_forest.py:581(transform_symbol_node)
   427060    0.124    0.000    0.124    0.000 {built-in method __new__ of type object at 0x00007FFB2480DCB0}
    46431    0.123    0.000    0.243    0.000 reconstruct.py:33(__default__)
    67320    0.111    0.000    0.649    0.000 earley_forest.py:422(visit_symbol_node_in)
    69696    0.110    0.000    0.264    0.000 earley_forest.py:427(visit_packed_node_in)
    67320    0.108    0.000    1.053    0.000 earley_forest.py:625(visit_symbol_node_in)
   189090    0.106    0.000    0.224    0.000 parser_frontends.py:184(match)
52488/52484    0.102    0.000    0.445    0.000 visitors.py:111(_call_userfunc)
   545828    0.102    0.000    0.102    0.000 {built-in method builtins.iter}
   189387    0.101    0.000    0.140    0.000 {method 'setdefault' of 'dict' objects}
   139392    0.096    0.000    0.142    0.000 earley_forest.py:145(sort_key)
185618/185177    0.093    0.000    0.095    0.000 {built-in method builtins.getattr}
     5114    0.092    0.000    0.829    0.000 visitors.py:278(transform)
133609/119215    0.090    0.000    0.592    0.000 visitors.py:143(_transform_children)
   345294    0.086    0.000    0.087    0.000 {method 'add' of 'set' objects}
     5169    0.085    0.000    0.145    0.000 tree.py:137(iter_subtrees)
      198    0.085    0.000   13.204    0.067 xearley.py:39(_parse)
   601326    0.084    0.000    0.084    0.000 {method 'pop' of 'collections.deque' objects}
    69696    0.080    0.000    0.122    0.000 earley_forest.py:155(children)
    49698    0.078    0.000    0.288    0.000 earley_forest.py:565(_call_rule_func)
     5049    0.076    0.000    3.842    0.001 earley.py:171(_parse)
   565859    0.073    0.000    0.073    0.000 {method 'append' of 'collections.deque' objects}
    67320    0.072    0.000    0.074    0.000 earley_forest.py:499(__init__)
    58905    0.071    0.000    0.296    0.000 tree_matcher.py:48(_match)
    49698    0.066    0.000    0.110    0.000 earley_forest.py:556(_collapse_ambig)
    58212    0.064    0.000    0.228    0.000 tree_matcher.py:65(parse_rulename)
    67320    0.059    0.000    0.109    0.000 earley_forest.py:70(load_paths)
    19602    0.055    0.000    0.136    0.000 tree_matcher.py:21(__call__)
   204336    0.052    0.000    0.052    0.000 {method 'remove' of 'set' objects}
    69696    0.052    0.000    1.065    0.000 earley_forest.py:450(visit_packed_node_out)
    91373    0.051    0.000    0.067    0.000 tree.py:66(meta)
   134640    0.048    0.000    0.070    0.000 utils.py:357(__len__)
   139392    0.047    0.000    0.047    0.000 earley_forest.py:141(is_empty)
    58810    0.046    0.000    0.152    0.000 re.py:188(match)
    34248    0.044    0.000    0.081    0.000 visitors.py:130(_call_userfunc_token)
    69696    0.042    0.000    0.042    0.000 earley_forest.py:158(<listcomp>)
    58909    0.040    0.000    0.056    0.000 re.py:289(_compile)
    17622    0.037    0.000    0.052    0.000 earley_forest.py:591(transform_intermediate_node)
    49698    0.037    0.000    0.496    0.000 earley_forest.py:444(visit_symbol_node_out)
    47286    0.037    0.000    0.052    0.000 tree.py:147(<listcomp>)
     5049    0.037    0.000    6.565    0.001 tree_matcher.py:148(match_tree)
    63391    0.035    0.000    0.035    0.000 tree.py:61(__init__)
44055/6633    0.033    0.000    7.417    0.001 reconstruct.py:85(_reconstruct)
    22869    0.033    0.000    0.041    0.000 earley_forest.py:432(visit_token_node)
    17325    0.030    0.000    0.044    0.000 lexer.py:213(_future_new)
   137016    0.030    0.000    0.030    0.000 earley_forest.py:548(_check_cycle)
      198    0.029    0.000   16.858    0.085 parser_frontends.py:100(parse)
   123453    0.029    0.000    0.029    0.000 earley_forest.py:101(__hash__)
   137499    0.028    0.000    0.028    0.000 {method 'pop' of 'list' objects}
    27225    0.027    0.000    0.069    0.000 earley_forest.py:193(__init__)
    49698    0.027    0.000    0.034    0.000 earley_forest.py:571(_call_ambig_func)
    47022    0.026    0.000    0.435    0.000 visitors.py:275(_transform_tree)
   125433    0.024    0.000    0.024    0.000 earley_forest.py:169(__hash__)
    17325    0.021    0.000    0.065    0.000 lexer.py:202(__new__)
     5247    0.021    0.000    5.805    0.001 earley_forest.py:535(visit)
26968/5079    0.020    0.000    0.034    0.000 tree.py:134(__hash__)
    22770    0.019    0.000    0.031    0.000 parse_tree_builder.py:20(__call__)
     5247    0.017    0.000    0.031    0.000 earley_forest.py:523(__init__)
    32769    0.017    0.000    0.017    0.000 utils.py:354(__bool__)
    46541    0.016    0.000    0.016    0.000 tree.py:32(__init__)
    58212    0.014    0.000    0.014    0.000 {method 'groups' of 're.Match' objects}
     5049    0.014    0.000    0.026    0.000 earley.py:245(<setcomp>)
     5247    0.014    0.000    5.821    0.001 earley_forest.py:397(transform)
    19602    0.014    0.000    0.020    0.000 reconstruct.py:15(is_iter_empty)
    17622    0.013    0.000    0.121    0.000 earley_forest.py:447(visit_intermediate_node_out)
     5247    0.012    0.000    0.034    0.000 earley.py:284(<listcomp>)
    49699    0.012    0.000    0.012    0.000 {built-in method builtins.hasattr}
     5247    0.011    0.000    0.014    0.000 earley_forest.py:390(__init__)
 5107/111    0.011    0.000    0.075    0.001 visitors.py:155(_transform_tree)
        1    0.010    0.010   24.484   24.484 Workbook.py:282(transfer_cells)
     2574    0.009    0.000    0.016    0.000 parse_tree_builder.py:145(__call__)
    17028    0.008    0.000    0.008    0.000 {method 'group' of 're.Match' objects}
    26106    0.007    0.000    0.007    0.000 tree_matcher.py:12(is_discarded_terminal)
     3069    0.007    0.000    0.022    0.000 xearley.py:88(<listcomp>)
  4455/99    0.007    0.000    0.062    0.001 visitors.py:444(inner)
        7    0.007    0.001    0.013    0.002 grammar_analysis.py:78(calculate_sets)
  4752/99    0.007    0.000    0.063    0.001 visitors.py:421(_visit_tree)
    27225    0.006    0.000    0.006    0.000 earley_forest.py:207(__hash__)
     5675    0.006    0.000    0.017    0.000 visitors.py:171(__default__)
  4455/99    0.006    0.000    0.061    0.001 visitors.py:430(<listcomp>)
    34149    0.005    0.000    0.005    0.000 visitors.py:178(__default_token__)
    10450    0.005    0.000    0.005    0.000 grammar.py:42(__init__)
     4455    0.005    0.000    0.025    0.000 Parser.py:40(fix_formula)
       99    0.005    0.000    7.423    0.075 reconstruct.py:96(reconstruct)
     3069    0.005    0.000    0.005    0.000 xearley.py:85(<listcomp>)
    23166    0.005    0.000    0.005    0.000 {method 'end' of 're.Match' objects}
    22869    0.004    0.000    0.004    0.000 earley_forest.py:418(transform_token_node)
  4455/99    0.004    0.000    0.062    0.001 visitors.py:429(visit_children)
     9603    0.003    0.000    0.003    0.000 {method 'clear' of 'set' objects}
     9603    0.003    0.000    0.003    0.000 earley.py:254(<setcomp>)
    10279    0.003    0.000    0.003    0.000 grammar.py:15(__init__)
      300    0.003    0.000    0.005    0.000 utils.py:179(convert_location_to_idx)
      792    0.003    0.000    0.004    0.000 Parser.py:169(add_expr)
      198    0.003    0.000    0.005    0.000 {built-in method builtins.print}
     4455    0.003    0.000    0.005    0.000 utils.py:295(get_highest_precedence_error)
     5247    0.003    0.000    0.003    0.000 earley_forest.py:232(__init__)
      198    0.003    0.000    8.358    0.042 Workbook.py:638(recompute_cell_and_parents)
     6833    0.003    0.000    0.003    0.000 {method 'get' of 'dict' objects}
      198    0.003    0.000    8.372    0.042 Workbook.py:727(set_cell_contents)
      891    0.002    0.000    0.003    0.000 Parser.py:211(mul_expr)
     1782    0.002    0.000    0.002    0.000 Parser.py:243(number)
     5049    0.002    0.000    0.002    0.000 tree_matcher.py:74(__init__)
       99    0.002    0.000    8.351    0.084 Workbook.py:544(get_formula_value)
     6138    0.002    0.000    0.002    0.000 {method 'extend' of 'list' objects}
      198    0.002    0.000    0.008    0.000 Sheet.py:60(set_cell_contents)
      803    0.002    0.000    0.002    0.000 {method 'join' of 'str' objects}
      695    0.002    0.000    0.005    0.000 grammar_analysis.py:187(_expand_rule)
     5169    0.002    0.000    0.002    0.000 {method 'values' of 'collections.OrderedDict' objects}
      496    0.002    0.000    0.002    0.000 utils.py:194(convert_idx_to_location)
      297    0.002    0.000    0.031    0.000 Parser.py:299(function)
     5049    0.002    0.000    0.002    0.000 tree_matcher.py:77(lex)
      693    0.001    0.000    0.002    0.000 Sheet.py:93(get_cell_value)
       99    0.001    0.000    0.005    0.000 Parser.py:253(cell)
      198    0.001    0.000    0.002    0.000 parser_frontends.py:96(_make_lexer_thread)
       40    0.001    0.000    0.004    0.000 visitors.py:293(transform)
     2156    0.001    0.000    0.001    0.000 grammar_analysis.py:70(update_set)
      396    0.001    0.000    0.001    0.000 {built-in method _codecs.charmap_encode}
      598    0.001    0.000    0.004    0.000 utils.py:131(check_valid_cell_location)
      198    0.001    0.000    0.027    0.000 Functions.py:188(func)
       99    0.001    0.000    0.006    0.000 Parser.py:389(CELLREF_NO_ABS)
      450    0.001    0.000    0.006    0.000 utils.py:275(bfs)
      297    0.001    0.000    0.001    0.000 Cell.py:81(set_cell_value)
      198    0.001    0.000    0.002    0.000 Cell.py:46(__init__)
      198    0.001    0.000   16.859    0.085 lark.py:640(parse)
      792    0.001    0.000    0.001    0.000 utils.py:78(get_hidden_name)
      198    0.001    0.000    8.373    0.042 Workbook.py:35(run_func)
     2876    0.001    0.000    0.001    0.000 {method 'lower' of 'str' objects}
     1169    0.001    0.000    0.001    0.000 grammar_analysis.py:17(__init__)
      396    0.001    0.000    0.002    0.000 cp1252.py:18(encode)
       99    0.001    0.000    0.002    0.000 Workbook.py:806(get_cell_value)
      198    0.001    0.000    0.001    0.000 Functions.py:185(__init__)
        7    0.001    0.000    0.023    0.003 earley.py:32(__init__)
       99    0.001    0.000    0.001    0.000 Parser.py:97(__init__)
   105/45    0.001    0.000    0.002    0.000 load_grammar.py:389(expansion)
      495    0.001    0.000    0.026    0.000 Functions.py:68(eval_arg)
   594/99    0.001    0.000    0.063    0.001 visitors.py:415(visit)
       99    0.001    0.000    0.001    0.000 Parser.py:382(cell)
       89    0.001    0.000    0.007    0.000 grammar_analysis.py:180(expand_rule)
       99    0.000    0.000    0.001    0.000 Workbook.py:687(_get_sheet_name_location)
      198    0.000    0.000    0.001    0.000 Cell.py:65(set_contents)
      200    0.000    0.000    0.000    0.000 lark.py:220(__getattr__)
       99    0.000    0.000    0.002    0.000 Workbook.py:700(add_children_cells)
      198    0.000    0.000    0.001    0.000 parser_frontends.py:86(_verify_start)
      198    0.000    0.000    0.001    0.000 utils.py:289(get_error_precedence)
       14    0.000    0.000    0.001    0.000 utils.py:23(classify)
      198    0.000    0.000    0.001    0.000 Sheet.py:124(update_extent)
        1    0.000    0.000    0.021    0.021 load_grammar.py:690(compile)
      396    0.000    0.000    0.000    0.000 {built-in method _heapq.heappush}
      201    0.000    0.000    0.001    0.000 tree.py:179(expand_kids_by_data)
      297    0.000    0.000    0.029    0.000 Functions.py:71(__call__)
     1169    0.000    0.000    0.001    0.000 grammar_analysis.py:45(__hash__)
       41    0.000    0.000    0.000    0.000 {built-in method builtins.compile}
      297    0.000    0.000    0.000    0.000 Functions.py:64(__init__)
       99    0.000    0.000    0.000    0.000 {method 'sub' of 're.Pattern' objects}
      297    0.000    0.000    0.000    0.000 Parser.py:289(boolean)
        7    0.000    0.000    0.016    0.002 grammar_analysis.py:141(__init__)
      198    0.000    0.000    0.000    0.000 utils.py:26(convert_to)
     1192    0.000    0.000    0.000    0.000 {method 'upper' of 'str' objects}
      198    0.000    0.000    0.001    0.000 Workbook.py:540(get_sheet_name_from_hidden)
      198    0.000    0.000    0.001    0.000 Workbook.py:714(clean_children_cells)
       99    0.000    0.000    0.001    0.000 Sheet.py:104(set_cell_value)
       99    0.000    0.000    0.000    0.000 Graph.py:68(add_connection)
       41    0.000    0.000    0.001    0.000 load_grammar.py:566(_literal_to_pattern)
       63    0.000    0.000    0.001    0.000 functools.py:34(update_wrapper)
      396    0.000    0.000    0.000    0.000 Sheet.py:120(get_cell)
     1155    0.000    0.000    0.000    0.000 grammar_analysis.py:28(next)
       99    0.000    0.000    0.001    0.000 re.py:203(sub)
      496    0.000    0.000    0.000    0.000 {built-in method builtins.chr}
       99    0.000    0.000    0.001    0.000 Functions.py:214(func)
      198    0.000    0.000    0.000    0.000 utils.py:212(is_formula)
      198    0.000    0.000    0.001    0.000 Workbook.py:778(get_cell_contents)
      496    0.000    0.000    0.000    0.000 {built-in method builtins.divmod}
   146/84    0.000    0.000    0.003    0.000 visitors.py:342(_call_userfunc)
      198    0.000    0.000    0.000    0.000 Graph.py:330(tarjans)
       41    0.000    0.000    0.001    0.000 load_grammar.py:540(eval_escaping)
      111    0.000    0.000    0.075    0.001 visitors.py:159(transform)
      600    0.000    0.000    0.000    0.000 {built-in method builtins.ord}
      198    0.000    0.000    0.000    0.000 enum.py:735(__hash__)
       99    0.000    0.000    0.000    0.000 CellError.py:11(__init__)
       99    0.000    0.000    0.000    0.000 {method 'split' of 'str' objects}
       99    0.000    0.000    0.000    0.000 Functions.py:211(__init__)
      495    0.000    0.000    0.000    0.000 Cell.py:125(get_value)
        1    0.000    0.000   24.484   24.484 Workbook.py:421(copy_cells)
       75    0.000    0.000    0.000    0.000 earley.py:58(<listcomp>)
    40/11    0.000    0.000    0.003    0.000 visitors.py:362(visit)
       63    0.000    0.000    0.001    0.000 visitors.py:481(__get__)
      594    0.000    0.000    0.000    0.000 {method 'strip' of 'str' objects}
       28    0.000    0.000    0.001    0.000 tree_matcher.py:106(_build_recons_rules)
      155    0.000    0.000    0.001    0.000 load_grammar.py:384(_flatten)
      198    0.000    0.000    0.000    0.000 Sheet.py:99(get_cell_contents)
       35    0.000    0.000    0.001    0.000 load_grammar.py:420(expansions)
       41    0.000    0.000    0.001    0.000 ast.py:51(literal_eval)
      396    0.000    0.000    0.000    0.000 Parser.py:111(parens)
      396    0.000    0.000    0.000    0.000 {method 'lstrip' of 'str' objects}
      396    0.000    0.000    0.000    0.000 Cell.py:128(get_contents)
       98    0.000    0.000    0.000    0.000 grammar.py:103(__init__)
       99    0.000    0.000    0.000    0.000 Parser.py:378(__init__)
       11    0.000    0.000    0.000    0.000 load_grammar.py:450(pattern)
    15/13    0.000    0.000    0.002    0.000 load_grammar.py:405(<listcomp>)
      396    0.000    0.000    0.000    0.000 codecs.py:276(reset)
       41    0.000    0.000    0.002    0.000 load_grammar.py:601(literal)
       99    0.000    0.000    0.000    0.000 Cell.py:59(cache_formula)
      396    0.000    0.000    0.000    0.000 {method 'rstrip' of 'str' objects}
       63    0.000    0.000    0.001    0.000 visitors.py:470(__init__)
       63    0.000    0.000    0.002    0.000 visitors.py:478(__call__)
       99    0.000    0.000    0.000    0.000 Cell.py:131(set_children)
       25    0.000    0.000    0.012    0.000 visitors.py:258(transform)
      315    0.000    0.000    0.000    0.000 {built-in method builtins.setattr}
      198    0.000    0.000    0.000    0.000 CellError.py:21(get_type)
       63    0.000    0.000    0.002    0.000 visitors.py:500(_vargs_inline)
        1    0.000    0.000    0.022    0.022 tree_matcher.py:89(__init__)
        7    0.000    0.000    0.000    0.000 grammar_analysis.py:82(<setcomp>)
      198    0.000    0.000    0.000    0.000 Sheet.py:54(get_sheet_name)
      123    0.000    0.000    0.000    0.000 load_grammar.py:537(<genexpr>)
        7    0.000    0.000    0.000    0.000 earley.py:52(<setcomp>)
       89    0.000    0.000    0.000    0.000 typing.py:255(inner)
       49    0.000    0.000    0.000    0.000 tree_matcher.py:57(make_recons_rule)
       35    0.000    0.000    0.000    0.000 tree_matcher.py:121(<listcomp>)
       47    0.000    0.000    0.000    0.000 lexer.py:41(__init__)
       45    0.000    0.000    0.000    0.000 {built-in method builtins.max}
        7    0.000    0.000    0.000    0.000 tree_matcher.py:178(<dictcomp>)
       89    0.000    0.000    0.000    0.000 typing.py:720(__hash__)
        7    0.000    0.000    0.000    0.000 earley.py:53(<setcomp>)
       99    0.000    0.000    0.000    0.000 Parser.py:108(get_cell_refs)
        8    0.000    0.000    0.000    0.000 tree_matcher.py:28(_best_from_group)
       99    0.000    0.000    0.000    0.000 Cell.py:62(get_cached_formula)
       41    0.000    0.000    0.000    0.000 load_grammar.py:536(_rfind)
      361    0.000    0.000    0.000    0.000 {method 'popleft' of 'collections.deque' objects}
       41    0.000    0.000    0.000    0.000 ast.py:30(parse)
       25    0.000    0.000    0.003    0.000 load_grammar.py:674(nr_deepcopy_tree)
       54    0.000    0.000    0.000    0.000 lexer.py:50(__hash__)
      105    0.000    0.000    0.000    0.000 load_grammar.py:759(<genexpr>)
        1    0.000    0.000    0.000    0.000 load_grammar.py:793(<setcomp>)
       15    0.000    0.000    0.000    0.000 utils.py:190(<listcomp>)
       82    0.000    0.000    0.000    0.000 {method 'rfind' of 'str' objects}
       10    0.000    0.000    0.000    0.000 load_grammar.py:346(expr)
       20    0.000    0.000    0.000    0.000 load_grammar.py:631(expansions)
       65    0.000    0.000    0.000    0.000 grammar.py:69(__init__)
       65    0.000    0.000    0.000    0.000 {method 'update' of 'dict' objects}
      113    0.000    0.000    0.000    0.000 {method 'replace' of 'str' objects}
      198    0.000    0.000    0.000    0.000 grammar_analysis.py:149(<lambda>)
      198    0.000    0.000    0.000    0.000 grammar_analysis.py:172(<lambda>)
       13    0.000    0.000    0.000    0.000 {method 'sort' of 'list' objects}
        1    0.000    0.000    0.004    0.004 load_grammar.py:710(<listcomp>)
       46    0.000    0.000    0.000    0.000 load_grammar.py:668(value)
       41    0.000    0.000    0.000    0.000 {built-in method builtins.all}
       20    0.000    0.000    0.000    0.000 load_grammar.py:637(<lambda>)
       35    0.000    0.000    0.000    0.000 load_grammar.py:798(<lambda>)
        1    0.000    0.000    0.000    0.000 load_grammar.py:806(<setcomp>)
        7    0.000    0.000    0.000    0.000 grammar_analysis.py:145(<dictcomp>)
       20    0.000    0.000    0.000    0.000 lexer.py:81(to_regexp)
        7    0.000    0.000    0.001    0.000 grammar_analysis.py:175(<dictcomp>)
       15    0.000    0.000    0.000    0.000 utils.py:184(dedup_list)
       21    0.000    0.000    0.000    0.000 lexer.py:125(__init__)
      116    0.000    0.000    0.000    0.000 tree.py:175(<lambda>)
        8    0.000    0.000    0.000    0.000 tree_matcher.py:42(_best_rules_from_group)
        7    0.000    0.000    0.000    0.000 grammar_analysis.py:60(__init__)
       35    0.000    0.000    0.000    0.000 load_grammar.py:621(expansion)
       41    0.000    0.000    0.000    0.000 ast.py:76(_convert)
        2    0.000    0.000    0.000    0.000 utils.py:271(<listcomp>)
       15    0.000    0.000    0.000    0.000 tree.py:169(find_pred)
       20    0.000    0.000    0.000    0.000 {method 'translate' of 'str' objects}
       15    0.000    0.000    0.000    0.000 lexer.py:53(__eq__)
       49    0.000    0.000    0.000    0.000 tree_matcher.py:17(__init__)
       25    0.000    0.000    0.000    0.000 load_grammar.py:639(<genexpr>)
       21    0.000    0.000    0.000    0.000 {built-in method _abc._abc_instancecheck}
       20    0.000    0.000    0.000    0.000 re.py:270(escape)
        7    0.000    0.000    0.000    0.000 grammar_analysis.py:166(<dictcomp>)
        1    0.000    0.000    0.000    0.000 tree_matcher.py:115(<setcomp>)
       50    0.000    0.000    0.000    0.000 {method 'startswith' of 'str' objects}
        1    0.000    0.000    0.000    0.000 copy.py:66(copy)
       35    0.000    0.000    0.000    0.000 grammar.py:22(__ne__)
       21    0.000    0.000    0.000    0.000 abc.py:96(__instancecheck__)
        1    0.000    0.000    0.000    0.000 tree_matcher.py:108(<setcomp>)
        7    0.000    0.000    0.000    0.000 grammar_analysis.py:163(<dictcomp>)
        1    0.000    0.000    0.000    0.000 load_grammar.py:246(_add_recurse_rule)
        1    0.000    0.000    0.001    0.001 load_grammar.py:693(<listcomp>)
       49    0.000    0.000    0.000    0.000 load_grammar.py:572(<genexpr>)
        1    0.000    0.000    0.001    0.001 load_grammar.py:694(<listcomp>)
       14    0.000    0.000    0.000    0.000 tree_matcher.py:61(make_recons_rule_to_term)
       21    0.000    0.000    0.000    0.000 lexer.py:70(_get_flags)
        7    0.000    0.000    0.000    0.000 grammar_analysis.py:160(<dictcomp>)
       35    0.000    0.000    0.000    0.000 {built-in method builtins.any}
       41    0.000    0.000    0.000    0.000 tree_matcher.py:44(<lambda>)
       15    0.000    0.000    0.001    0.000 tree.py:173(find_data)
        1    0.000    0.000    0.000    0.000 load_grammar.py:375(maybe)
       65    0.000    0.000    0.000    0.000 typing.py:1149(cast)
       30    0.000    0.000    0.000    0.000 visitors.py:108(__init__)
        6    0.000    0.000    0.000    0.000 load_grammar.py:411(alias)
        1    0.000    0.000    0.000    0.000 tree_matcher.py:116(<setcomp>)
        1    0.000    0.000    0.000    0.000 load_grammar.py:446(<dictcomp>)
       20    0.000    0.000    0.000    0.000 lexer.py:88(max_width)
       35    0.000    0.000    0.000    0.000 load_grammar.py:431(expansion)
        7    0.000    0.000    0.000    0.000 common.py:83(__init__)
       20    0.000    0.000    0.000    0.000 lexer.py:84(min_width)
       30    0.000    0.000    0.000    0.000 load_grammar.py:617(pattern)
       30    0.000    0.000    0.000    0.000 load_grammar.py:663(value)
        1    0.000    0.000    0.022    0.022 reconstruct.py:80(__init__)
        9    0.000    0.000    0.000    0.000 load_grammar.py:210(_args_as_int)
        2    0.000    0.000    0.000    0.000 load_grammar.py:201(_will_not_get_removed)
        1    0.000    0.000    0.000    0.000 load_grammar.py:642(expr)
        1    0.000    0.000    0.000    0.000 copy.py:258(_reconstruct)
        5    0.000    0.000    0.000    0.000 load_grammar.py:640(<setcomp>)
        1    0.000    0.000    0.000    0.000 {method '__reduce_ex__' of 'object' objects}
        2    0.000    0.000    0.000    0.000 load_grammar.py:219(expansion)
        5    0.000    0.000    0.000    0.000 load_grammar.py:613(_make_joined_pattern)
       21    0.000    0.000    0.000    0.000 load_grammar.py:809(<lambda>)
        1    0.000    0.000    0.000    0.000 load_grammar.py:235(_name_rule)
       22    0.000    0.000    0.000    0.000 {method 'items' of 'dict' objects}
        4    0.000    0.000    0.000    0.000 grammar.py:124(__eq__)
        2    0.000    0.000    0.000    0.000 visitors.py:163(__mul__)
       22    0.000    0.000    0.000    0.000 {method 'values' of 'dict' objects}
        1    0.000    0.000    0.000    0.000 load_grammar.py:443(__init__)
       43    0.000    0.000    0.000    0.000 tree_matcher.py:43(<lambda>)
        1    0.000    0.000    0.000    0.000 cProfile.py:134(__exit__)
        1    0.000    0.000    0.000    0.000 load_grammar.py:763(<listcomp>)
        1    0.000    0.000    0.000    0.000 load_grammar.py:240(_add_rule)
        1    0.000    0.000    0.000    0.000 load_grammar.py:445(<setcomp>)
        8    0.000    0.000    0.000    0.000 load_grammar.py:434(alias)
        2    0.000    0.000    0.000    0.000 visitors.py:263(__mul__)
        1    0.000    0.000    0.000    0.000 reconstruct.py:83(<dictcomp>)
        1    0.000    0.000    0.000    0.000 load_grammar.py:743(<setcomp>)
        2    0.000    0.000    0.000    0.000 {built-in method builtins.sum}
        4    0.000    0.000    0.000    0.000 visitors.py:255(__init__)
        2    0.000    0.000    0.000    0.000 utils.py:269(classify_bool)
        2    0.000    0.000    0.000    0.000 load_grammar.py:222(expansions)
        1    0.000    0.000    0.000    0.000 load_grammar.py:228(__init__)
        1    0.000    0.000    0.000    0.000 load_grammar.py:516(__init__)
       11    0.000    0.000    0.000    0.000 load_grammar.py:428(expansions)
        2    0.000    0.000    0.000    0.000 {built-in method builtins.min}
        1    0.000    0.000    0.000    0.000 lexer.py:98(to_regexp)
        1    0.000    0.000    0.000    0.000 load_grammar.py:797(<setcomp>)
        1    0.000    0.000    0.000    0.000 copyreg.py:90(__newobj__)
        1    0.000    0.000    0.000    0.000 reconstruct.py:29(__init__)
        1    0.000    0.000    0.000    0.000 load_grammar.py:498(__init__)
        1    0.000    0.000    0.000    0.000 load_grammar.py:198(__init__)
        1    0.000    0.000    0.000    0.000 {built-in method builtins.issubclass}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
        1    0.000    0.000    0.000    0.000 {method 'reverse' of 'list' objects}



##################Running pro_move_cells... #######################
=A1*B1
A1*B1
for test <function pro_move_cells at 0x0000017F1670A700> total time: 19.67160939999999
Total Logs
         2704174 function calls (2583318 primitive calls) in 2.005 seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
100813/100413    0.174    0.000    0.820    0.000 visitors.py:111(_call_userfunc)
    12003    0.141    0.000    0.245    0.000 tree.py:137(iter_subtrees)
     4000    0.118    0.000    0.345    0.000 visitors.py:293(transform)
    86660    0.110    0.000    0.132    0.000 typing.py:868(__new__)
     6503    0.100    0.000    1.049    0.000 visitors.py:278(transform)
197403/153303    0.098    0.000    0.155    0.000 {built-in method builtins.getattr}
164230/150426    0.097    0.000    0.772    0.000 visitors.py:143(_transform_children)
    72501    0.080    0.000    0.217    0.000 visitors.py:171(__default__)
   524111    0.074    0.000    0.077    0.000 {built-in method builtins.isinstance}
     4100    0.062    0.000    0.062    0.000 {built-in method builtins.compile}
    85510    0.062    0.000    0.089    0.000 tree.py:147(<listcomp>)
      100    0.041    0.000    1.831    0.018 load_grammar.py:690(compile)
    82319    0.037    0.000    0.037    0.000 tree.py:61(__init__)
    20100    0.036    0.000    0.043    0.000 tree.py:179(expand_kids_by_data)
    59110    0.035    0.000    0.655    0.000 visitors.py:275(_transform_tree)
100406/58800    0.029    0.000    0.043    0.000 {built-in method builtins.hash}
     4100    0.028    0.000    0.164    0.000 load_grammar.py:566(_literal_to_pattern)
     6300    0.025    0.000    0.045    0.000 functools.py:34(update_wrapper)
    71151    0.022    0.000    0.032    0.000 grammar.py:25(__hash__)
    86778    0.022    0.000    0.022    0.000 {built-in method __new__ of type object at 0x00007FFB2480DCB0}
   159905    0.021    0.000    0.021    0.000 {built-in method builtins.id}
    78827    0.021    0.000    0.022    0.000 tree.py:66(meta)
    29276    0.020    0.000    0.035    0.000 grammar.py:18(__eq__)
     2800    0.019    0.000    0.096    0.000 tree_matcher.py:106(_build_recons_rules)
     4100    0.019    0.000    0.106    0.000 load_grammar.py:540(eval_escaping)
10500/4500    0.019    0.000    0.134    0.000 load_grammar.py:389(expansion)
14600/8400    0.017    0.000    0.191    0.000 visitors.py:342(_call_userfunc)
   108748    0.015    0.000    0.015    0.000 {method 'append' of 'list' objects}
     9308    0.013    0.000    0.022    0.000 visitors.py:130(_call_userfunc_token)
5803/1201    0.013    0.000    0.044    0.000 visitors.py:155(_transform_tree)
     4100    0.013    0.000    0.084    0.000 ast.py:51(literal_eval)
     6300    0.012    0.000    0.067    0.000 visitors.py:481(__get__)
     8404    0.012    0.000    0.033    0.000 grammar.py:103(__init__)
4000/1100    0.012    0.000    0.223    0.000 visitors.py:362(visit)
    15500    0.012    0.000    0.055    0.000 load_grammar.py:384(_flatten)
    89008    0.011    0.000    0.011    0.000 {built-in method builtins.len}
     3500    0.011    0.000    0.046    0.000 load_grammar.py:420(expansions)
13902/12902    0.010    0.000    0.029    0.000 tree.py:134(__hash__)
    17556    0.010    0.000    0.012    0.000 lexer.py:265(__eq__)
1500/1300    0.009    0.000    0.094    0.000 load_grammar.py:405(<listcomp>)
    49586    0.009    0.000    0.009    0.000 {method 'pop' of 'list' objects}
     1100    0.009    0.000    0.017    0.000 load_grammar.py:450(pattern)
     4100    0.009    0.000    0.184    0.000 load_grammar.py:601(literal)
     6300    0.009    0.000    0.055    0.000 visitors.py:470(__init__)
     3500    0.009    0.000    0.018    0.000 tree_matcher.py:121(<listcomp>)
     4900    0.008    0.000    0.030    0.000 tree_matcher.py:57(make_recons_rule)
      100    0.008    0.000    1.943    0.019 tree_matcher.py:89(__init__)
     2500    0.008    0.000    1.042    0.000 visitors.py:258(transform)
     6300    0.007    0.000    0.225    0.000 visitors.py:478(__call__)
     6300    0.007    0.000    0.232    0.000 visitors.py:500(_vargs_inline)
    31500    0.007    0.000    0.007    0.000 {built-in method builtins.setattr}
     4500    0.006    0.000    0.016    0.000 {built-in method builtins.max}
     4700    0.006    0.000    0.006    0.000 lexer.py:41(__init__)
     2500    0.006    0.000    0.247    0.000 load_grammar.py:674(nr_deepcopy_tree)
    12300    0.005    0.000    0.010    0.000 load_grammar.py:537(<genexpr>)
      100    0.005    0.000    0.014    0.000 load_grammar.py:793(<setcomp>)
     4100    0.005    0.000    0.068    0.000 ast.py:30(parse)
    10500    0.005    0.000    0.009    0.000 load_grammar.py:759(<genexpr>)
     4100    0.004    0.000    0.019    0.000 load_grammar.py:536(_rfind)
     8200    0.004    0.000    0.004    0.000 {method 'rfind' of 'str' objects}
      600    0.004    0.000    0.033    0.000 Workbook.py:727(set_cell_contents)
     1500    0.004    0.000    0.014    0.000 utils.py:190(<listcomp>)
     5400    0.004    0.000    0.005    0.000 lexer.py:50(__hash__)
      102    0.004    0.000    0.007    0.000 tree_matcher.py:28(_best_from_group)
      600    0.003    0.000    0.005    0.000 Graph.py:330(tarjans)
     3500    0.003    0.000    0.011    0.000 load_grammar.py:798(<lambda>)
      600    0.003    0.000    0.017    0.000 Workbook.py:638(recompute_cell_and_parents)
      902    0.003    0.000    0.005    0.000 utils.py:179(convert_location_to_idx)
      100    0.003    0.000    0.004    0.000 load_grammar.py:806(<setcomp>)
      100    0.003    0.000    2.004    0.020 Workbook.py:282(transfer_cells)
     2000    0.003    0.000    0.022    0.000 load_grammar.py:631(expansions)
     5104    0.003    0.000    0.003    0.000 grammar.py:69(__init__)
      100    0.003    0.000    0.456    0.005 load_grammar.py:710(<listcomp>)
    11300    0.003    0.000    0.003    0.000 {method 'replace' of 'str' objects}
    12003    0.003    0.000    0.003    0.000 {method 'values' of 'collections.OrderedDict' objects}
     1000    0.003    0.000    0.011    0.000 load_grammar.py:346(expr)
     4100    0.003    0.000    0.004    0.000 {built-in method builtins.all}
     6402    0.003    0.000    0.003    0.000 {method 'update' of 'dict' objects}
      100    0.003    0.000    2.007    0.020 Workbook.py:369(move_cells)
     2000    0.003    0.000    0.005    0.000 load_grammar.py:637(<lambda>)
     2311    0.003    0.000    0.012    0.000 {method 'join' of 'str' objects}
      200    0.003    0.000    0.014    0.000 utils.py:271(<listcomp>)
     4600    0.002    0.000    0.003    0.000 load_grammar.py:668(value)
     4627    0.002    0.000    0.007    0.000 {method 'add' of 'set' objects}
     4818    0.002    0.000    0.002    0.000 grammar.py:42(__init__)
     2000    0.002    0.000    0.008    0.000 lexer.py:81(to_regexp)
      602    0.002    0.000    0.008    0.000 {method 'sort' of 'list' objects}
      100    0.002    0.000    0.007    0.000 tree_matcher.py:115(<setcomp>)
     4900    0.002    0.000    0.002    0.000 tree_matcher.py:17(__init__)
    11600    0.002    0.000    0.002    0.000 tree.py:175(<lambda>)
     2100    0.002    0.000    0.007    0.000 lexer.py:125(__init__)
     3500    0.002    0.000    0.003    0.000 load_grammar.py:621(expansion)
     3500    0.002    0.000    0.007    0.000 grammar.py:22(__ne__)
      702    0.002    0.000    0.003    0.000 utils.py:194(convert_idx_to_location)
       22    0.002    0.000    0.007    0.000 earley.py:78(predict_and_complete)
     5000    0.002    0.000    0.002    0.000 {method 'startswith' of 'str' objects}
     2000    0.002    0.000    0.002    0.000 {method 'translate' of 'str' objects}
     4100    0.002    0.000    0.002    0.000 ast.py:76(_convert)
      100    0.002    0.000    0.005    0.000 tree_matcher.py:108(<setcomp>)
     1400    0.002    0.000    0.010    0.000 tree_matcher.py:61(make_recons_rule_to_term)
     6910    0.002    0.000    0.002    0.000 tree_matcher.py:12(is_discarded_terminal)
     1500    0.002    0.000    0.016    0.000 utils.py:184(dedup_list)
     1500    0.002    0.000    0.030    0.000 tree.py:169(find_pred)
        2    0.002    0.001    0.003    0.002 grammar_analysis.py:78(calculate_sets)
     2000    0.002    0.000    0.004    0.000 re.py:270(escape)
     2106    0.002    0.000    0.002    0.000 {built-in method _abc._abc_instancecheck}
     9306    0.002    0.000    0.002    0.000 visitors.py:178(__default_token__)
     2500    0.002    0.000    0.009    0.000 load_grammar.py:639(<genexpr>)
     1426    0.002    0.000    0.002    0.000 {method 'match' of 're.Pattern' objects}
     5415    0.002    0.000    0.002    0.000 grammar.py:15(__init__)
      600    0.001    0.000    0.006    0.000 Sheet.py:60(set_cell_contents)
      100    0.001    0.000    0.123    0.001 load_grammar.py:693(<listcomp>)
    10537    0.001    0.000    0.001    0.000 grammar.py:121(__hash__)
     2100    0.001    0.000    0.001    0.000 lexer.py:70(_get_flags)
     1334    0.001    0.000    0.005    0.000 re.py:188(match)
     1312    0.001    0.000    0.006    0.000 utils.py:131(check_valid_cell_location)
     1500    0.001    0.000    0.001    0.000 lexer.py:53(__eq__)
      100    0.001    0.000    0.002    0.000 tree_matcher.py:116(<setcomp>)
     3000    0.001    0.000    0.001    0.000 visitors.py:108(__init__)
      985    0.001    0.000    0.002    0.000 earley_common.py:9(__init__)
     4900    0.001    0.000    0.001    0.000 load_grammar.py:572(<genexpr>)
     1344    0.001    0.000    0.002    0.000 re.py:289(_compile)
      100    0.001    0.000    0.004    0.000 load_grammar.py:246(_add_recurse_rule)
     1220    0.001    0.000    0.002    0.000 Sheet.py:93(get_cell_value)
     2106    0.001    0.000    0.003    0.000 abc.py:96(__instancecheck__)
     1500    0.001    0.000    0.031    0.000 tree.py:173(find_data)
     3500    0.001    0.000    0.001    0.000 {built-in method builtins.any}
     4423    0.001    0.000    0.001    0.000 {built-in method builtins.iter}
      600    0.001    0.000    0.034    0.000 Workbook.py:35(run_func)
     1731    0.001    0.000    0.001    0.000 utils.py:78(get_hidden_name)
     6500    0.001    0.000    0.001    0.000 typing.py:1149(cast)
      100    0.001    0.000    1.945    0.019 reconstruct.py:80(__init__)
     1201    0.001    0.000    0.044    0.000 visitors.py:159(transform)
      100    0.001    0.000    0.002    0.000 load_grammar.py:446(<dictcomp>)
      600    0.001    0.000    0.002    0.000 load_grammar.py:411(alias)
      100    0.001    0.000    0.126    0.001 load_grammar.py:694(<listcomp>)
     2000    0.001    0.000    0.001    0.000 lexer.py:88(max_width)
     3000    0.001    0.000    0.001    0.000 load_grammar.py:617(pattern)
     4403    0.001    0.000    0.001    0.000 {method 'lower' of 'str' objects}
      100    0.001    0.000    0.002    0.000 copy.py:66(copy)
     1602    0.001    0.000    0.001    0.000 Sheet.py:120(get_cell)
     2100    0.001    0.000    0.001    0.000 load_grammar.py:809(<lambda>)
        5    0.001    0.000    0.003    0.001 earley_forest.py:283(visit)
     3500    0.001    0.000    0.001    0.000 load_grammar.py:431(expansion)
     3332    0.001    0.000    0.001    0.000 {method 'get' of 'dict' objects}
     3000    0.001    0.000    0.001    0.000 load_grammar.py:663(value)
     2000    0.001    0.000    0.001    0.000 lexer.py:84(min_width)
      100    0.001    0.000    0.006    0.000 load_grammar.py:375(maybe)
      300    0.001    0.000    0.002    0.000 Workbook.py:778(get_cell_contents)
     2509    0.001    0.000    0.001    0.000 tree_matcher.py:44(<lambda>)
      500    0.001    0.000    0.001    0.000 load_grammar.py:640(<setcomp>)
      400    0.001    0.000    0.002    0.000 grammar.py:124(__eq__)
      100    0.001    0.000    0.001    0.000 load_grammar.py:642(expr)
      600    0.001    0.000    0.001    0.000 Sheet.py:124(update_extent)
      402    0.001    0.000    0.002    0.000 Workbook.py:582(recompute_cell_value)
      900    0.001    0.000    0.001    0.000 load_grammar.py:210(_args_as_int)
      804    0.001    0.000    0.001    0.000 Graph.py:137(get_parents_from_cell)
      402    0.001    0.000    0.001    0.000 Workbook.py:575(get_cell_from_location)
      600    0.001    0.000    0.001    0.000 Workbook.py:714(clean_children_cells)
      500    0.001    0.000    0.001    0.000 load_grammar.py:613(_make_joined_pattern)
      814    0.001    0.000    0.001    0.000 utils.py:345(add)
      100    0.000    0.000    0.000    0.000 load_grammar.py:235(_name_rule)
     2300    0.000    0.000    0.000    0.000 {built-in method builtins.next}
     1111    0.000    0.000    0.000    0.000 tree.py:32(__init__)
      100    0.000    0.000    0.000    0.000 reconstruct.py:83(<dictcomp>)
      100    0.000    0.000    0.001    0.000 copy.py:258(_reconstruct)
      200    0.000    0.000    0.001    0.000 visitors.py:163(__mul__)
      200    0.000    0.000    0.001    0.000 visitors.py:263(__mul__)
      202    0.000    0.000    0.001    0.000 grammar_analysis.py:187(_expand_rule)
      100    0.000    0.000    0.000    0.000 {method '__reduce_ex__' of 'object' objects}
     1606    0.000    0.000    0.000    0.000 {method 'upper' of 'str' objects}
      800    0.000    0.000    0.000    0.000 load_grammar.py:434(alias)
      100    0.000    0.000    0.003    0.000 load_grammar.py:443(__init__)
      102    0.000    0.000    0.009    0.000 tree_matcher.py:42(_best_rules_from_group)
      747    0.000    0.000    0.000    0.000 earley_common.py:28(__eq__)
     2709    0.000    0.000    0.000    0.000 tree_matcher.py:43(<lambda>)
      100    0.000    0.000    0.001    0.000 load_grammar.py:240(_add_rule)
      100    0.000    0.000    0.001    0.000 load_grammar.py:763(<listcomp>)
      100    0.000    0.000    0.000    0.000 load_grammar.py:445(<setcomp>)
      649    0.000    0.000    0.000    0.000 grammar_analysis.py:70(update_set)
     1804    0.000    0.000    0.000    0.000 {built-in method builtins.ord}
      100    0.000    0.000    0.001    0.000 load_grammar.py:516(__init__)
      200    0.000    0.000    0.014    0.000 utils.py:269(classify_bool)
       87    0.000    0.000    0.001    0.000 earley_forest.py:50(__init__)
      200    0.000    0.000    0.000    0.000 load_grammar.py:201(_will_not_get_removed)
      100    0.000    0.000    0.000    0.000 load_grammar.py:743(<setcomp>)
      200    0.000    0.000    0.001    0.000 {built-in method builtins.sum}
       12    0.000    0.000    0.001    0.000 xearley.py:41(scan)
      702    0.000    0.000    0.000    0.000 {built-in method builtins.divmod}
       46    0.000    0.000    0.001    0.000 earley.py:135(<listcomp>)
      702    0.000    0.000    0.000    0.000 {built-in method builtins.chr}
      200    0.000    0.000    0.001    0.000 load_grammar.py:219(expansion)
     1178    0.000    0.000    0.000    0.000 earley_common.py:31(__hash__)
      341    0.000    0.000    0.000    0.000 utils.py:342(__contains__)
      125    0.000    0.000    0.001    0.000 utils.py:275(bfs)
      300    0.000    0.000    0.000    0.000 Sheet.py:99(get_cell_contents)
     1100    0.000    0.000    0.000    0.000 load_grammar.py:428(expansions)
      400    0.000    0.000    0.000    0.000 visitors.py:255(__init__)
       80    0.000    0.000    0.001    0.000 earley_forest.py:437(_visit_node_out_helper)
      202    0.000    0.000    0.000    0.000 lark.py:220(__getattr__)
      200    0.000    0.000    0.001    0.000 load_grammar.py:222(expansions)
      200    0.000    0.000    0.000    0.000 {built-in method builtins.min}
      100    0.000    0.000    0.000    0.000 load_grammar.py:797(<setcomp>)
       40    0.000    0.000    0.000    0.000 earley_forest.py:603(transform_packed_node)
      604    0.000    0.000    0.000    0.000 utils.py:212(is_formula)
      346    0.000    0.000    0.000    0.000 grammar_analysis.py:17(__init__)
        5    0.000    0.000    0.012    0.002 earley.py:262(parse)
      100    0.000    0.000    0.000    0.000 load_grammar.py:228(__init__)
      100    0.000    0.000    0.000    0.000 load_grammar.py:498(__init__)
       80    0.000    0.000    0.000    0.000 {built-in method builtins.sorted}
       40    0.000    0.000    0.001    0.000 earley_forest.py:638(visit_packed_node_out)
        4    0.000    0.000    0.000    0.000 utils.py:23(classify)
      100    0.000    0.000    0.000    0.000 lexer.py:98(to_regexp)
      235    0.000    0.000    0.000    0.000 {built-in method fromkeys}
      235    0.000    0.000    0.000    0.000 utils.py:339(__init__)
      100    0.000    0.000    0.000    0.000 copyreg.py:90(__newobj__)
      346    0.000    0.000    0.000    0.000 grammar_analysis.py:45(__hash__)
      100    0.000    0.000    0.000    0.000 reconstruct.py:29(__init__)
        2    0.000    0.000    0.006    0.003 earley.py:32(__init__)
       89    0.000    0.000    0.000    0.000 earley_forest.py:64(add_family)
       89    0.000    0.000    0.000    0.000 earley_forest.py:131(__init__)
      100    0.000    0.000    0.000    0.000 load_grammar.py:198(__init__)
        2    0.000    0.000    0.004    0.002 grammar_analysis.py:141(__init__)
       25    0.000    0.000    0.002    0.000 grammar_analysis.py:180(expand_rule)
       80    0.000    0.000    0.000    0.000 earley_forest.py:85(children)
        5    0.000    0.000    0.000    0.000 earley.py:188(scan)
       89    0.000    0.000    0.000    0.000 earley_common.py:25(advance)
       32    0.000    0.000    0.000    0.000 earley_forest.py:581(transform_symbol_node)
      235    0.000    0.000    0.000    0.000 utils.py:348(__iter__)
       40    0.000    0.000    0.000    0.000 earley_forest.py:631(visit_packed_node_in)
      342    0.000    0.000    0.000    0.000 grammar_analysis.py:28(next)
      127    0.000    0.000    0.000    0.000 {method 'setdefault' of 'dict' objects}
        3    0.000    0.000    0.008    0.003 tree_matcher.py:148(match_tree)
       32    0.000    0.000    0.000    0.000 earley_forest.py:565(_call_rule_func)
       40    0.000    0.000    0.000    0.000 earley_forest.py:422(visit_symbol_node_in)
      409    0.000    0.000    0.000    0.000 {method 'append' of 'collections.deque' objects}
       32    0.000    0.000    0.000    0.000 earley_forest.py:556(_collapse_ambig)
      106    0.000    0.000    0.000    0.000 {method 'items' of 'dict' objects}
        2    0.000    0.000    0.007    0.004 xearley.py:39(_parse)
       10    0.000    0.000    0.000    0.000 reconstruct.py:33(__default__)
       40    0.000    0.000    0.000    0.000 earley_forest.py:625(visit_symbol_node_in)
        8    0.000    0.000    0.000    0.000 Cell.py:81(set_cell_value)
       40    0.000    0.000    0.000    0.000 earley_forest.py:427(visit_packed_node_in)
       20    0.000    0.000    0.000    0.000 parse_tree_builder.py:20(__call__)
       92    0.000    0.000    0.000    0.000 parser_frontends.py:184(match)
      362    0.000    0.000    0.000    0.000 {method 'pop' of 'collections.deque' objects}
      132    0.000    0.000    0.000    0.000 {built-in method builtins.hasattr}
      100    0.000    0.000    0.000    0.000 {method 'reverse' of 'list' objects}
       80    0.000    0.000    0.000    0.000 earley_forest.py:145(sort_key)
        3    0.000    0.000    0.001    0.000 earley.py:171(_parse)
       40    0.000    0.000    0.000    0.000 earley_forest.py:499(__init__)
       32    0.000    0.000    0.000    0.000 tree_matcher.py:48(_match)
       10    0.000    0.000    0.000    0.000 Parser.py:253(cell)
       21    0.000    0.000    0.000    0.000 earley.py:58(<listcomp>)
        2    0.000    0.000    0.010    0.005 parser_frontends.py:100(parse)
        5    0.000    0.000    0.006    0.001 Workbook.py:544(get_formula_value)
       40    0.000    0.000    0.000    0.000 earley_forest.py:155(children)
      106    0.000    0.000    0.000    0.000 {method 'values' of 'dict' objects}
      100    0.000    0.000    0.000    0.000 {built-in method builtins.issubclass}
       32    0.000    0.000    0.000    0.000 earley_forest.py:571(_call_ambig_func)
       40    0.000    0.000    0.001    0.000 earley_forest.py:450(visit_packed_node_out)
       18    0.000    0.000    0.000    0.000 lexer.py:213(_future_new)
      120    0.000    0.000    0.000    0.000 {method 'remove' of 'set' objects}
       40    0.000    0.000    0.000    0.000 earley_forest.py:70(load_paths)
        2    0.000    0.000    0.000    0.000 {built-in method builtins.print}
       22    0.000    0.000    0.000    0.000 tree_matcher.py:65(parse_rulename)
        8    0.000    0.000    0.000    0.000 earley_forest.py:447(visit_intermediate_node_out)
      8/4    0.000    0.000    0.008    0.002 reconstruct.py:85(_reconstruct)
       32    0.000    0.000    0.000    0.000 earley_forest.py:444(visit_symbol_node_out)
        5    0.000    0.000    0.000    0.000 Parser.py:211(mul_expr)
       80    0.000    0.000    0.000    0.000 utils.py:357(__len__)
        2    0.000    0.000    0.000    0.000 grammar_analysis.py:82(<setcomp>)
     15/5    0.000    0.000    0.000    0.000 visitors.py:421(_visit_tree)
        8    0.000    0.000    0.000    0.000 tree_matcher.py:21(__call__)
     15/5    0.000    0.000    0.000    0.000 visitors.py:444(inner)
       80    0.000    0.000    0.000    0.000 earley_forest.py:141(is_empty)
       10    0.000    0.000    0.000    0.000 Workbook.py:806(get_cell_value)
       17    0.000    0.000    0.000    0.000 earley_forest.py:193(__init__)
        2    0.000    0.000    0.000    0.000 earley.py:52(<setcomp>)
        5    0.000    0.000    0.000    0.000 Parser.py:97(__init__)
       15    0.000    0.000    0.000    0.000 Parser.py:40(fix_formula)
       13    0.000    0.000    0.000    0.000 earley_forest.py:432(visit_token_node)
        5    0.000    0.000    0.003    0.001 earley_forest.py:535(visit)
        8    0.000    0.000    0.000    0.000 earley_forest.py:591(transform_intermediate_node)
       18    0.000    0.000    0.000    0.000 lexer.py:202(__new__)
        5    0.000    0.000    0.000    0.000 earley_forest.py:523(__init__)
        6    0.000    0.000    0.000    0.000 utils.py:207(remove_exponent)
        2    0.000    0.000    0.000    0.000 tree_matcher.py:178(<dictcomp>)
       25    0.000    0.000    0.000    0.000 typing.py:255(inner)
     15/5    0.000    0.000    0.000    0.000 visitors.py:430(<listcomp>)
       80    0.000    0.000    0.000    0.000 earley_forest.py:548(_check_cycle)
       40    0.000    0.000    0.000    0.000 earley_forest.py:158(<listcomp>)
        6    0.000    0.000    0.000    0.000 Workbook.py:687(_get_sheet_name_location)
        2    0.000    0.000    0.000    0.000 earley.py:53(<setcomp>)
       25    0.000    0.000    0.000    0.000 typing.py:720(__hash__)
       11    0.000    0.000    0.000    0.000 Workbook.py:540(get_sheet_name_from_hidden)
        2    0.000    0.000    0.000    0.000 parser_frontends.py:96(_make_lexer_thread)
       82    0.000    0.000    0.000    0.000 earley_forest.py:101(__hash__)
        9    0.000    0.000    0.000    0.000 Cell.py:65(set_contents)
     15/5    0.000    0.000    0.000    0.000 visitors.py:429(visit_children)
        5    0.000    0.000    0.003    0.001 earley_forest.py:397(transform)
        6    0.000    0.000    0.000    0.000 Sheet.py:111(_shrink_sheet)
       89    0.000    0.000    0.000    0.000 earley_forest.py:169(__hash__)
        5    0.000    0.000    0.000    0.000 earley.py:284(<listcomp>)
      100    0.000    0.000    0.000    0.000 {method 'popleft' of 'collections.deque' objects}
       10    0.000    0.000    0.000    0.000 re.py:203(sub)
        5    0.000    0.000    0.000    0.000 earley_forest.py:390(__init__)
        3    0.000    0.000    0.000    0.000 Cell.py:46(__init__)
       10    0.000    0.000    0.000    0.000 {method 'sub' of 're.Pattern' objects}
        9    0.000    0.000    0.000    0.000 Cell.py:62(get_cached_formula)
        5    0.000    0.000    0.000    0.000 Sheet.py:104(set_cell_value)
        2    0.000    0.000    0.000    0.000 Parser.py:389(CELLREF_NO_ABS)
       15    0.000    0.000    0.000    0.000 utils.py:295(get_highest_precedence_error)
        3    0.000    0.000    0.000    0.000 earley.py:245(<setcomp>)
       61    0.000    0.000    0.000    0.000 grammar_analysis.py:149(<lambda>)
       17    0.000    0.000    0.000    0.000 utils.py:354(__bool__)
        2    0.000    0.000    0.010    0.005 lark.py:640(parse)
       61    0.000    0.000    0.000    0.000 grammar_analysis.py:172(<lambda>)
        2    0.000    0.000    0.000    0.000 grammar_analysis.py:175(<dictcomp>)
        1    0.000    0.000    0.008    0.008 reconstruct.py:96(reconstruct)
        4    0.000    0.000    0.000    0.000 {built-in method _codecs.charmap_encode}
        4    0.000    0.000    0.000    0.000 cp1252.py:18(encode)
        2    0.000    0.000    0.000    0.000 Parser.py:382(cell)
        8    0.000    0.000    0.000    0.000 reconstruct.py:15(is_iter_empty)
        2    0.000    0.000    0.000    0.000 grammar_analysis.py:145(<dictcomp>)
        2    0.000    0.000    0.000    0.000 grammar_analysis.py:60(__init__)
        4    0.000    0.000    0.000    0.000 Graph.py:96(update_child)
       23    0.000    0.000    0.000    0.000 Cell.py:125(get_value)
       12    0.000    0.000    0.000    0.000 {method 'group' of 're.Match' objects}
        6    0.000    0.000    0.000    0.000 {method 'to_integral' of 'decimal.Decimal' objects}
        2    0.000    0.000    0.000    0.000 parse_tree_builder.py:145(__call__)
       16    0.000    0.000    0.000    0.000 {method 'remove' of 'list' objects}
       22    0.000    0.000    0.000    0.000 {method 'groups' of 're.Match' objects}
        1    0.000    0.000    0.000    0.000 Workbook.py:700(add_children_cells)
        1    0.000    0.000    0.000    0.000 utils.py:307(error_matcher)
        2    0.000    0.000    0.000    0.000 grammar_analysis.py:166(<dictcomp>)
        2    0.000    0.000    0.000    0.000 grammar_analysis.py:163(<dictcomp>)
        5    0.000    0.000    0.000    0.000 visitors.py:415(visit)
        6    0.000    0.000    0.000    0.000 {method 'split' of 'str' objects}
        2    0.000    0.000    0.000    0.000 parser_frontends.py:86(_verify_start)
        2    0.000    0.000    0.000    0.000 Graph.py:68(add_connection)
       18    0.000    0.000    0.000    0.000 {method 'strip' of 'str' objects}
        2    0.000    0.000    0.000    0.000 grammar_analysis.py:160(<dictcomp>)
       12    0.000    0.000    0.000    0.000 {built-in method _heapq.heapify}
       17    0.000    0.000    0.000    0.000 earley_forest.py:207(__hash__)
        1    0.000    0.000    0.000    0.000 cProfile.py:134(__exit__)
        2    0.000    0.000    0.000    0.000 common.py:83(__init__)
       13    0.000    0.000    0.000    0.000 Cell.py:128(get_contents)
        5    0.000    0.000    0.000    0.000 earley_forest.py:232(__init__)
       12    0.000    0.000    0.000    0.000 {method 'end' of 're.Match' objects}
       11    0.000    0.000    0.000    0.000 Sheet.py:54(get_sheet_name)
        6    0.000    0.000    0.000    0.000 {method 'lstrip' of 'str' objects}
        2    0.000    0.000    0.000    0.000 {method 'normalize' of 'decimal.Decimal' objects}
        6    0.000    0.000    0.000    0.000 {built-in method _heapq.heappush}
        4    0.000    0.000    0.000    0.000 {method 'quantize' of 'decimal.Decimal' objects}
       13    0.000    0.000    0.000    0.000 earley_forest.py:418(transform_token_node)
       10    0.000    0.000    0.000    0.000 Cell.py:135(get_children)
        5    0.000    0.000    0.000    0.000 {method 'clear' of 'set' objects}
        5    0.000    0.000    0.000    0.000 earley.py:254(<setcomp>)
        5    0.000    0.000    0.000    0.000 Parser.py:108(get_cell_refs)
        5    0.000    0.000    0.000    0.000 Cell.py:131(set_children)
        3    0.000    0.000    0.000    0.000 tree_matcher.py:74(__init__)
        6    0.000    0.000    0.000    0.000 {method 'rstrip' of 'str' objects}
        6    0.000    0.000    0.000    0.000 {method 'is_finite' of 'decimal.Decimal' objects}
        3    0.000    0.000    0.000    0.000 tree_matcher.py:77(lex)
        4    0.000    0.000    0.000    0.000 codecs.py:276(reset)
        1    0.000    0.000    0.000    0.000 Parser.py:378(__init__)
        1    0.000    0.000    0.000    0.000 Cell.py:59(cache_formula)
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}



##################Running pro_move_cells2... #######################
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
for test <function pro_move_cells2 at 0x0000017F1670A820> total time: 7.8093941000000076
Total Logs
         1426940 function calls (1421372 primitive calls) in 0.775 seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
      990    0.130    0.000    0.473    0.000 earley.py:78(predict_and_complete)
    73557    0.079    0.000    0.118    0.000 earley_common.py:9(__init__)
180190/175414    0.039    0.000    0.050    0.000 {built-in method builtins.hash}
      297    0.038    0.000    0.135    0.000 earley_forest.py:283(visit)
    54252    0.032    0.000    0.050    0.000 utils.py:345(add)
    45785    0.030    0.000    0.055    0.000 grammar.py:18(__eq__)
    97160    0.024    0.000    0.035    0.000 grammar.py:25(__hash__)
    12348    0.022    0.000    0.025    0.000 typing.py:868(__new__)
    61974    0.020    0.000    0.020    0.000 earley_common.py:28(__eq__)
    42360    0.017    0.000    0.022    0.000 lexer.py:265(__eq__)
    28512    0.016    0.000    0.028    0.000 utils.py:342(__contains__)
   122029    0.015    0.000    0.015    0.000 {built-in method builtins.isinstance}
     2079    0.014    0.000    0.053    0.000 earley.py:135(<listcomp>)
     4059    0.014    0.000    0.042    0.000 earley_forest.py:50(__init__)
      594    0.011    0.000    0.036    0.000 xearley.py:41(scan)
    82269    0.009    0.000    0.009    0.000 earley_common.py:31(__hash__)
    79281    0.009    0.000    0.009    0.000 grammar.py:121(__hash__)
    84259    0.009    0.000    0.009    0.000 {method 'append' of 'list' objects}
     3960    0.008    0.000    0.036    0.000 earley_forest.py:437(_visit_node_out_helper)
    92756    0.008    0.000    0.008    0.000 {built-in method builtins.len}
     2079    0.007    0.000    0.016    0.000 earley_forest.py:603(transform_packed_node)
    32884    0.007    0.000    0.007    0.000 {built-in method builtins.next}
     3762    0.006    0.000    0.013    0.000 {built-in method builtins.sorted}
    45249    0.005    0.000    0.005    0.000 {built-in method builtins.id}
    10791    0.005    0.000    0.011    0.000 utils.py:339(__init__)
     4257    0.005    0.000    0.016    0.000 earley_forest.py:64(add_family)
      297    0.005    0.000    0.672    0.002 earley.py:262(parse)
    10791    0.005    0.000    0.006    0.000 {built-in method fromkeys}
     4257    0.004    0.000    0.007    0.000 earley_forest.py:131(__init__)
    10593    0.004    0.000    0.006    0.000 utils.py:348(__iter__)
    10444    0.004    0.000    0.004    0.000 {method 'add' of 'set' objects}
     4257    0.004    0.000    0.015    0.000 earley_common.py:25(advance)
     2079    0.004    0.000    0.010    0.000 earley_forest.py:631(visit_packed_node_in)
     4756    0.003    0.000    0.003    0.000 {method 'match' of 're.Pattern' objects}
     1683    0.003    0.000    0.009    0.000 earley_forest.py:581(transform_symbol_node)
     3762    0.003    0.000    0.019    0.000 earley_forest.py:85(children)
    13240    0.003    0.000    0.003    0.000 {built-in method __new__ of type object at 0x00007FFB2480DCB0}
      396    0.003    0.000    0.367    0.001 Workbook.py:727(set_cell_contents)
1206/1202    0.003    0.000    0.017    0.000 visitors.py:111(_call_userfunc)
     2079    0.003    0.000    0.026    0.000 earley_forest.py:638(visit_packed_node_out)
      396    0.003    0.000    0.346    0.001 Workbook.py:638(recompute_cell_and_parents)
5339/4898    0.003    0.000    0.004    0.000 {built-in method builtins.getattr}
     2079    0.003    0.000    0.006    0.000 earley_forest.py:427(visit_packed_node_in)
      219    0.003    0.000    0.004    0.000 tree.py:137(iter_subtrees)
      198    0.003    0.000    0.504    0.003 xearley.py:39(_parse)
     1881    0.003    0.000    0.015    0.000 earley_forest.py:422(visit_symbol_node_in)
      396    0.003    0.000    0.003    0.000 {built-in method _heapq.heapify}
     5940    0.003    0.000    0.004    0.000 {method 'setdefault' of 'dict' objects}
     1881    0.003    0.000    0.024    0.000 earley_forest.py:625(visit_symbol_node_in)
    14495    0.003    0.000    0.003    0.000 {built-in method builtins.iter}
      498    0.002    0.000    0.004    0.000 utils.py:179(convert_location_to_idx)
        1    0.002    0.002    0.775    0.775 Workbook.py:282(transfer_cells)
     1683    0.002    0.000    0.005    0.000 earley_forest.py:565(_call_rule_func)
        1    0.002    0.002    0.005    0.005 grammar_analysis.py:78(calculate_sets)
     4158    0.002    0.000    0.003    0.000 earley_forest.py:145(sort_key)
    18216    0.002    0.000    0.002    0.000 {method 'pop' of 'collections.deque' objects}
     1683    0.002    0.000    0.004    0.000 earley_forest.py:556(_collapse_ambig)
       40    0.002    0.000    0.006    0.000 visitors.py:293(transform)
     1386    0.002    0.000    0.003    0.000 Sheet.py:93(get_cell_value)
      396    0.002    0.000    0.011    0.000 Sheet.py:60(set_cell_contents)
      164    0.002    0.000    0.020    0.000 visitors.py:278(transform)
     3762    0.002    0.000    0.004    0.000 parser_frontends.py:184(match)
2038/1900    0.002    0.000    0.016    0.000 visitors.py:143(_transform_children)
    17164    0.002    0.000    0.002    0.000 {method 'append' of 'collections.deque' objects}
      198    0.002    0.000    0.643    0.003 parser_frontends.py:100(parse)
     1881    0.002    0.000    0.002    0.000 earley_forest.py:499(__init__)
     2079    0.002    0.000    0.002    0.000 earley_forest.py:155(children)
       99    0.001    0.000    0.006    0.000 earley.py:188(scan)
      396    0.001    0.000    0.002    0.000 Cell.py:81(set_cell_value)
      496    0.001    0.000    0.002    0.000 utils.py:194(convert_idx_to_location)
      198    0.001    0.000    0.334    0.002 Workbook.py:544(get_formula_value)
      725    0.001    0.000    0.003    0.000 visitors.py:171(__default__)
     2079    0.001    0.000    0.023    0.000 earley_forest.py:450(visit_packed_node_out)
     4759    0.001    0.000    0.001    0.000 {method 'lower' of 'str' objects}
     5841    0.001    0.000    0.001    0.000 {method 'remove' of 'set' objects}
     1881    0.001    0.000    0.003    0.000 earley_forest.py:70(load_paths)
      891    0.001    0.000    0.002    0.000 lexer.py:213(_future_new)
     1192    0.001    0.000    0.002    0.000 re.py:289(_compile)
     1685    0.001    0.000    0.002    0.000 utils.py:78(get_hidden_name)
     3762    0.001    0.000    0.002    0.000 utils.py:357(__len__)
      297    0.001    0.000    0.004    0.000 earley.py:284(<listcomp>)
       41    0.001    0.000    0.002    0.000 ast.py:51(literal_eval)
      994    0.001    0.000    0.004    0.000 re.py:188(match)
     4158    0.001    0.000    0.001    0.000 earley_forest.py:141(is_empty)
     1298    0.001    0.000    0.001    0.000 {method 'join' of 'str' objects}
      198    0.001    0.000    0.002    0.000 {built-in method builtins.print}
      954    0.001    0.000    0.001    0.000 tree.py:147(<listcomp>)
      198    0.001    0.000    0.004    0.000 Parser.py:253(cell)
      396    0.001    0.000    0.001    0.000 Graph.py:330(tarjans)
      895    0.001    0.000    0.004    0.000 utils.py:131(check_valid_cell_location)
     1683    0.001    0.000    0.015    0.000 earley_forest.py:444(visit_symbol_node_out)
      100    0.001    0.000    0.008    0.000 Workbook.py:582(recompute_cell_value)
      495    0.001    0.000    0.001    0.000 {method 'remove' of 'list' objects}
     1219    0.001    0.000    0.001    0.000 tree.py:61(__init__)
      891    0.001    0.000    0.003    0.000 lexer.py:202(__new__)
      594    0.001    0.000    0.002    0.000 tree_matcher.py:48(_match)
     2973    0.001    0.000    0.001    0.000 {method 'get' of 'dict' objects}
       99    0.001    0.000    0.016    0.000 earley.py:171(_parse)
       41    0.001    0.000    0.004    0.000 load_grammar.py:566(_literal_to_pattern)
     4743    0.001    0.000    0.001    0.000 {method 'pop' of 'list' objects}
      297    0.001    0.000    0.002    0.000 earley_forest.py:523(__init__)
      297    0.001    0.000    0.135    0.000 earley_forest.py:535(visit)
     1683    0.001    0.000    0.001    0.000 earley_forest.py:571(_call_ambig_func)
      396    0.001    0.000    0.002    0.000 Workbook.py:714(clean_children_cells)
     2079    0.001    0.000    0.001    0.000 earley_forest.py:158(<listcomp>)
     3960    0.001    0.000    0.001    0.000 earley_forest.py:548(_check_cycle)
      396    0.001    0.000    0.368    0.001 Workbook.py:35(run_func)
     3762    0.001    0.000    0.001    0.000 earley_forest.py:101(__hash__)
      198    0.001    0.000    0.004    0.000 Sheet.py:111(_shrink_sheet)
      495    0.001    0.000    0.001    0.000 Workbook.py:540(get_sheet_name_from_hidden)
      198    0.001    0.000    0.003    0.000 Workbook.py:778(get_cell_contents)
     4257    0.001    0.000    0.001    0.000 earley_forest.py:169(__hash__)
      297    0.001    0.000    0.136    0.000 earley_forest.py:397(transform)
      495    0.001    0.000    0.001    0.000 earley_forest.py:432(visit_token_node)
      198    0.001    0.000    0.001    0.000 parser_frontends.py:96(_make_lexer_thread)
      198    0.001    0.000    0.001    0.000 Workbook.py:687(_get_sheet_name_location)
       99    0.001    0.000    0.041    0.000 tree_matcher.py:148(match_tree)
       41    0.001    0.000    0.001    0.000 {built-in method builtins.compile}
      396    0.001    0.000    0.001    0.000 Sheet.py:124(update_extent)
      690    0.001    0.000    0.013    0.000 visitors.py:275(_transform_tree)
        1    0.001    0.001    0.029    0.029 load_grammar.py:690(compile)
     1386    0.001    0.000    0.001    0.000 parse_tree_builder.py:20(__call__)
      693    0.001    0.000    0.001    0.000 earley_forest.py:193(__init__)
      396    0.001    0.000    0.001    0.000 Cell.py:65(set_contents)
      198    0.001    0.000    0.002    0.000 Workbook.py:806(get_cell_value)
      198    0.001    0.000    0.001    0.000 Parser.py:97(__init__)
      297    0.001    0.000    0.001    0.000 earley_forest.py:390(__init__)
      892    0.001    0.000    0.001    0.000 Sheet.py:120(get_cell)
     1085    0.001    0.000    0.001    0.000 tree.py:66(meta)
      201    0.000    0.000    0.001    0.000 tree.py:179(expand_kids_by_data)
  157/111    0.000    0.000    0.005    0.000 visitors.py:155(_transform_tree)
      291    0.000    0.000    0.003    0.000 visitors.py:130(_call_userfunc_token)
      101    0.000    0.000    0.001    0.000 grammar_analysis.py:187(_expand_rule)
       99    0.000    0.000    0.001    0.000 reconstruct.py:33(__default__)
       99    0.000    0.000    0.001    0.000 Parser.py:382(cell)
      198    0.000    0.000    0.001    0.000 earley_forest.py:591(transform_intermediate_node)
       99    0.000    0.000    0.002    0.000 Parser.py:389(CELLREF_NO_ABS)
      198    0.000    0.000    0.003    0.000 Sheet.py:104(set_cell_value)
      198    0.000    0.000    0.006    0.000 visitors.py:421(_visit_tree)
       63    0.000    0.000    0.001    0.000 functools.py:34(update_wrapper)
      198    0.000    0.000    0.001    0.000 utils.py:207(remove_exponent)
     1684    0.000    0.000    0.000    0.000 {built-in method builtins.hasattr}
      198    0.000    0.000    0.005    0.000 visitors.py:444(inner)
       41    0.000    0.000    0.002    0.000 load_grammar.py:540(eval_escaping)
      382    0.000    0.000    0.000    0.000 grammar_analysis.py:70(update_set)
      198    0.000    0.000    0.000    0.000 Sheet.py:99(get_cell_contents)
      198    0.000    0.000    0.004    0.000 Parser.py:40(fix_formula)
      693    0.000    0.000    0.000    0.000 utils.py:354(__bool__)
      396    0.000    0.000    0.001    0.000 cp1252.py:18(encode)
       99    0.000    0.000    0.001    0.000 tree_matcher.py:21(__call__)
      198    0.000    0.000    0.644    0.003 lark.py:640(parse)
      198    0.000    0.000    0.000    0.000 parse_tree_builder.py:145(__call__)
      495    0.000    0.000    0.000    0.000 utils.py:212(is_formula)
     1093    0.000    0.000    0.000    0.000 {method 'upper' of 'str' objects}
      198    0.000    0.000    0.001    0.000 Cell.py:46(__init__)
      396    0.000    0.000    0.000    0.000 {built-in method _codecs.charmap_encode}
       28    0.000    0.000    0.001    0.000 tree_matcher.py:106(_build_recons_rules)
      742    0.000    0.000    0.000    0.000 grammar.py:42(__init__)
   105/45    0.000    0.000    0.002    0.000 load_grammar.py:389(expansion)
      198    0.000    0.000    0.001    0.000 re.py:203(sub)
      198    0.000    0.000    0.044    0.000 reconstruct.py:85(_reconstruct)
       99    0.000    0.000    0.044    0.000 reconstruct.py:96(reconstruct)
      594    0.000    0.000    0.000    0.000 {method 'group' of 're.Match' objects}
       63    0.000    0.000    0.002    0.000 utils.py:275(bfs)
      198    0.000    0.000    0.000    0.000 {method 'split' of 'str' objects}
       99    0.000    0.000    0.000    0.000 earley.py:245(<setcomp>)
   146/84    0.000    0.000    0.003    0.000 visitors.py:342(_call_userfunc)
      198    0.000    0.000    0.000    0.000 visitors.py:429(visit_children)
      891    0.000    0.000    0.000    0.000 Cell.py:125(get_value)
      198    0.000    0.000    0.000    0.000 {method 'sub' of 're.Pattern' objects}
      219    0.000    0.000    0.000    0.000 {built-in method _abc._abc_instancecheck}
       99    0.000    0.000    0.001    0.000 Workbook.py:700(add_children_cells)
       41    0.000    0.000    0.004    0.000 load_grammar.py:601(literal)
       99    0.000    0.000    0.000    0.000 Graph.py:96(update_child)
       63    0.000    0.000    0.001    0.000 visitors.py:481(__get__)
      198    0.000    0.000    0.007    0.000 visitors.py:415(visit)
      198    0.000    0.000    0.000    0.000 parser_frontends.py:86(_verify_start)
      396    0.000    0.000    0.000    0.000 {built-in method _heapq.heappush}
      200    0.000    0.000    0.000    0.000 lark.py:220(__getattr__)
      172    0.000    0.000    0.000    0.000 grammar_analysis.py:17(__init__)
       86    0.000    0.000    0.000    0.000 grammar.py:103(__init__)
      594    0.000    0.000    0.000    0.000 Cell.py:128(get_contents)
      155    0.000    0.000    0.001    0.000 load_grammar.py:384(_flatten)
      100    0.000    0.000    0.000    0.000 Workbook.py:575(get_cell_from_location)
    40/11    0.000    0.000    0.003    0.000 visitors.py:362(visit)
        2    0.000    0.000    0.000    0.000 utils.py:23(classify)
       13    0.000    0.000    0.002    0.000 grammar_analysis.py:180(expand_rule)
  139/129    0.000    0.000    0.000    0.000 tree.py:134(__hash__)
      496    0.000    0.000    0.000    0.000 {built-in method builtins.divmod}
      996    0.000    0.000    0.000    0.000 {built-in method builtins.ord}
       99    0.000    0.000    0.001    0.000 tree_matcher.py:65(parse_rulename)
      198    0.000    0.000    0.001    0.000 earley_forest.py:447(visit_intermediate_node_out)
      693    0.000    0.000    0.000    0.000 earley_forest.py:207(__hash__)
       35    0.000    0.000    0.001    0.000 load_grammar.py:420(expansions)
      198    0.000    0.000    0.000    0.000 visitors.py:430(<listcomp>)
      219    0.000    0.000    0.000    0.000 abc.py:96(__instancecheck__)
       99    0.000    0.000    0.000    0.000 Graph.py:68(add_connection)
       11    0.000    0.000    0.000    0.000 load_grammar.py:450(pattern)
        1    0.000    0.000    0.007    0.007 earley.py:32(__init__)
       63    0.000    0.000    0.001    0.000 visitors.py:470(__init__)
      198    0.000    0.000    0.000    0.000 utils.py:295(get_highest_precedence_error)
      693    0.000    0.000    0.000    0.000 {method 'strip' of 'str' objects}
      297    0.000    0.000    0.000    0.000 earley_forest.py:232(__init__)
      495    0.000    0.000    0.000    0.000 Sheet.py:54(get_sheet_name)
    15/13    0.000    0.000    0.001    0.000 load_grammar.py:405(<listcomp>)
      355    0.000    0.000    0.000    0.000 grammar.py:15(__init__)
      297    0.000    0.000    0.000    0.000 Cell.py:135(get_children)
      172    0.000    0.000    0.000    0.000 grammar_analysis.py:45(__hash__)
      496    0.000    0.000    0.000    0.000 {built-in method builtins.chr}
        1    0.000    0.000    0.031    0.031 tree_matcher.py:89(__init__)
       35    0.000    0.000    0.000    0.000 tree_matcher.py:121(<listcomp>)
       49    0.000    0.000    0.000    0.000 tree_matcher.py:57(make_recons_rule)
      198    0.000    0.000    0.000    0.000 {method 'to_integral' of 'decimal.Decimal' objects}
       25    0.000    0.000    0.017    0.001 visitors.py:258(transform)
      200    0.000    0.000    0.000    0.000 Graph.py:137(get_parents_from_cell)
      198    0.000    0.000    0.000    0.000 {method 'quantize' of 'decimal.Decimal' objects}
      594    0.000    0.000    0.000    0.000 {method 'end' of 're.Match' objects}
        1    0.000    0.000    0.005    0.005 grammar_analysis.py:141(__init__)
       63    0.000    0.000    0.005    0.000 visitors.py:500(_vargs_inline)
       63    0.000    0.000    0.005    0.000 visitors.py:478(__call__)
       47    0.000    0.000    0.000    0.000 lexer.py:41(__init__)
      315    0.000    0.000    0.000    0.000 {built-in method builtins.setattr}
       45    0.000    0.000    0.000    0.000 {built-in method builtins.max}
       25    0.000    0.000    0.004    0.000 load_grammar.py:674(nr_deepcopy_tree)
      297    0.000    0.000    0.000    0.000 Cell.py:62(get_cached_formula)
      123    0.000    0.000    0.000    0.000 load_grammar.py:537(<genexpr>)
      111    0.000    0.000    0.005    0.000 visitors.py:159(transform)
        2    0.000    0.000    0.000    0.000 tree_matcher.py:28(_best_from_group)
       99    0.000    0.000    0.000    0.000 reconstruct.py:15(is_iter_empty)
      396    0.000    0.000    0.000    0.000 {method 'lstrip' of 'str' objects}
       99    0.000    0.000    0.000    0.000 Parser.py:378(__init__)
      198    0.000    0.000    0.000    0.000 Cell.py:131(set_children)
      170    0.000    0.000    0.000    0.000 grammar_analysis.py:28(next)
      219    0.000    0.000    0.000    0.000 {method 'values' of 'collections.OrderedDict' objects}
       41    0.000    0.000    0.001    0.000 ast.py:30(parse)
        1    0.000    0.000    0.003    0.003 load_grammar.py:694(<listcomp>)
      495    0.000    0.000    0.000    0.000 earley_forest.py:418(transform_token_node)
       41    0.000    0.000    0.000    0.000 load_grammar.py:536(_rfind)
        1    0.000    0.000    0.000    0.000 load_grammar.py:793(<setcomp>)
      198    0.000    0.000    0.000    0.000 Parser.py:108(get_cell_refs)
       82    0.000    0.000    0.000    0.000 {method 'rfind' of 'str' objects}
      105    0.000    0.000    0.000    0.000 load_grammar.py:759(<genexpr>)
      168    0.000    0.000    0.000    0.000 tree_matcher.py:12(is_discarded_terminal)
      396    0.000    0.000    0.000    0.000 {method 'rstrip' of 'str' objects}
       99    0.000    0.000    0.000    0.000 {method 'groups' of 're.Match' objects}
       20    0.000    0.000    0.000    0.000 load_grammar.py:631(expansions)
       54    0.000    0.000    0.000    0.000 lexer.py:50(__hash__)
      113    0.000    0.000    0.000    0.000 {method 'replace' of 'str' objects}
      396    0.000    0.000    0.000    0.000 codecs.py:276(reset)
       53    0.000    0.000    0.000    0.000 grammar.py:69(__init__)
        1    0.000    0.000    0.775    0.775 Workbook.py:369(move_cells)
       15    0.000    0.000    0.000    0.000 utils.py:190(<listcomp>)
        1    0.000    0.000    0.008    0.008 load_grammar.py:710(<listcomp>)
       35    0.000    0.000    0.000    0.000 load_grammar.py:798(<lambda>)
       65    0.000    0.000    0.000    0.000 {method 'update' of 'dict' objects}
      198    0.000    0.000    0.000    0.000 {method 'is_finite' of 'decimal.Decimal' objects}
        7    0.000    0.000    0.000    0.000 {method 'sort' of 'list' objects}
      110    0.000    0.000    0.000    0.000 tree.py:32(__init__)
       11    0.000    0.000    0.000    0.000 earley.py:58(<listcomp>)
       41    0.000    0.000    0.000    0.000 {built-in method builtins.all}
       10    0.000    0.000    0.000    0.000 load_grammar.py:346(expr)
       20    0.000    0.000    0.000    0.000 load_grammar.py:637(<lambda>)
       99    0.000    0.000    0.000    0.000 {method 'clear' of 'set' objects}
        1    0.000    0.000    0.000    0.000 load_grammar.py:806(<setcomp>)
      192    0.000    0.000    0.000    0.000 visitors.py:178(__default_token__)
       99    0.000    0.000    0.000    0.000 tree_matcher.py:74(__init__)
       99    0.000    0.000    0.000    0.000 Cell.py:59(cache_formula)
       20    0.000    0.000    0.000    0.000 lexer.py:81(to_regexp)
       41    0.000    0.000    0.000    0.000 ast.py:76(_convert)
       46    0.000    0.000    0.000    0.000 load_grammar.py:668(value)
      116    0.000    0.000    0.000    0.000 tree.py:175(<lambda>)
       21    0.000    0.000    0.000    0.000 lexer.py:125(__init__)
        2    0.000    0.000    0.000    0.000 utils.py:271(<listcomp>)
       35    0.000    0.000    0.000    0.000 load_grammar.py:621(expansion)
       49    0.000    0.000    0.000    0.000 tree_matcher.py:17(__init__)
        1    0.000    0.000    0.000    0.000 tree_matcher.py:115(<setcomp>)
       20    0.000    0.000    0.000    0.000 {method 'translate' of 'str' objects}
       15    0.000    0.000    0.000    0.000 tree.py:169(find_pred)
       99    0.000    0.000    0.000    0.000 earley.py:254(<setcomp>)
        1    0.000    0.000    0.000    0.000 grammar_analysis.py:82(<setcomp>)
       14    0.000    0.000    0.000    0.000 tree_matcher.py:61(make_recons_rule_to_term)
       20    0.000    0.000    0.000    0.000 re.py:270(escape)
       50    0.000    0.000    0.000    0.000 {method 'startswith' of 'str' objects}
        1    0.000    0.000    0.000    0.000 tree_matcher.py:108(<setcomp>)
       99    0.000    0.000    0.000    0.000 tree_matcher.py:77(lex)
        1    0.000    0.000    0.000    0.000 earley.py:52(<setcomp>)
       35    0.000    0.000    0.000    0.000 grammar.py:22(__ne__)
        1    0.000    0.000    0.000    0.000 tree_matcher.py:178(<dictcomp>)
       15    0.000    0.000    0.000    0.000 utils.py:184(dedup_list)
       25    0.000    0.000    0.000    0.000 load_grammar.py:639(<genexpr>)
        1    0.000    0.000    0.002    0.002 load_grammar.py:693(<listcomp>)
       13    0.000    0.000    0.000    0.000 typing.py:255(inner)
       21    0.000    0.000    0.000    0.000 lexer.py:70(_get_flags)
       30    0.000    0.000    0.000    0.000 visitors.py:108(__init__)
        4    0.000    0.000    0.000    0.000 grammar.py:124(__eq__)
       33    0.000    0.000    0.000    0.000 tree_matcher.py:44(<lambda>)
       15    0.000    0.000    0.000    0.000 lexer.py:53(__eq__)
        1    0.000    0.000    0.000    0.000 earley.py:53(<setcomp>)
       49    0.000    0.000    0.000    0.000 load_grammar.py:572(<genexpr>)
        2    0.000    0.000    0.000    0.000 visitors.py:163(__mul__)
        1    0.000    0.000    0.000    0.000 tree_matcher.py:116(<setcomp>)
       65    0.000    0.000    0.000    0.000 typing.py:1149(cast)
       13    0.000    0.000    0.000    0.000 typing.py:720(__hash__)
        1    0.000    0.000    0.000    0.000 copy.py:66(copy)
       15    0.000    0.000    0.001    0.000 tree.py:173(find_data)
        1    0.000    0.000    0.000    0.000 load_grammar.py:246(_add_recurse_rule)
       50    0.000    0.000    0.000    0.000 {method 'popleft' of 'collections.deque' objects}
        1    0.000    0.000    0.000    0.000 load_grammar.py:446(<dictcomp>)
        1    0.000    0.000    0.031    0.031 reconstruct.py:80(__init__)
       35    0.000    0.000    0.000    0.000 {built-in method builtins.any}
       34    0.000    0.000    0.000    0.000 grammar_analysis.py:149(<lambda>)
       20    0.000    0.000    0.000    0.000 lexer.py:88(max_width)
        6    0.000    0.000    0.000    0.000 load_grammar.py:411(alias)
       21    0.000    0.000    0.000    0.000 load_grammar.py:809(<lambda>)
       20    0.000    0.000    0.000    0.000 lexer.py:84(min_width)
        1    0.000    0.000    0.000    0.000 grammar_analysis.py:145(<dictcomp>)
       30    0.000    0.000    0.000    0.000 load_grammar.py:617(pattern)
       30    0.000    0.000    0.000    0.000 load_grammar.py:663(value)
       35    0.000    0.000    0.000    0.000 load_grammar.py:431(expansion)
        1    0.000    0.000    0.000    0.000 common.py:83(__init__)
        1    0.000    0.000    0.000    0.000 load_grammar.py:642(expr)
        2    0.000    0.000    0.000    0.000 tree_matcher.py:42(_best_rules_from_group)
        5    0.000    0.000    0.000    0.000 load_grammar.py:640(<setcomp>)
       34    0.000    0.000    0.000    0.000 grammar_analysis.py:172(<lambda>)
        1    0.000    0.000    0.000    0.000 load_grammar.py:375(maybe)
        5    0.000    0.000    0.000    0.000 load_grammar.py:613(_make_joined_pattern)
       35    0.000    0.000    0.000    0.000 tree_matcher.py:43(<lambda>)
        1    0.000    0.000    0.000    0.000 copy.py:258(_reconstruct)
        9    0.000    0.000    0.000    0.000 load_grammar.py:210(_args_as_int)
        1    0.000    0.000    0.000    0.000 load_grammar.py:443(__init__)
        1    0.000    0.000    0.000    0.000 grammar_analysis.py:175(<dictcomp>)
        2    0.000    0.000    0.000    0.000 load_grammar.py:201(_will_not_get_removed)
        1    0.000    0.000    0.000    0.000 reconstruct.py:83(<dictcomp>)
        1    0.000    0.000    0.000    0.000 load_grammar.py:235(_name_rule)
        1    0.000    0.000    0.000    0.000 {method '__reduce_ex__' of 'object' objects}
        2    0.000    0.000    0.000    0.000 load_grammar.py:219(expansion)
        2    0.000    0.000    0.000    0.000 visitors.py:263(__mul__)
        1    0.000    0.000    0.000    0.000 grammar_analysis.py:60(__init__)
        1    0.000    0.000    0.000    0.000 grammar_analysis.py:163(<dictcomp>)
        1    0.000    0.000    0.000    0.000 load_grammar.py:516(__init__)
        8    0.000    0.000    0.000    0.000 load_grammar.py:434(alias)
        1    0.000    0.000    0.000    0.000 load_grammar.py:763(<listcomp>)
        1    0.000    0.000    0.000    0.000 grammar_analysis.py:166(<dictcomp>)
        1    0.000    0.000    0.000    0.000 load_grammar.py:445(<setcomp>)
        1    0.000    0.000    0.000    0.000 grammar_analysis.py:160(<dictcomp>)
        2    0.000    0.000    0.000    0.000 utils.py:269(classify_bool)
        1    0.000    0.000    0.000    0.000 load_grammar.py:240(_add_rule)
        2    0.000    0.000    0.000    0.000 {built-in method builtins.sum}
        1    0.000    0.000    0.000    0.000 load_grammar.py:743(<setcomp>)
        4    0.000    0.000    0.000    0.000 visitors.py:255(__init__)
        2    0.000    0.000    0.000    0.000 load_grammar.py:222(expansions)
        1    0.000    0.000    0.000    0.000 cProfile.py:134(__exit__)
        4    0.000    0.000    0.000    0.000 {method 'items' of 'dict' objects}
       11    0.000    0.000    0.000    0.000 load_grammar.py:428(expansions)
        1    0.000    0.000    0.000    0.000 lexer.py:98(to_regexp)
        1    0.000    0.000    0.000    0.000 load_grammar.py:498(__init__)
        4    0.000    0.000    0.000    0.000 {method 'values' of 'dict' objects}
        2    0.000    0.000    0.000    0.000 {built-in method builtins.min}
        1    0.000    0.000    0.000    0.000 load_grammar.py:797(<setcomp>)
        1    0.000    0.000    0.000    0.000 load_grammar.py:228(__init__)
        1    0.000    0.000    0.000    0.000 copyreg.py:90(__newobj__)
        1    0.000    0.000    0.000    0.000 reconstruct.py:29(__init__)
        1    0.000    0.000    0.000    0.000 load_grammar.py:198(__init__)
        1    0.000    0.000    0.000    0.000 {method 'reverse' of 'list' objects}
        1    0.000    0.000    0.000    0.000 {built-in method builtins.issubclass}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}



##################Running pro_create_sheets... #######################
for test <function pro_create_sheets at 0x0000017F1670A940> total time: 0.0357516
Total Logs
         36877 function calls in 0.009 seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
     5000    0.002    0.000    0.005    0.000 random.py:285(choice)
     5000    0.002    0.000    0.003    0.000 random.py:250(_randbelow_with_getrandbits)
     5100    0.002    0.000    0.007    0.000 profiler.py:46(<genexpr>)
      100    0.001    0.000    0.001    0.000 utils.py:96(check_new_name)
      100    0.001    0.000    0.007    0.000 {method 'join' of 'str' objects}
     5175    0.000    0.000    0.000    0.000 {method 'getrandbits' of '_random.Random' objects}
     5100    0.000    0.000    0.000    0.000 {built-in method builtins.len}
      100    0.000    0.000    0.002    0.000 Workbook.py:868(new_sheet)
     5000    0.000    0.000    0.000    0.000 {method 'isalnum' of 'str' objects}
     5000    0.000    0.000    0.000    0.000 {method 'bit_length' of 'int' objects}
      100    0.000    0.000    0.007    0.000 profiler.py:43(generate_random_string)
      100    0.000    0.000    0.002    0.000 Workbook.py:35(run_func)
      100    0.000    0.000    0.000    0.000 Sheet.py:25(__init__)
      100    0.000    0.000    0.000    0.000 Workbook.py:857(recompute_sheet_parents)
      100    0.000    0.000    0.000    0.000 Graph.py:128(get_sheet_parents)
      100    0.000    0.000    0.000    0.000 Workbook.py:505(num_sheets)
      100    0.000    0.000    0.000    0.000 Graph.py:121(has_sheet)
      100    0.000    0.000    0.000    0.000 utils.py:78(get_hidden_name)
      100    0.000    0.000    0.000    0.000 Graph.py:124(add_sheet)
      100    0.000    0.000    0.000    0.000 {method 'lower' of 'str' objects}
      100    0.000    0.000    0.000    0.000 {method 'keys' of 'dict' objects}
      100    0.000    0.000    0.000    0.000 {method 'keys' of 'collections.OrderedDict' objects}
        1    0.000    0.000    0.000    0.000 cProfile.py:134(__exit__)
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}



##################Running pro_set_cell_contents... #######################
for test <function pro_set_cell_contents at 0x0000017F1670AA60> total time: 37.2640741
Total Logs
         30968251 function calls in 9.078 seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
  4999500    2.393    0.000    5.831    0.000 random.py:285(choice)
  4999500    2.218    0.000    3.060    0.000 random.py:250(_randbelow_with_getrandbits)
  5009499    1.919    0.000    7.750    0.000 profiler.py:46(<genexpr>)
    29997    0.745    0.000    8.495    0.000 {method 'join' of 'str' objects}
  5160830    0.505    0.000    0.505    0.000 {method 'getrandbits' of '_random.Random' objects}
  5069493    0.386    0.000    0.386    0.000 {built-in method builtins.len}
  4999500    0.337    0.000    0.337    0.000 {method 'bit_length' of 'int' objects}
     9999    0.067    0.000    0.539    0.000 Workbook.py:727(set_cell_contents)
   189981    0.055    0.000    0.055    0.000 {method 'lower' of 'str' objects}
     9999    0.047    0.000    0.139    0.000 Cell.py:81(set_cell_value)
     9999    0.042    0.000    0.291    0.000 Sheet.py:60(set_cell_contents)
     9999    0.039    0.000    0.082    0.000 utils.py:307(error_matcher)
     9999    0.037    0.000    0.060    0.000 Workbook.py:638(recompute_cell_and_parents)
     9999    0.035    0.000    0.055    0.000 utils.py:179(convert_location_to_idx)
     9999    0.024    0.000    8.503    0.001 profiler.py:43(generate_random_string)
    19998    0.020    0.000    0.032    0.000 Sheet.py:93(get_cell_value)
     9999    0.017    0.000    0.021    0.000 profiler.py:25(convert_to_excel_coordinates)
     9999    0.015    0.000    0.554    0.000 Workbook.py:35(run_func)
     9999    0.014    0.000    0.156    0.000 Cell.py:65(set_contents)
     9999    0.014    0.000    0.169    0.000 Cell.py:46(__init__)
     9999    0.012    0.000    0.015    0.000 Sheet.py:124(update_extent)
     9999    0.012    0.000    0.012    0.000 {method 'match' of 're.Pattern' objects}
    39996    0.011    0.000    0.011    0.000 {method 'get' of 'dict' objects}
     9999    0.010    0.000    0.016    0.000 re.py:289(_compile)
    19998    0.010    0.000    0.013    0.000 utils.py:78(get_hidden_name)
     9999    0.010    0.000    0.017    0.000 Workbook.py:540(get_sheet_name_from_hidden)
     9999    0.009    0.000    0.036    0.000 re.py:188(match)
    79992    0.009    0.000    0.009    0.000 {method 'strip' of 'str' objects}
     9999    0.008    0.000    0.045    0.000 utils.py:131(check_valid_cell_location)
    19998    0.008    0.000    0.012    0.000 Sheet.py:120(get_cell)
    19998    0.008    0.000    0.008    0.000 {built-in method _heapq.heappush}
    19998    0.007    0.000    0.007    0.000 {built-in method builtins.isinstance}
     9999    0.007    0.000    0.013    0.000 Workbook.py:714(clean_children_cells)
     9999    0.006    0.000    0.006    0.000 Graph.py:330(tarjans)
     9999    0.006    0.000    0.007    0.000 utils.py:212(is_formula)
    19998    0.002    0.000    0.002    0.000 {built-in method builtins.ord}
     9999    0.002    0.000    0.002    0.000 {method 'lstrip' of 'str' objects}
     9999    0.002    0.000    0.002    0.000 {built-in method builtins.divmod}
     9999    0.002    0.000    0.002    0.000 {method 'upper' of 'str' objects}
     9999    0.002    0.000    0.002    0.000 Cell.py:125(get_value)
     9999    0.002    0.000    0.002    0.000 Sheet.py:54(get_sheet_name)
     9999    0.002    0.000    0.002    0.000 {built-in method builtins.chr}
     9999    0.002    0.000    0.002    0.000 {method 'rstrip' of 'str' objects}
        1    0.000    0.000    0.000    0.000 cProfile.py:134(__exit__)
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}



##################Running pro_update_formula_chain... #######################
for test <function pro_update_formula_chain at 0x0000017F1670ACA0> total time: 30.831952299999998
Total Logs
         900012 function calls in 7.320 seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    6.831    6.831    6.856    6.856 Graph.py:330(tarjans)
    10000    0.053    0.000    0.445    0.000 Workbook.py:582(recompute_cell_value)
     9999    0.031    0.000    0.256    0.000 Workbook.py:544(get_formula_value)
     9999    0.027    0.000    0.112    0.000 Parser.py:253(cell)
    29999    0.026    0.000    0.040    0.000 Sheet.py:93(get_cell_value)
    10000    0.025    0.000    0.046    0.000 Cell.py:81(set_cell_value)
    20000    0.016    0.000    0.016    0.000 Graph.py:137(get_parents_from_cell)
     9999    0.015    0.000    0.061    0.000 Workbook.py:806(get_cell_value)
    40000    0.014    0.000    0.019    0.000 utils.py:78(get_hidden_name)
        1    0.014    0.014    7.317    7.317 Workbook.py:638(recompute_cell_and_parents)
   100011    0.013    0.000    0.013    0.000 {method 'lower' of 'str' objects}
     9999    0.013    0.000    0.184    0.000 visitors.py:421(_visit_tree)
    19998    0.012    0.000    0.019    0.000 {built-in method builtins.getattr}
     9999    0.012    0.000    0.012    0.000 Parser.py:97(__init__)
     9999    0.012    0.000    0.060    0.000 Sheet.py:104(set_cell_value)
     9999    0.012    0.000    0.014    0.000 typing.py:868(__new__)
    69995    0.011    0.000    0.011    0.000 {built-in method builtins.isinstance}
    19999    0.010    0.000    0.014    0.000 re.py:289(_compile)
    50000    0.010    0.000    0.010    0.000 {method 'get' of 'dict' objects}
     9999    0.010    0.000    0.017    0.000 visitors.py:429(visit_children)
     9999    0.009    0.000    0.152    0.000 visitors.py:444(inner)
    10000    0.009    0.000    0.014    0.000 utils.py:207(remove_exponent)
    10000    0.009    0.000    0.020    0.000 Workbook.py:575(get_cell_from_location)
     9999    0.008    0.000    0.125    0.000 Parser.py:40(fix_formula)
    10000    0.007    0.000    0.014    0.000 Workbook.py:540(get_sheet_name_from_hidden)
     9999    0.007    0.000    0.019    0.000 re.py:203(sub)
    10000    0.007    0.000    0.019    0.000 re.py:188(match)
     9999    0.006    0.000    0.008    0.000 visitors.py:430(<listcomp>)
    10000    0.006    0.000    0.026    0.000 utils.py:131(check_valid_cell_location)
    10000    0.006    0.000    0.006    0.000 {method 'match' of 're.Pattern' objects}
     9999    0.005    0.000    0.190    0.000 visitors.py:415(visit)
    29999    0.005    0.000    0.005    0.000 Cell.py:125(get_value)
     9999    0.005    0.000    0.007    0.000 lexer.py:265(__eq__)
     9999    0.005    0.000    0.005    0.000 {method 'sub' of 're.Pattern' objects}
    19998    0.005    0.000    0.005    0.000 Cell.py:62(get_cached_formula)
    10001    0.005    0.000    0.006    0.000 utils.py:212(is_formula)
    40004    0.004    0.000    0.004    0.000 {built-in method builtins.len}
    50000    0.004    0.000    0.004    0.000 {method 'append' of 'list' objects}
    30000    0.004    0.000    0.004    0.000 {method 'pop' of 'list' objects}
     9999    0.004    0.000    0.005    0.000 utils.py:295(get_highest_precedence_error)
    19999    0.004    0.000    0.004    0.000 Cell.py:128(get_contents)
    10002    0.004    0.000    0.007    0.000 Sheet.py:120(get_cell)
    10000    0.003    0.000    0.003    0.000 {method 'quantize' of 'decimal.Decimal' objects}
     9999    0.003    0.000    0.003    0.000 Cell.py:131(set_children)
     9999    0.002    0.000    0.002    0.000 {built-in method __new__ of type object at 0x00007FFB2480DCB0}
    10000    0.002    0.000    0.002    0.000 {method 'to_integral' of 'decimal.Decimal' objects}
    10000    0.002    0.000    0.002    0.000 Cell.py:135(get_children)
     9999    0.002    0.000    0.002    0.000 Parser.py:108(get_cell_refs)
     9999    0.002    0.000    0.002    0.000 {method 'add' of 'set' objects}
        1    0.001    0.001    7.319    7.319 Workbook.py:727(set_cell_contents)
    10000    0.001    0.000    0.001    0.000 Sheet.py:54(get_sheet_name)
    10008    0.001    0.000    0.001    0.000 {method 'strip' of 'str' objects}
    10000    0.001    0.000    0.001    0.000 {method 'is_finite' of 'decimal.Decimal' objects}
        1    0.001    0.001    7.320    7.320 Workbook.py:35(run_func)
        1    0.000    0.000    0.000    0.000 cProfile.py:134(__exit__)
        1    0.000    0.000    0.000    0.000 utils.py:179(convert_location_to_idx)
        1    0.000    0.000    0.000    0.000 utils.py:307(error_matcher)
        1    0.000    0.000    0.000    0.000 Sheet.py:60(set_cell_contents)
        1    0.000    0.000    0.000    0.000 Sheet.py:124(update_extent)
        1    0.000    0.000    0.000    0.000 Cell.py:65(set_contents)
        2    0.000    0.000    0.000    0.000 {method 'join' of 'str' objects}
        1    0.000    0.000    0.000    0.000 Workbook.py:714(clean_children_cells)
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
        1    0.000    0.000    0.000    0.000 {method 'lstrip' of 'str' objects}
        1    0.000    0.000    0.000    0.000 {method 'upper' of 'str' objects}
        2    0.000    0.000    0.000    0.000 {built-in method builtins.ord}
        1    0.000    0.000    0.000    0.000 {method 'rstrip' of 'str' objects}



##################Running pro_write_formula_chain... #######################
for test <function pro_write_formula_chain at 0x0000017F1670AC10> total time: 1242.7225985000005
Total Logs
         178804367 function calls (177984449 primitive calls) in 119.297 seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
   158874   22.015    0.000   79.544    0.001 earley.py:78(predict_and_complete)
  9029097   12.728    0.000   19.181    0.000 earley_common.py:9(__init__)
     9999    6.670    0.001   23.560    0.002 earley_forest.py:283(visit)
22497750/21877812    6.510    0.000    8.257    0.000 {built-in method builtins.hash}
  7289271    5.202    0.000    8.247    0.000 utils.py:345(add)
  5629437    4.659    0.000    8.772    0.000 grammar.py:18(__eq__)
 12198780    3.775    0.000    5.544    0.000 grammar.py:25(__hash__)
   148875    3.501    0.000   11.553    0.000 xearley.py:41(scan)
   579942    3.137    0.000    7.749    0.000 earley_forest.py:50(__init__)
  7359264    3.040    0.000    3.076    0.000 earley_common.py:28(__eq__)
  5269473    2.826    0.000    3.609    0.000 lexer.py:265(__eq__)
  1696500    2.823    0.000    3.306    0.000 typing.py:868(__new__)
   299970    2.544    0.000    9.284    0.000 earley.py:135(<listcomp>)
  3429657    2.494    0.000    4.198    0.000 utils.py:342(__contains__)
 14698530    2.204    0.000    2.204    0.000 {built-in method builtins.isinstance}
 11288871    1.717    0.000    1.717    0.000 earley_common.py:31(__hash__)
  1626507    1.654    0.000    1.911    0.000 {built-in method fromkeys}
   559944    1.528    0.000    6.314    0.000 earley_forest.py:437(_visit_node_out_helper)
  9759024    1.504    0.000    1.504    0.000 grammar.py:121(__hash__)
 10516728    1.412    0.000    1.412    0.000 {method 'append' of 'list' objects}
   279972    1.346    0.000    2.892    0.000 earley_forest.py:603(transform_packed_node)
  4779522    1.236    0.000    1.236    0.000 {built-in method builtins.next}
 11108889    1.234    0.000    1.234    0.000 {built-in method builtins.len}
   559944    1.113    0.000    2.316    0.000 {built-in method builtins.sorted}
  1626507    1.001    0.000    2.912    0.000 utils.py:339(__init__)
  6229377    0.961    0.000    0.961    0.000 {built-in method builtins.id}
  1338756    0.956    0.000    0.956    0.000 {method 'match' of 're.Pattern' objects}
   599940    0.925    0.000    2.873    0.000 earley_forest.py:64(add_family)
   599940    0.831    0.000    1.400    0.000 earley_forest.py:131(__init__)
  1318758    0.786    0.000    1.703    0.000 parser_frontends.py:184(match)
   599940    0.690    0.000    2.831    0.000 earley_common.py:25(advance)
     9999    0.674    0.000   91.774    0.009 xearley.py:39(_parse)
  1666503    0.674    0.000    1.013    0.000 utils.py:348(__iter__)
   559944    0.621    0.000    3.374    0.000 earley_forest.py:85(children)
   279972    0.615    0.000    1.721    0.000 earley_forest.py:631(visit_packed_node_in)
  1786491    0.576    0.000    0.576    0.000 {built-in method __new__ of type object at 0x00007FFB2480DCB0}
   209979    0.532    0.000    1.338    0.000 earley_forest.py:581(transform_symbol_node)
   279972    0.518    0.000    4.702    0.000 earley_forest.py:638(visit_packed_node_out)
   859914    0.505    0.000    0.708    0.000 {method 'setdefault' of 'dict' objects}
   279972    0.472    0.000    2.749    0.000 earley_forest.py:422(visit_symbol_node_in)
   279972    0.464    0.000    1.014    0.000 earley_forest.py:427(visit_packed_node_in)
   279972    0.452    0.000    4.431    0.000 earley_forest.py:625(visit_symbol_node_in)
  2226447    0.443    0.000    0.443    0.000 {built-in method builtins.iter}
  1409859    0.425    0.000    0.425    0.000 {method 'add' of 'set' objects}
  2579742    0.394    0.000    0.394    0.000 {method 'pop' of 'collections.deque' objects}
   559944    0.390    0.000    0.582    0.000 earley_forest.py:145(sort_key)
   209979    0.371    0.000    0.843    0.000 earley_forest.py:565(_call_rule_func)
  2489751    0.330    0.000    0.330    0.000 {method 'append' of 'collections.deque' objects}
   279972    0.310    0.000    0.320    0.000 earley_forest.py:499(__init__)
   209979    0.299    0.000    0.516    0.000 earley_forest.py:556(_collapse_ambig)
   279972    0.272    0.000    0.412    0.000 earley_forest.py:155(children)
     9999    0.245    0.000  116.472    0.012 parser_frontends.py:100(parse)
   279972    0.244    0.000    0.436    0.000 earley_forest.py:70(load_paths)
   559944    0.233    0.000    0.330    0.000 utils.py:357(__len__)
     9999    0.229    0.000  116.133    0.012 earley.py:262(parse)
   839916    0.223    0.000    0.223    0.000 {method 'remove' of 'set' objects}
   279972    0.210    0.000    4.090    0.000 earley_forest.py:450(visit_packed_node_out)
    89991    0.198    0.000    0.291    0.000 lexer.py:213(_future_new)
     9999    0.194    0.000  118.666    0.012 Workbook.py:638(recompute_cell_and_parents)
   559944    0.192    0.000    0.192    0.000 earley_forest.py:141(is_empty)
   209979    0.160    0.000    2.145    0.000 earley_forest.py:444(visit_symbol_node_out)
    69993    0.157    0.000    0.217    0.000 earley_forest.py:591(transform_intermediate_node)
   199980    0.156    0.000    0.186    0.000 {built-in method builtins.getattr}
   599940    0.145    0.000    0.145    0.000 earley_forest.py:101(__hash__)
   169983    0.140    0.000    0.217    0.000 parse_tree_builder.py:20(__call__)
   279972    0.140    0.000    0.140    0.000 earley_forest.py:158(<listcomp>)
    89991    0.135    0.000    0.426    0.000 lexer.py:202(__new__)
    79992    0.126    0.000    0.156    0.000 earley_forest.py:432(visit_token_node)
   599940    0.121    0.000    0.121    0.000 earley_forest.py:169(__hash__)
   559944    0.121    0.000    0.121    0.000 earley_forest.py:548(_check_cycle)
    89991    0.117    0.000    0.138    0.000 earley_forest.py:193(__init__)
     9999    0.116    0.000  118.006    0.012 Workbook.py:544(get_formula_value)
   209979    0.112    0.000    0.144    0.000 earley_forest.py:571(_call_ambig_func)
59994/9999    0.108    0.000    1.197    0.000 visitors.py:444(inner)
59994/9999    0.108    0.000    1.277    0.000 visitors.py:421(_visit_tree)
   559944    0.106    0.000    0.106    0.000 {method 'pop' of 'list' objects}
     9999    0.095    0.000    0.382    0.000 Parser.py:253(cell)
   178872    0.088    0.000    0.088    0.000 utils.py:354(__bool__)
59994/9999    0.088    0.000    1.072    0.000 visitors.py:430(<listcomp>)
     9999    0.087    0.000  119.220    0.012 Workbook.py:727(set_cell_contents)
    59994    0.086    0.000    0.734    0.000 Parser.py:40(fix_formula)
    49995    0.083    0.000    0.136    0.000 Sheet.py:93(get_cell_value)
    19998    0.082    0.000    0.082    0.000 Parser.py:243(number)
     9999    0.080    0.000    0.134    0.000 utils.py:179(convert_location_to_idx)
    19998    0.080    0.000    0.142    0.000 Cell.py:81(set_cell_value)
     9999    0.073    0.000    0.335    0.000 Sheet.py:60(set_cell_contents)
    29997    0.068    0.000    0.178    0.000 xearley.py:88(<listcomp>)
     9999    0.067    0.000   23.627    0.002 earley_forest.py:535(visit)
59994/9999    0.065    0.000    1.086    0.000 visitors.py:429(visit_children)
    29997    0.063    0.000    0.063    0.000 xearley.py:85(<listcomp>)
    19998    0.058    0.000    0.095    0.000 parse_tree_builder.py:145(__call__)
     9999    0.057    0.000    0.103    0.000 earley_forest.py:523(__init__)
     9999    0.056    0.000    0.065    0.000 Parser.py:211(mul_expr)
    69993    0.056    0.000    0.505    0.000 earley_forest.py:447(visit_intermediate_node_out)
     9999    0.056    0.000    0.074    0.000 parser_frontends.py:96(_make_lexer_thread)
   209979    0.054    0.000    0.054    0.000 {built-in method builtins.hasattr}
     9999    0.051    0.000    0.190    0.000 Workbook.py:806(get_cell_value)
    89991    0.049    0.000    0.049    0.000 {method 'group' of 're.Match' objects}
     9999    0.049    0.000    0.162    0.000 earley.py:284(<listcomp>)
    29997    0.049    0.000    0.049    0.000 {method 'join' of 'str' objects}
     9999    0.047    0.000    0.077    0.000 Workbook.py:687(_get_sheet_name_location)
    59994    0.045    0.000    0.045    0.000 tree.py:61(__init__)
    59994    0.044    0.000    0.065    0.000 utils.py:295(get_highest_precedence_error)
    29997    0.044    0.000    0.065    0.000 re.py:289(_compile)
    89991    0.040    0.000    0.040    0.000 {method 'get' of 'dict' objects}
     9999    0.040    0.000    0.040    0.000 Parser.py:97(__init__)
     9999    0.039    0.000    0.049    0.000 Parser.py:169(add_expr)
     9999    0.039    0.000    0.048    0.000 profiler.py:25(convert_to_excel_coordinates)
   159984    0.039    0.000    0.039    0.000 {method 'lower' of 'str' objects}
     9999    0.038    0.000   23.668    0.002 earley_forest.py:397(transform)
     9999    0.037    0.000    0.046    0.000 earley_forest.py:390(__init__)
     9999    0.037    0.000    0.159    0.000 Workbook.py:700(add_children_cells)
    39996    0.035    0.000    0.044    0.000 utils.py:78(get_hidden_name)
   149985    0.034    0.000    0.034    0.000 {method 'end' of 're.Match' objects}
     9999    0.032    0.000    0.045    0.000 Graph.py:68(add_connection)
    19998    0.031    0.000    0.126    0.000 utils.py:131(check_valid_cell_location)
    19998    0.030    0.000    0.030    0.000 {built-in method _heapq.heappush}
     9999    0.029    0.000  116.501    0.012 lark.py:640(parse)
     9999    0.029    0.000    0.153    0.000 Sheet.py:104(set_cell_value)
     9999    0.029    0.000  119.249    0.012 Workbook.py:35(run_func)
     9999    0.027    0.000    0.027    0.000 {method 'sub' of 're.Pattern' objects}
    19998    0.026    0.000    0.095    0.000 re.py:188(match)
    89991    0.025    0.000    0.025    0.000 earley_forest.py:207(__hash__)
     9999    0.023    0.000    0.043    0.000 utils.py:207(remove_exponent)
     9999    0.022    0.000    0.026    0.000 Sheet.py:124(update_extent)
     9999    0.022    0.000    0.084    0.000 re.py:203(sub)
     9999    0.021    0.000    0.070    0.000 Cell.py:46(__init__)
     9999    0.021    0.000    0.049    0.000 Cell.py:65(set_contents)
     9999    0.021    0.000    0.021    0.000 {built-in method _abc._abc_instancecheck}
     9999    0.021    0.000    0.034    0.000 Workbook.py:540(get_sheet_name_from_hidden)
    59994    0.020    0.000    0.020    0.000 {method 'extend' of 'list' objects}
     9999    0.018    0.000    0.020    0.000 parser_frontends.py:86(_verify_start)
     9999    0.015    0.000    0.015    0.000 lark.py:220(__getattr__)
    79992    0.015    0.000    0.015    0.000 earley_forest.py:418(transform_token_node)
     9999    0.015    0.000    0.015    0.000 {method 'split' of 'str' objects}
     9999    0.014    0.000    1.291    0.000 visitors.py:415(visit)
     9999    0.013    0.000    0.013    0.000 Graph.py:330(tarjans)
     9999    0.013    0.000    0.013    0.000 {method 'update' of 'dict' objects}
     9999    0.013    0.000    0.022    0.000 Workbook.py:714(clean_children_cells)
    19998    0.012    0.000    0.016    0.000 Sheet.py:120(get_cell)
     9999    0.011    0.000    0.032    0.000 abc.py:96(__instancecheck__)
     9999    0.011    0.000    0.013    0.000 utils.py:212(is_formula)
    39996    0.010    0.000    0.010    0.000 Cell.py:125(get_value)
     9909    0.010    0.000    0.010    0.000 {method 'quantize' of 'decimal.Decimal' objects}
     9999    0.009    0.000    0.009    0.000 {method 'to_integral' of 'decimal.Decimal' objects}
     9999    0.009    0.000    0.009    0.000 earley_forest.py:232(__init__)
    39996    0.009    0.000    0.009    0.000 {method 'strip' of 'str' objects}
     9999    0.007    0.000    0.007    0.000 Cell.py:59(cache_formula)
     9999    0.007    0.000    0.007    0.000 grammar.py:15(__init__)
    19998    0.007    0.000    0.007    0.000 Cell.py:128(get_contents)
     9999    0.006    0.000    0.006    0.000 Cell.py:131(set_children)
     9999    0.006    0.000    0.006    0.000 {built-in method builtins.divmod}
    19998    0.005    0.000    0.005    0.000 {built-in method builtins.ord}
     9999    0.004    0.000    0.004    0.000 Parser.py:111(parens)
     9999    0.004    0.000    0.004    0.000 Sheet.py:54(get_sheet_name)
     9999    0.004    0.000    0.004    0.000 Parser.py:108(get_cell_refs)
     9999    0.004    0.000    0.004    0.000 {built-in method builtins.chr}
     9999    0.004    0.000    0.004    0.000 {method 'upper' of 'str' objects}
     9999    0.003    0.000    0.003    0.000 {method 'lstrip' of 'str' objects}
     9999    0.003    0.000    0.003    0.000 Cell.py:62(get_cached_formula)
     9999    0.003    0.000    0.003    0.000 {method 'is_finite' of 'decimal.Decimal' objects}
     9999    0.003    0.000    0.003    0.000 {method 'rstrip' of 'str' objects}
       90    0.000    0.000    0.000    0.000 {method 'normalize' of 'decimal.Decimal' objects}
        1    0.000    0.000    0.000    0.000 cProfile.py:134(__exit__)
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}



##################Running pro_cyle_formula_chain... #######################
for test <function pro_cyle_formula_chain at 0x0000017F1670ADC0> total time: 31.306374400000006
Total Logs
         306631 function calls (306610 primitive calls) in 7.786 seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    7.604    7.604    7.648    7.648 Graph.py:330(tarjans)
        1    0.064    0.064    0.131    0.131 Workbook.py:616(_set_cycle_detected)
    20000    0.021    0.000    0.021    0.000 Graph.py:137(get_parents_from_cell)
    30001    0.015    0.000    0.015    0.000 {built-in method builtins.min}
    10002    0.014    0.000    0.019    0.000 Cell.py:81(set_cell_value)
    10000    0.009    0.000    0.021    0.000 Workbook.py:575(get_cell_from_location)
    20005    0.008    0.000    0.010    0.000 utils.py:78(get_hidden_name)
    10002    0.007    0.000    0.014    0.000 Workbook.py:540(get_sheet_name_from_hidden)
    10000    0.006    0.000    0.006    0.000 CellError.py:11(__init__)
    30017    0.004    0.000    0.004    0.000 {method 'lower' of 'str' objects}
    30019    0.004    0.000    0.004    0.000 {method 'pop' of 'list' objects}
    40407    0.004    0.000    0.004    0.000 {method 'append' of 'list' objects}
    10002    0.004    0.000    0.007    0.000 Sheet.py:120(get_cell)
    30544    0.004    0.000    0.004    0.000 {built-in method builtins.isinstance}
    10005    0.004    0.000    0.004    0.000 Cell.py:125(get_value)
    10009    0.003    0.000    0.003    0.000 {method 'get' of 'dict' objects}
    10002    0.002    0.000    0.002    0.000 Cell.py:128(get_contents)
    10002    0.001    0.000    0.001    0.000 Sheet.py:54(get_sheet_name)
    10005    0.001    0.000    0.001    0.000 {method 'strip' of 'str' objects}
        1    0.001    0.001    7.784    7.784 Workbook.py:638(recompute_cell_and_parents)
        1    0.001    0.001    7.786    7.786 Workbook.py:35(run_func)
        4    0.001    0.000    0.003    0.001 earley.py:78(predict_and_complete)
        1    0.001    0.001    7.785    7.785 Workbook.py:727(set_cell_contents)
      362    0.000    0.000    0.001    0.000 earley_common.py:9(__init__)
        1    0.000    0.000    0.001    0.001 earley_forest.py:283(visit)
  865/844    0.000    0.000    0.000    0.000 {built-in method builtins.hash}
      264    0.000    0.000    0.000    0.000 utils.py:345(add)
      215    0.000    0.000    0.000    0.000 grammar.py:18(__eq__)
      459    0.000    0.000    0.000    0.000 grammar.py:25(__hash__)
      309    0.000    0.000    0.000    0.000 earley_common.py:28(__eq__)
      144    0.000    0.000    0.000    0.000 utils.py:342(__contains__)
      203    0.000    0.000    0.000    0.000 lexer.py:265(__eq__)
       10    0.000    0.000    0.000    0.000 earley.py:135(<listcomp>)
       20    0.000    0.000    0.000    0.000 earley_forest.py:50(__init__)
        3    0.000    0.000    0.000    0.000 xearley.py:41(scan)
       53    0.000    0.000    0.000    0.000 typing.py:868(__new__)
      389    0.000    0.000    0.000    0.000 grammar.py:121(__hash__)
      403    0.000    0.000    0.000    0.000 earley_common.py:31(__hash__)
       19    0.000    0.000    0.000    0.000 earley_forest.py:437(_visit_node_out_helper)
      439    0.000    0.000    0.000    0.000 {built-in method builtins.len}
       10    0.000    0.000    0.000    0.000 earley_forest.py:603(transform_packed_node)
      156    0.000    0.000    0.000    0.000 {built-in method builtins.next}
       18    0.000    0.000    0.000    0.000 {built-in method builtins.sorted}
       51    0.000    0.000    0.000    0.000 utils.py:339(__init__)
       21    0.000    0.000    0.000    0.000 earley_forest.py:64(add_family)
      209    0.000    0.000    0.000    0.000 {built-in method builtins.id}
       51    0.000    0.000    0.000    0.000 {built-in method fromkeys}
       21    0.000    0.000    0.000    0.000 earley_forest.py:131(__init__)
       21    0.000    0.000    0.000    0.000 earley_common.py:25(advance)
       10    0.000    0.000    0.000    0.000 earley_forest.py:631(visit_packed_node_in)
        8    0.000    0.000    0.000    0.000 earley_forest.py:581(transform_symbol_node)
       48    0.000    0.000    0.000    0.000 utils.py:348(__iter__)
        1    0.000    0.000    0.004    0.004 earley.py:262(parse)
       18    0.000    0.000    0.000    0.000 earley_forest.py:85(children)
       56    0.000    0.000    0.000    0.000 {built-in method __new__ of type object at 0x00007FFB2480DCB0}
       10    0.000    0.000    0.000    0.000 earley_forest.py:638(visit_packed_node_out)
        1    0.000    0.000    0.003    0.003 xearley.py:39(_parse)
       29    0.000    0.000    0.000    0.000 {method 'setdefault' of 'dict' objects}
        9    0.000    0.000    0.000    0.000 earley_forest.py:625(visit_symbol_node_in)
        1    0.000    0.000    0.000    0.000 cProfile.py:134(__exit__)
       10    0.000    0.000    0.000    0.000 earley_forest.py:427(visit_packed_node_in)
        8    0.000    0.000    0.000    0.000 earley_forest.py:556(_collapse_ambig)
       21    0.000    0.000    0.000    0.000 {method 'match' of 're.Pattern' objects}
        9    0.000    0.000    0.000    0.000 earley_forest.py:422(visit_symbol_node_in)
        8    0.000    0.000    0.000    0.000 earley_forest.py:565(_call_rule_func)
       66    0.000    0.000    0.000    0.000 {built-in method builtins.iter}
       86    0.000    0.000    0.000    0.000 {method 'pop' of 'collections.deque' objects}
       20    0.000    0.000    0.000    0.000 earley_forest.py:145(sort_key)
       19    0.000    0.000    0.000    0.000 parser_frontends.py:184(match)
        1    0.000    0.000    0.000    0.000 utils.py:179(convert_location_to_idx)
       49    0.000    0.000    0.000    0.000 {method 'add' of 'set' objects}
       83    0.000    0.000    0.000    0.000 {method 'append' of 'collections.deque' objects}
        5    0.000    0.000    0.000    0.000 Sheet.py:93(get_cell_value)
       10    0.000    0.000    0.000    0.000 earley_forest.py:155(children)
        1    0.000    0.000    0.004    0.004 parser_frontends.py:100(parse)
        1    0.000    0.000    0.004    0.004 Workbook.py:544(get_formula_value)
        9    0.000    0.000    0.000    0.000 earley_forest.py:499(__init__)
       10    0.000    0.000    0.000    0.000 earley_forest.py:450(visit_packed_node_out)
       28    0.000    0.000    0.000    0.000 {method 'remove' of 'set' objects}
       18    0.000    0.000    0.000    0.000 utils.py:357(__len__)
        9    0.000    0.000    0.000    0.000 earley_forest.py:70(load_paths)
        8    0.000    0.000    0.000    0.000 earley_forest.py:444(visit_symbol_node_out)
        1    0.000    0.000    0.000    0.000 earley.py:284(<listcomp>)
        1    0.000    0.000    0.000    0.000 Sheet.py:60(set_cell_contents)
        1    0.000    0.000    0.000    0.000 Parser.py:253(cell)
       20    0.000    0.000    0.000    0.000 earley_forest.py:141(is_empty)
        3    0.000    0.000    0.000    0.000 re.py:289(_compile)
        2    0.000    0.000    0.000    0.000 re.py:188(match)
        1    0.000    0.000    0.000    0.000 Sheet.py:124(update_extent)
        3    0.000    0.000    0.000    0.000 lexer.py:213(_future_new)
       10    0.000    0.000    0.000    0.000 {built-in method builtins.getattr}
        1    0.000    0.000    0.000    0.000 Workbook.py:687(_get_sheet_name_location)
        1    0.000    0.000    0.000    0.000 parser_frontends.py:96(_make_lexer_thread)
       21    0.000    0.000    0.000    0.000 earley_forest.py:169(__hash__)
       10    0.000    0.000    0.000    0.000 earley_forest.py:158(<listcomp>)
        1    0.000    0.000    0.000    0.000 utils.py:207(remove_exponent)
       19    0.000    0.000    0.000    0.000 earley_forest.py:101(__hash__)
        8    0.000    0.000    0.000    0.000 earley_forest.py:571(_call_ambig_func)
        3    0.000    0.000    0.000    0.000 lexer.py:202(__new__)
       19    0.000    0.000    0.000    0.000 earley_forest.py:548(_check_cycle)
        1    0.000    0.000    0.000    0.000 Parser.py:97(__init__)
        7    0.000    0.000    0.000    0.000 parse_tree_builder.py:20(__call__)
        3    0.000    0.000    0.000    0.000 {method 'join' of 'str' objects}
        2    0.000    0.000    0.000    0.000 earley_forest.py:432(visit_token_node)
        1    0.000    0.000    0.000    0.000 earley_forest.py:523(__init__)
        1    0.000    0.000    0.001    0.001 earley_forest.py:535(visit)
        1    0.000    0.000    0.000    0.000 re.py:203(sub)
        2    0.000    0.000    0.000    0.000 abc.py:96(__instancecheck__)
        1    0.000    0.000    0.000    0.000 Workbook.py:806(get_cell_value)
        1    0.000    0.000    0.000    0.000 Graph.py:68(add_connection)
        1    0.000    0.000    0.001    0.001 earley_forest.py:397(transform)
        3    0.000    0.000    0.000    0.000 earley_forest.py:193(__init__)
        1    0.000    0.000    0.000    0.000 Workbook.py:700(add_children_cells)
        1    0.000    0.000    0.000    0.000 earley_forest.py:390(__init__)
        2    0.000    0.000    0.000    0.000 utils.py:131(check_valid_cell_location)
        1    0.000    0.000    0.000    0.000 earley_forest.py:591(transform_intermediate_node)
        1    0.000    0.000    0.000    0.000 Sheet.py:104(set_cell_value)
        1    0.000    0.000    0.004    0.004 lark.py:640(parse)
        1    0.000    0.000    0.000    0.000 visitors.py:421(_visit_tree)
        1    0.000    0.000    0.000    0.000 visitors.py:444(inner)
        8    0.000    0.000    0.000    0.000 {built-in method builtins.hasattr}
        1    0.000    0.000    0.000    0.000 Workbook.py:714(clean_children_cells)
        1    0.000    0.000    0.000    0.000 Cell.py:65(set_contents)
        1    0.000    0.000    0.000    0.000 parse_tree_builder.py:145(__call__)
        1    0.000    0.000    0.000    0.000 Parser.py:40(fix_formula)
        3    0.000    0.000    0.000    0.000 utils.py:354(__bool__)
        3    0.000    0.000    0.000    0.000 {method 'group' of 're.Match' objects}
        1    0.000    0.000    0.000    0.000 {method 'sub' of 're.Pattern' objects}
        1    0.000    0.000    0.000    0.000 parser_frontends.py:86(_verify_start)
        2    0.000    0.000    0.000    0.000 {built-in method _abc._abc_instancecheck}
        1    0.000    0.000    0.000    0.000 lark.py:220(__getattr__)
        1    0.000    0.000    0.000    0.000 visitors.py:429(visit_children)
        1    0.000    0.000    0.000    0.000 visitors.py:415(visit)
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
        3    0.000    0.000    0.000    0.000 {method 'end' of 're.Match' objects}
        1    0.000    0.000    0.000    0.000 {method 'update' of 'dict' objects}
        1    0.000    0.000    0.000    0.000 utils.py:212(is_formula)
        1    0.000    0.000    0.000    0.000 earley_forest.py:447(visit_intermediate_node_out)
        1    0.000    0.000    0.000    0.000 {method 'split' of 'str' objects}
        1    0.000    0.000    0.000    0.000 utils.py:295(get_highest_precedence_error)
        1    0.000    0.000    0.000    0.000 Cell.py:131(set_children)
        1    0.000    0.000    0.000    0.000 visitors.py:430(<listcomp>)
        1    0.000    0.000    0.000    0.000 {method 'quantize' of 'decimal.Decimal' objects}
        1    0.000    0.000    0.000    0.000 Parser.py:108(get_cell_refs)
        1    0.000    0.000    0.000    0.000 tree.py:61(__init__)
        3    0.000    0.000    0.000    0.000 earley_forest.py:207(__hash__)
        1    0.000    0.000    0.000    0.000 earley_forest.py:232(__init__)
        1    0.000    0.000    0.000    0.000 {method 'to_integral' of 'decimal.Decimal' objects}
        1    0.000    0.000    0.000    0.000 Cell.py:59(cache_formula)
        2    0.000    0.000    0.000    0.000 {built-in method builtins.ord}
        1    0.000    0.000    0.000    0.000 grammar.py:15(__init__)
        2    0.000    0.000    0.000    0.000 earley_forest.py:418(transform_token_node)
        1    0.000    0.000    0.000    0.000 Cell.py:62(get_cached_formula)
        1    0.000    0.000    0.000    0.000 Cell.py:135(get_children)
        1    0.000    0.000    0.000    0.000 {method 'lstrip' of 'str' objects}
        1    0.000    0.000    0.000    0.000 {method 'rstrip' of 'str' objects}
        1    0.000    0.000    0.000    0.000 {method 'upper' of 'str' objects}
        1    0.000    0.000    0.000    0.000 {method 'is_finite' of 'decimal.Decimal' objects}



##################Running pro_update_formula_pyramid... #######################
for test <function pro_update_formula_pyramid at 0x0000017F1670AEE0> total time: 0.0012849000000000003
Total Logs
         233 function calls (221 primitive calls) in 0.000 seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000    0.000    0.000 Graph.py:330(tarjans)
        2    0.000    0.000    0.000    0.000 Cell.py:81(set_cell_value)
        1    0.000    0.000    0.000    0.000 Workbook.py:727(set_cell_contents)
        2    0.000    0.000    0.000    0.000 Workbook.py:582(recompute_cell_value)
        3    0.000    0.000    0.000    0.000 lexer.py:265(__eq__)
      4/1    0.000    0.000    0.000    0.000 visitors.py:421(_visit_tree)
        1    0.000    0.000    0.000    0.000 Workbook.py:638(recompute_cell_and_parents)
        5    0.000    0.000    0.000    0.000 Sheet.py:93(get_cell_value)
      4/1    0.000    0.000    0.000    0.000 visitors.py:444(inner)
        8    0.000    0.000    0.000    0.000 {built-in method builtins.getattr}
        1    0.000    0.000    0.000    0.000 typing.py:868(__new__)
        1    0.000    0.000    0.000    0.000 utils.py:179(convert_location_to_idx)
        2    0.000    0.000    0.000    0.000 utils.py:207(remove_exponent)
        1    0.000    0.000    0.000    0.000 Workbook.py:544(get_formula_value)
        4    0.000    0.000    0.000    0.000 Parser.py:40(fix_formula)
      4/1    0.000    0.000    0.000    0.000 visitors.py:430(<listcomp>)
        1    0.000    0.000    0.000    0.000 Parser.py:253(cell)
        1    0.000    0.000    0.000    0.000 Parser.py:211(mul_expr)
        1    0.000    0.000    0.000    0.000 Sheet.py:60(set_cell_contents)
        3    0.000    0.000    0.000    0.000 re.py:289(_compile)
       21    0.000    0.000    0.000    0.000 {built-in method builtins.isinstance}
        1    0.000    0.000    0.000    0.000 utils.py:307(error_matcher)
      4/1    0.000    0.000    0.000    0.000 visitors.py:429(visit_children)
       31    0.000    0.000    0.000    0.000 {method 'lower' of 'str' objects}
        2    0.000    0.000    0.000    0.000 re.py:188(match)
        8    0.000    0.000    0.000    0.000 utils.py:78(get_hidden_name)
        4    0.000    0.000    0.000    0.000 utils.py:295(get_highest_precedence_error)
        1    0.000    0.000    0.000    0.000 re.py:203(sub)
       10    0.000    0.000    0.000    0.000 {method 'get' of 'dict' objects}
       10    0.000    0.000    0.000    0.000 {method 'append' of 'list' objects}
        4    0.000    0.000    0.000    0.000 Graph.py:137(get_parents_from_cell)
        1    0.000    0.000    0.000    0.000 Sheet.py:124(update_extent)
        2    0.000    0.000    0.000    0.000 Workbook.py:575(get_cell_from_location)
        1    0.000    0.000    0.000    0.000 Workbook.py:806(get_cell_value)
        1    0.000    0.000    0.000    0.000 {method 'sub' of 're.Pattern' objects}
        1    0.000    0.000    0.000    0.000 Parser.py:97(__init__)
        2    0.000    0.000    0.000    0.000 Workbook.py:540(get_sheet_name_from_hidden)
        1    0.000    0.000    0.000    0.000 cProfile.py:134(__exit__)
        2    0.000    0.000    0.000    0.000 utils.py:131(check_valid_cell_location)
        1    0.000    0.000    0.000    0.000 Workbook.py:35(run_func)
        3    0.000    0.000    0.000    0.000 utils.py:212(is_formula)
        1    0.000    0.000    0.000    0.000 Cell.py:65(set_contents)
        2    0.000    0.000    0.000    0.000 {method 'match' of 're.Pattern' objects}
        6    0.000    0.000    0.000    0.000 {method 'pop' of 'list' objects}
        1    0.000    0.000    0.000    0.000 Parser.py:243(number)
        1    0.000    0.000    0.000    0.000 Sheet.py:104(set_cell_value)
        4    0.000    0.000    0.000    0.000 Sheet.py:120(get_cell)
        2    0.000    0.000    0.000    0.000 {method 'quantize' of 'decimal.Decimal' objects}
        1    0.000    0.000    0.000    0.000 Workbook.py:714(clean_children_cells)
        2    0.000    0.000    0.000    0.000 {method 'join' of 'str' objects}
       10    0.000    0.000    0.000    0.000 {method 'strip' of 'str' objects}
        2    0.000    0.000    0.000    0.000 {method 'to_integral' of 'decimal.Decimal' objects}
        1    0.000    0.000    0.000    0.000 visitors.py:415(visit)
       12    0.000    0.000    0.000    0.000 {built-in method builtins.len}
        2    0.000    0.000    0.000    0.000 Cell.py:135(get_children)
        5    0.000    0.000    0.000    0.000 Cell.py:125(get_value)
        2    0.000    0.000    0.000    0.000 Cell.py:62(get_cached_formula)
        3    0.000    0.000    0.000    0.000 Cell.py:128(get_contents)
        2    0.000    0.000    0.000    0.000 {method 'is_finite' of 'decimal.Decimal' objects}
        1    0.000    0.000    0.000    0.000 Cell.py:131(set_children)
        1    0.000    0.000    0.000    0.000 {built-in method __new__ of type object at 0x00007FFB2480DCB0}
        2    0.000    0.000    0.000    0.000 Sheet.py:54(get_sheet_name)
        1    0.000    0.000    0.000    0.000 Parser.py:108(get_cell_refs)
        1    0.000    0.000    0.000    0.000 Parser.py:111(parens)
        1    0.000    0.000    0.000    0.000 {method 'add' of 'set' objects}
        1    0.000    0.000    0.000    0.000 {method 'upper' of 'str' objects}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
        1    0.000    0.000    0.000    0.000 {method 'lstrip' of 'str' objects}
        1    0.000    0.000    0.000    0.000 {method 'rstrip' of 'str' objects}
        2    0.000    0.000    0.000    0.000 {built-in method builtins.ord}



##################Running pro_write_formula_pyramid... #######################
for test <function pro_write_formula_pyramid at 0x0000017F16729040> total time: 3.8289512999999973
Total Logs
         798561 function calls (798303 primitive calls) in 0.391 seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
      401    0.113    0.000    0.347    0.001 earley.py:78(predict_and_complete)
    68211    0.077    0.000    0.113    0.000 earley_common.py:9(__init__)
149508/149262    0.032    0.000    0.040    0.000 {built-in method builtins.hash}
    45585    0.027    0.000    0.044    0.000 utils.py:345(add)
    61023    0.020    0.000    0.020    0.000 earley_common.py:28(__eq__)
    79530    0.019    0.000    0.027    0.000 grammar.py:25(__hash__)
    26767    0.016    0.000    0.027    0.000 utils.py:342(__contains__)
      400    0.009    0.000    0.028    0.000 xearley.py:41(scan)
    75516    0.009    0.000    0.009    0.000 earley_common.py:31(__hash__)
    70326    0.008    0.000    0.008    0.000 grammar.py:121(__hash__)
     9786    0.007    0.000    0.012    0.000 grammar.py:18(__eq__)
    68615    0.007    0.000    0.007    0.000 {method 'append' of 'list' objects}
    70044    0.006    0.000    0.006    0.000 {built-in method builtins.len}
     2965    0.003    0.000    0.004    0.000 typing.py:868(__new__)
     5836    0.003    0.000    0.004    0.000 lexer.py:265(__eq__)
      732    0.003    0.000    0.006    0.000 earley_forest.py:50(__init__)
    17294    0.002    0.000    0.002    0.000 {built-in method builtins.isinstance}
     2862    0.002    0.000    0.003    0.000 {built-in method fromkeys}
     4006    0.002    0.000    0.002    0.000 {method 'match' of 're.Pattern' objects}
     3906    0.002    0.000    0.004    0.000 parser_frontends.py:184(match)
       99    0.002    0.000    0.377    0.004 xearley.py:39(_parse)
     2862    0.002    0.000    0.004    0.000 utils.py:339(__init__)
       99    0.001    0.000    0.387    0.004 Workbook.py:638(recompute_cell_and_parents)
      734    0.001    0.000    0.003    0.000 earley_forest.py:64(add_family)
       99    0.001    0.000    0.384    0.004 Workbook.py:544(get_formula_value)
      122    0.001    0.000    0.004    0.000 earley.py:135(<listcomp>)
     3266    0.001    0.000    0.001    0.000 {built-in method __new__ of type object at 0x00007FFB2480DCB0}
       99    0.001    0.000    0.381    0.004 earley.py:262(parse)
      734    0.001    0.000    0.001    0.000 earley_forest.py:131(__init__)
       99    0.001    0.000    0.390    0.004 Workbook.py:727(set_cell_contents)
      734    0.001    0.000    0.003    0.000 earley_common.py:25(advance)
     1784    0.001    0.000    0.001    0.000 utils.py:348(__iter__)
       98    0.001    0.000    0.001    0.000 exceptions.py:55(get_context)
       98    0.001    0.000    0.001    0.000 exceptions.py:179(__init__)
      397    0.001    0.000    0.001    0.000 Sheet.py:93(get_cell_value)
     3833    0.001    0.000    0.001    0.000 {method 'pop' of 'collections.deque' objects}
      301    0.001    0.000    0.001    0.000 lexer.py:213(_future_new)
      142    0.000    0.000    0.001    0.000 {built-in method builtins.sorted}
       99    0.000    0.000    0.002    0.000 Sheet.py:60(set_cell_contents)
        1    0.000    0.000    0.002    0.002 earley_forest.py:283(visit)
       99    0.000    0.000    0.001    0.000 utils.py:179(convert_location_to_idx)
     3532    0.000    0.000    0.000    0.000 {method 'append' of 'collections.deque' objects}
      754    0.000    0.000    0.000    0.000 {method 'setdefault' of 'dict' objects}
      198    0.000    0.000    0.001    0.000 Cell.py:81(set_cell_value)
       99    0.000    0.000    0.382    0.004 parser_frontends.py:100(parse)
       99    0.000    0.000    0.000    0.000 parser_frontends.py:96(_make_lexer_thread)
     1828    0.000    0.000    0.000    0.000 {built-in method builtins.iter}
      301    0.000    0.000    0.001    0.000 lexer.py:202(__new__)
      298    0.000    0.000    0.000    0.000 {method 'join' of 'str' objects}
      301    0.000    0.000    0.000    0.000 earley_forest.py:193(__init__)
       99    0.000    0.000    0.000    0.000 profiler.py:25(convert_to_excel_coordinates)
       99    0.000    0.000    0.000    0.000 Parser.py:97(__init__)
      499    0.000    0.000    0.000    0.000 utils.py:354(__bool__)
       99    0.000    0.000    0.391    0.004 Workbook.py:35(run_func)
       99    0.000    0.000    0.001    0.000 Sheet.py:104(set_cell_value)
      793    0.000    0.000    0.000    0.000 {method 'get' of 'dict' objects}
      898    0.000    0.000    0.000    0.000 {method 'lower' of 'str' objects}
       99    0.000    0.000    0.382    0.004 lark.py:640(parse)
       99    0.000    0.000    0.000    0.000 Cell.py:65(set_contents)
       99    0.000    0.000    0.000    0.000 Cell.py:46(__init__)
       99    0.000    0.000    0.000    0.000 Sheet.py:124(update_extent)
       99    0.000    0.000    0.000    0.000 Workbook.py:540(get_sheet_name_from_hidden)
      301    0.000    0.000    0.000    0.000 {method 'group' of 're.Match' objects}
      101    0.000    0.000    0.000    0.000 re.py:289(_compile)
       98    0.000    0.000    0.000    0.000 xearley.py:125(<setcomp>)
      100    0.000    0.000    0.001    0.000 utils.py:131(check_valid_cell_location)
      734    0.000    0.000    0.000    0.000 earley_forest.py:169(__hash__)
      392    0.000    0.000    0.000    0.000 xearley.py:124(<lambda>)
      100    0.000    0.000    0.000    0.000 re.py:188(match)
       45    0.000    0.000    0.000    0.000 earley_forest.py:437(_visit_node_out_helper)
      200    0.000    0.000    0.000    0.000 utils.py:78(get_hidden_name)
      380    0.000    0.000    0.000    0.000 {built-in method builtins.next}
      490    0.000    0.000    0.000    0.000 xearley.py:126(<genexpr>)
      198    0.000    0.000    0.000    0.000 {built-in method _heapq.heappush}
      198    0.000    0.000    0.000    0.000 Sheet.py:120(get_cell)
      439    0.000    0.000    0.000    0.000 earley_forest.py:101(__hash__)
       98    0.000    0.000    0.000    0.000 {built-in method builtins.max}
       23    0.000    0.000    0.000    0.000 earley_forest.py:603(transform_packed_node)
       99    0.000    0.000    0.000    0.000 parser_frontends.py:86(_verify_start)
       99    0.000    0.000    0.000    0.000 Graph.py:330(tarjans)
       99    0.000    0.000    0.000    0.000 Workbook.py:714(clean_children_cells)
       98    0.000    0.000    0.000    0.000 CellError.py:11(__init__)
       99    0.000    0.000    0.000    0.000 lark.py:220(__getattr__)
       98    0.000    0.000    0.000    0.000 {method 'rsplit' of 'str' objects}
       99    0.000    0.000    0.000    0.000 utils.py:212(is_formula)
      396    0.000    0.000    0.000    0.000 {method 'strip' of 'str' objects}
       99    0.000    0.000    0.000    0.000 {method 'split' of 'str' objects}
      296    0.000    0.000    0.000    0.000 Cell.py:128(get_contents)
      301    0.000    0.000    0.000    0.000 earley_forest.py:207(__hash__)
      303    0.000    0.000    0.000    0.000 {method 'end' of 're.Match' objects}
      298    0.000    0.000    0.000    0.000 Cell.py:125(get_value)
      499    0.000    0.000    0.000    0.000 {built-in method builtins.id}
      142    0.000    0.000    0.000    0.000 utils.py:357(__len__)
       99    0.000    0.000    0.000    0.000 Cell.py:131(set_children)
       17    0.000    0.000    0.000    0.000 earley_forest.py:581(transform_symbol_node)
      114    0.000    0.000    0.000    0.000 {method 'add' of 'set' objects}
       23    0.000    0.000    0.000    0.000 earley_forest.py:631(visit_packed_node_in)
       23    0.000    0.000    0.000    0.000 earley_forest.py:638(visit_packed_node_out)
       99    0.000    0.000    0.000    0.000 grammar.py:15(__init__)
       44    0.000    0.000    0.000    0.000 earley_forest.py:85(children)
       98    0.000    0.000    0.000    0.000 {method 'expandtabs' of 'str' objects}
       99    0.000    0.000    0.000    0.000 {built-in method builtins.divmod}
       22    0.000    0.000    0.000    0.000 earley_forest.py:422(visit_symbol_node_in)
      198    0.000    0.000    0.000    0.000 {built-in method builtins.ord}
       46    0.000    0.000    0.000    0.000 earley_forest.py:145(sort_key)
       99    0.000    0.000    0.000    0.000 Cell.py:62(get_cached_formula)
       17    0.000    0.000    0.000    0.000 earley_forest.py:565(_call_rule_func)
       23    0.000    0.000    0.000    0.000 earley_forest.py:427(visit_packed_node_in)
       22    0.000    0.000    0.000    0.000 earley_forest.py:625(visit_symbol_node_in)
       99    0.000    0.000    0.000    0.000 {method 'upper' of 'str' objects}
       99    0.000    0.000    0.000    0.000 {method 'lstrip' of 'str' objects}
       99    0.000    0.000    0.000    0.000 Sheet.py:54(get_sheet_name)
       17    0.000    0.000    0.000    0.000 earley_forest.py:556(_collapse_ambig)
       99    0.000    0.000    0.000    0.000 {built-in method builtins.chr}
       22    0.000    0.000    0.000    0.000 earley_forest.py:499(__init__)
       99    0.000    0.000    0.000    0.000 {method 'rstrip' of 'str' objects}
       23    0.000    0.000    0.000    0.000 earley_forest.py:155(children)
       23    0.000    0.000    0.000    0.000 earley_forest.py:450(visit_packed_node_out)
       14    0.000    0.000    0.000    0.000 parse_tree_builder.py:20(__call__)
       67    0.000    0.000    0.000    0.000 {method 'remove' of 'set' objects}
       17    0.000    0.000    0.000    0.000 earley_forest.py:571(_call_ambig_func)
       22    0.000    0.000    0.000    0.000 earley_forest.py:70(load_paths)
       46    0.000    0.000    0.000    0.000 earley_forest.py:141(is_empty)
       17    0.000    0.000    0.000    0.000 earley_forest.py:444(visit_symbol_node_out)
       16    0.000    0.000    0.000    0.000 {built-in method builtins.getattr}
        5    0.000    0.000    0.000    0.000 earley_forest.py:591(transform_intermediate_node)
       45    0.000    0.000    0.000    0.000 earley_forest.py:548(_check_cycle)
       23    0.000    0.000    0.000    0.000 earley_forest.py:158(<listcomp>)
        6    0.000    0.000    0.000    0.000 earley_forest.py:432(visit_token_node)
        1    0.000    0.000    0.000    0.000 Parser.py:253(cell)
      4/1    0.000    0.000    0.000    0.000 visitors.py:444(inner)
      4/1    0.000    0.000    0.000    0.000 visitors.py:421(_visit_tree)
       45    0.000    0.000    0.000    0.000 {method 'pop' of 'list' objects}
        4    0.000    0.000    0.000    0.000 Parser.py:40(fix_formula)
        2    0.000    0.000    0.000    0.000 parse_tree_builder.py:145(__call__)
        1    0.000    0.000    0.002    0.002 earley_forest.py:535(visit)
      4/1    0.000    0.000    0.000    0.000 visitors.py:430(<listcomp>)
        1    0.000    0.000    0.000    0.000 Workbook.py:687(_get_sheet_name_location)
        1    0.000    0.000    0.000    0.000 Parser.py:211(mul_expr)
      4/1    0.000    0.000    0.000    0.000 visitors.py:429(visit_children)
        1    0.000    0.000    0.000    0.000 Parser.py:243(number)
       17    0.000    0.000    0.000    0.000 {built-in method builtins.hasattr}
        1    0.000    0.000    0.000    0.000 earley_forest.py:523(__init__)
        1    0.000    0.000    0.000    0.000 cProfile.py:134(__exit__)
        1    0.000    0.000    0.000    0.000 re.py:203(sub)
        5    0.000    0.000    0.000    0.000 earley_forest.py:447(visit_intermediate_node_out)
        1    0.000    0.000    0.000    0.000 utils.py:207(remove_exponent)
        1    0.000    0.000    0.000    0.000 Workbook.py:806(get_cell_value)
        1    0.000    0.000    0.000    0.000 Graph.py:68(add_connection)
        1    0.000    0.000    0.002    0.002 earley_forest.py:397(transform)
        1    0.000    0.000    0.000    0.000 earley.py:284(<listcomp>)
        1    0.000    0.000    0.000    0.000 Workbook.py:700(add_children_cells)
        1    0.000    0.000    0.000    0.000 earley_forest.py:390(__init__)
        1    0.000    0.000    0.000    0.000 abc.py:96(__instancecheck__)
        4    0.000    0.000    0.000    0.000 utils.py:295(get_highest_precedence_error)
        4    0.000    0.000    0.000    0.000 tree.py:61(__init__)
        1    0.000    0.000    0.000    0.000 {method 'sub' of 're.Pattern' objects}
        6    0.000    0.000    0.000    0.000 earley_forest.py:418(transform_token_node)
        1    0.000    0.000    0.000    0.000 {built-in method _abc._abc_instancecheck}
        1    0.000    0.000    0.000    0.000 xearley.py:85(<listcomp>)
        1    0.000    0.000    0.000    0.000 visitors.py:415(visit)
        1    0.000    0.000    0.000    0.000 {method 'update' of 'dict' objects}
        1    0.000    0.000    0.000    0.000 {method 'to_integral' of 'decimal.Decimal' objects}
        1    0.000    0.000    0.000    0.000 xearley.py:88(<listcomp>)
        1    0.000    0.000    0.000    0.000 {method 'quantize' of 'decimal.Decimal' objects}
        1    0.000    0.000    0.000    0.000 earley_forest.py:232(__init__)
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
        1    0.000    0.000    0.000    0.000 Parser.py:108(get_cell_refs)
        2    0.000    0.000    0.000    0.000 {method 'extend' of 'list' objects}
        1    0.000    0.000    0.000    0.000 Cell.py:59(cache_formula)
        1    0.000    0.000    0.000    0.000 Parser.py:111(parens)
        1    0.000    0.000    0.000    0.000 {method 'is_finite' of 'decimal.Decimal' objects}



##################Running pro_cycle_formula_pyramid... #######################
for test <function pro_cycle_formula_pyramid at 0x0000017F16729160> total time: 2.6237751000000005
Total Logs
         368252 function calls (365814 primitive calls) in 0.278 seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.045    0.045    0.051    0.051 Graph.py:330(tarjans)
      400    0.036    0.000    0.139    0.000 earley.py:78(predict_and_complete)
    12865    0.018    0.000    0.027    0.000 earley_common.py:9(__init__)
        1    0.015    0.015    0.055    0.055 earley_forest.py:283(visit)
    12158    0.010    0.000    0.019    0.000 grammar.py:18(__eq__)
35778/34144    0.010    0.000    0.013    0.000 {built-in method builtins.hash}
    12186    0.008    0.000    0.012    0.000 utils.py:345(add)
     1828    0.008    0.000    0.021    0.000 earley_forest.py:50(__init__)
      399    0.008    0.000    0.024    0.000 xearley.py:41(scan)
     5058    0.006    0.000    0.008    0.000 typing.py:868(__new__)
      816    0.006    0.000    0.022    0.000 earley.py:135(<listcomp>)
    11930    0.006    0.000    0.008    0.000 lexer.py:265(__eq__)
    18951    0.006    0.000    0.008    0.000 grammar.py:25(__hash__)
     4855    0.005    0.000    0.006    0.000 {built-in method fromkeys}
    20101    0.005    0.000    0.005    0.000 {built-in method builtins.min}
    34782    0.005    0.000    0.005    0.000 {built-in method builtins.isinstance}
     8674    0.003    0.000    0.003    0.000 earley_common.py:28(__eq__)
     1430    0.003    0.000    0.014    0.000 earley_forest.py:437(_visit_node_out_helper)
    12254    0.003    0.000    0.003    0.000 {built-in method builtins.next}
      715    0.003    0.000    0.006    0.000 earley_forest.py:603(transform_packed_node)
     4855    0.003    0.000    0.008    0.000 utils.py:339(__init__)
     1430    0.003    0.000    0.006    0.000 {built-in method builtins.sorted}
     1830    0.003    0.000    0.008    0.000 earley_forest.py:64(add_family)
     3970    0.003    0.000    0.004    0.000 utils.py:342(__contains__)
     1830    0.002    0.000    0.004    0.000 earley_forest.py:131(__init__)
    16778    0.002    0.000    0.002    0.000 earley_common.py:31(__hash__)
    15595    0.002    0.000    0.002    0.000 grammar.py:121(__hash__)
    16929    0.002    0.000    0.002    0.000 {method 'append' of 'list' objects}
     1830    0.002    0.000    0.008    0.000 earley_common.py:25(advance)
    15933    0.002    0.000    0.002    0.000 {built-in method builtins.id}
     4162    0.002    0.000    0.003    0.000 utils.py:348(__iter__)
    18279    0.002    0.000    0.002    0.000 {built-in method builtins.len}
     2952    0.002    0.000    0.002    0.000 {method 'match' of 're.Pattern' objects}
      715    0.002    0.000    0.002    0.000 earley_forest.py:158(<listcomp>)
     5362    0.002    0.000    0.002    0.000 {built-in method __new__ of type object at 0x00007FFB2480DCB0}
     2851    0.002    0.000    0.003    0.000 parser_frontends.py:184(match)
     1430    0.002    0.000    0.009    0.000 earley_forest.py:85(children)
      715    0.002    0.000    0.006    0.000 earley_forest.py:631(visit_packed_node_in)
        1    0.001    0.001    0.165    0.165 xearley.py:39(_parse)
     2543    0.001    0.000    0.002    0.000 {method 'setdefault' of 'dict' objects}
      512    0.001    0.000    0.003    0.000 earley_forest.py:581(transform_symbol_node)
      715    0.001    0.000    0.007    0.000 earley_forest.py:422(visit_symbol_node_in)
      715    0.001    0.000    0.011    0.000 earley_forest.py:625(visit_symbol_node_in)
      715    0.001    0.000    0.004    0.000 earley_forest.py:427(visit_packed_node_in)
      715    0.001    0.000    0.010    0.000 earley_forest.py:638(visit_packed_node_out)
     1430    0.001    0.000    0.002    0.000 earley_forest.py:145(sort_key)
     5592    0.001    0.000    0.001    0.000 {built-in method builtins.iter}
     3675    0.001    0.000    0.001    0.000 {method 'add' of 'set' objects}
     6244    0.001    0.000    0.001    0.000 {method 'pop' of 'collections.deque' objects}
      715    0.001    0.000    0.001    0.000 earley_forest.py:70(load_paths)
     5940    0.001    0.000    0.001    0.000 {method 'append' of 'collections.deque' objects}
      715    0.001    0.000    0.002    0.000 earley_forest.py:155(children)
      512    0.001    0.000    0.002    0.000 earley_forest.py:565(_call_rule_func)
      512    0.001    0.000    0.001    0.000 earley_forest.py:556(_collapse_ambig)
      715    0.001    0.000    0.001    0.000 earley_forest.py:499(__init__)
        1    0.001    0.001    0.221    0.221 parser_frontends.py:100(parse)
     1430    0.001    0.000    0.001    0.000 earley_forest.py:141(is_empty)
      304    0.000    0.000    0.001    0.000 lexer.py:213(_future_new)
     1430    0.000    0.000    0.001    0.000 utils.py:357(__len__)
     2145    0.000    0.000    0.000    0.000 {method 'remove' of 'set' objects}
      715    0.000    0.000    0.009    0.000 earley_forest.py:450(visit_packed_node_out)
     1829    0.000    0.000    0.000    0.000 earley_forest.py:101(__hash__)
      412    0.000    0.000    0.001    0.000 {built-in method builtins.getattr}
      304    0.000    0.000    0.001    0.000 lexer.py:202(__new__)
      203    0.000    0.000    0.000    0.000 earley_forest.py:591(transform_intermediate_node)
    202/1    0.000    0.000    0.004    0.004 visitors.py:430(<listcomp>)
     1830    0.000    0.000    0.000    0.000 earley_forest.py:169(__hash__)
      410    0.000    0.000    0.001    0.000 parse_tree_builder.py:20(__call__)
      100    0.000    0.000    0.001    0.000 Parser.py:253(cell)
      512    0.000    0.000    0.005    0.000 earley_forest.py:444(visit_symbol_node_out)
    202/1    0.000    0.000    0.004    0.004 visitors.py:421(_visit_tree)
     1730    0.000    0.000    0.000    0.000 {method 'pop' of 'list' objects}
        1    0.000    0.000    0.001    0.001 Workbook.py:616(_set_cycle_detected)
      304    0.000    0.000    0.000    0.000 earley_forest.py:193(__init__)
    202/1    0.000    0.000    0.004    0.004 visitors.py:444(inner)
     1430    0.000    0.000    0.000    0.000 earley_forest.py:548(_check_cycle)
    202/1    0.000    0.000    0.004    0.004 visitors.py:429(visit_children)
      204    0.000    0.000    0.000    0.000 earley_forest.py:432(visit_token_node)
      100    0.000    0.000    0.000    0.000 Workbook.py:687(_get_sheet_name_location)
      512    0.000    0.000    0.000    0.000 earley_forest.py:571(_call_ambig_func)
      400    0.000    0.000    0.000    0.000 utils.py:354(__bool__)
      100    0.000    0.000    0.000    0.000 Graph.py:68(add_connection)
      100    0.000    0.000    0.001    0.000 Workbook.py:806(get_cell_value)
      200    0.000    0.000    0.000    0.000 Graph.py:137(get_parents_from_cell)
      202    0.000    0.000    0.002    0.000 Parser.py:40(fix_formula)
       99    0.000    0.000    0.000    0.000 Parser.py:169(add_expr)
     1010    0.000    0.000    0.000    0.000 {method 'lower' of 'str' objects}
      403    0.000    0.000    0.000    0.000 utils.py:78(get_hidden_name)
      304    0.000    0.000    0.000    0.000 {method 'group' of 're.Match' objects}
        1    0.000    0.000    0.001    0.001 Workbook.py:700(add_children_cells)
      104    0.000    0.000    0.000    0.000 Sheet.py:93(get_cell_value)
      102    0.000    0.000    0.000    0.000 Cell.py:81(set_cell_value)
      201    0.000    0.000    0.000    0.000 re.py:289(_compile)
      203    0.000    0.000    0.001    0.000 earley_forest.py:447(visit_intermediate_node_out)
      202    0.000    0.000    0.000    0.000 utils.py:295(get_highest_precedence_error)
      202    0.000    0.000    0.000    0.000 tree.py:61(__init__)
      512    0.000    0.000    0.000    0.000 {built-in method builtins.hasattr}
      101    0.000    0.000    0.000    0.000 re.py:188(match)
        1    0.000    0.000    0.055    0.055 earley_forest.py:535(visit)
      100    0.000    0.000    0.000    0.000 re.py:203(sub)
      204    0.000    0.000    0.000    0.000 Cell.py:125(get_value)
      100    0.000    0.000    0.000    0.000 {method 'sub' of 're.Pattern' objects}
      100    0.000    0.000    0.000    0.000 Workbook.py:575(get_cell_from_location)
      101    0.000    0.000    0.000    0.000 utils.py:131(check_valid_cell_location)
      304    0.000    0.000    0.000    0.000 earley_forest.py:207(__hash__)
      306    0.000    0.000    0.000    0.000 {method 'end' of 're.Match' objects}
      208    0.000    0.000    0.000    0.000 {method 'get' of 'dict' objects}
      102    0.000    0.000    0.000    0.000 Workbook.py:540(get_sheet_name_from_hidden)
        1    0.000    0.000    0.220    0.220 earley.py:262(parse)
        1    0.000    0.000    0.277    0.277 Workbook.py:638(recompute_cell_and_parents)
      100    0.000    0.000    0.000    0.000 CellError.py:11(__init__)
      100    0.000    0.000    0.000    0.000 {method 'split' of 'str' objects}
      102    0.000    0.000    0.000    0.000 Sheet.py:120(get_cell)
      204    0.000    0.000    0.000    0.000 earley_forest.py:418(transform_token_node)
      102    0.000    0.000    0.000    0.000 Cell.py:128(get_contents)
      103    0.000    0.000    0.000    0.000 {method 'join' of 'str' objects}
        1    0.000    0.000    0.225    0.225 Workbook.py:544(get_formula_value)
        1    0.000    0.000    0.278    0.278 Workbook.py:727(set_cell_contents)
      105    0.000    0.000    0.000    0.000 {method 'strip' of 'str' objects}
      102    0.000    0.000    0.000    0.000 Sheet.py:54(get_sheet_name)
        1    0.000    0.000    0.000    0.000 utils.py:179(convert_location_to_idx)
        1    0.000    0.000    0.278    0.278 Workbook.py:35(run_func)
        1    0.000    0.000    0.000    0.000 earley_forest.py:523(__init__)
        2    0.000    0.000    0.000    0.000 parse_tree_builder.py:145(__call__)
        1    0.000    0.000    0.000    0.000 Parser.py:211(mul_expr)
        1    0.000    0.000    0.000    0.000 parser_frontends.py:96(_make_lexer_thread)
        1    0.000    0.000    0.000    0.000 cProfile.py:134(__exit__)
        1    0.000    0.000    0.055    0.055 earley_forest.py:397(transform)
        1    0.000    0.000    0.000    0.000 Parser.py:243(number)
        1    0.000    0.000    0.000    0.000 earley.py:284(<listcomp>)
        1    0.000    0.000    0.000    0.000 utils.py:207(remove_exponent)
        1    0.000    0.000    0.000    0.000 Sheet.py:60(set_cell_contents)
        1    0.000    0.000    0.000    0.000 Parser.py:97(__init__)
        1    0.000    0.000    0.000    0.000 earley_forest.py:390(__init__)
        1    0.000    0.000    0.000    0.000 Sheet.py:104(set_cell_value)
        2    0.000    0.000    0.000    0.000 {built-in method _abc._abc_instancecheck}
        1    0.000    0.000    0.221    0.221 lark.py:640(parse)
        1    0.000    0.000    0.000    0.000 xearley.py:85(<listcomp>)
        2    0.000    0.000    0.000    0.000 abc.py:96(__instancecheck__)
        1    0.000    0.000    0.000    0.000 Sheet.py:124(update_extent)
        1    0.000    0.000    0.000    0.000 Workbook.py:714(clean_children_cells)
        1    0.000    0.000    0.000    0.000 {method 'update' of 'dict' objects}
        1    0.000    0.000    0.000    0.000 parser_frontends.py:86(_verify_start)
        1    0.000    0.000    0.004    0.004 visitors.py:415(visit)
        1    0.000    0.000    0.000    0.000 Cell.py:65(set_contents)
        1    0.000    0.000    0.000    0.000 lark.py:220(__getattr__)
        1    0.000    0.000    0.000    0.000 {method 'to_integral' of 'decimal.Decimal' objects}
        1    0.000    0.000    0.000    0.000 Cell.py:59(cache_formula)
        1    0.000    0.000    0.000    0.000 Cell.py:131(set_children)
        1    0.000    0.000    0.000    0.000 {method 'normalize' of 'decimal.Decimal' objects}
        1    0.000    0.000    0.000    0.000 earley_forest.py:232(__init__)
        1    0.000    0.000    0.000    0.000 grammar.py:15(__init__)
        1    0.000    0.000    0.000    0.000 xearley.py:88(<listcomp>)
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
        2    0.000    0.000    0.000    0.000 {method 'extend' of 'list' objects}
        1    0.000    0.000    0.000    0.000 utils.py:212(is_formula)
        1    0.000    0.000    0.000    0.000 Parser.py:111(parens)
        1    0.000    0.000    0.000    0.000 Cell.py:62(get_cached_formula)
        1    0.000    0.000    0.000    0.000 Parser.py:108(get_cell_refs)
        1    0.000    0.000    0.000    0.000 {method 'upper' of 'str' objects}
        1    0.000    0.000    0.000    0.000 {method 'is_finite' of 'decimal.Decimal' objects}
        2    0.000    0.000    0.000    0.000 {built-in method builtins.ord}
        1    0.000    0.000    0.000    0.000 {method 'lstrip' of 'str' objects}
        1    0.000    0.000    0.000    0.000 Cell.py:135(get_children)
        1    0.000    0.000    0.000    0.000 {method 'rstrip' of 'str' objects}



##################Running pro_cycle_break_unbreak... #######################
for test <function pro_cycle_break_unbreak at 0x0000017F16729280> total time: 105.43097590000002
Total Logs
         13339464 function calls (13335700 primitive calls) in 20.227 seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
      198   12.388    0.063   12.802    0.065 Graph.py:330(tarjans)
    99000    0.678    0.000    5.477    0.000 Workbook.py:582(recompute_cell_value)
   198396    0.433    0.000    0.737    0.000 Cell.py:81(set_cell_value)
    99198    0.381    0.000    3.820    0.000 Workbook.py:544(get_formula_value)
    99000    0.333    0.000    1.374    0.000 Parser.py:253(cell)
       99    0.326    0.003    0.976    0.010 Workbook.py:616(_set_cycle_detected)
   297792    0.315    0.000    0.490    0.000 Sheet.py:93(get_cell_value)
   594693    0.244    0.000    0.331    0.000 utils.py:78(get_hidden_name)
   396000    0.207    0.000    0.207    0.000 Graph.py:137(get_parents_from_cell)
  1289475    0.198    0.000    0.198    0.000 {method 'lower' of 'str' objects}
   198000    0.194    0.000    0.436    0.000 Workbook.py:575(get_cell_from_location)
    99000    0.187    0.000    0.749    0.000 Workbook.py:806(get_cell_value)
  1086921    0.177    0.000    0.177    0.000 {built-in method builtins.isinstance}
      198    0.168    0.001   20.181    0.102 Workbook.py:638(recompute_cell_and_parents)
   198297    0.166    0.000    0.306    0.000 Workbook.py:540(get_sheet_name_from_hidden)
   108900    0.164    0.000    0.194    0.000 typing.py:868(__new__)
   199980    0.155    0.000    0.239    0.000 {built-in method builtins.getattr}
      990    0.154    0.000    0.511    0.001 earley.py:78(predict_and_complete)
    99198    0.151    0.000    0.151    0.000 Parser.py:97(__init__)
    99198    0.148    0.000    2.216    0.000 visitors.py:421(_visit_tree)
    99198    0.143    0.000    0.731    0.000 Sheet.py:104(set_cell_value)
   595584    0.138    0.000    0.138    0.000 {method 'get' of 'dict' objects}
   198198    0.124    0.000    0.174    0.000 re.py:289(_compile)
    99198    0.119    0.000    1.829    0.000 visitors.py:444(inner)
    99198    0.113    0.000    0.178    0.000 utils.py:207(remove_exponent)
    99198    0.098    0.000    1.536    0.000 Parser.py:40(fix_formula)
   396792    0.094    0.000    0.094    0.000 Cell.py:125(get_value)
    71082    0.088    0.000    0.132    0.000 earley_common.py:9(__init__)
   971288    0.087    0.000    0.087    0.000 {method 'append' of 'list' objects}
    99198    0.085    0.000    0.175    0.000 visitors.py:429(visit_children)
    99000    0.084    0.000    0.240    0.000 re.py:203(sub)
   134442    0.082    0.000    0.104    0.000 lexer.py:265(__eq__)
   198396    0.082    0.000    0.145    0.000 Sheet.py:120(get_cell)
    99198    0.081    0.000    0.243    0.000 re.py:188(match)
   103158    0.081    0.000    0.081    0.000 {method 'match' of 're.Pattern' objects}
    99000    0.077    0.000    0.077    0.000 CellError.py:11(__init__)
   297099    0.076    0.000    0.076    0.000 {built-in method builtins.min}
    99198    0.075    0.000    0.318    0.000 utils.py:131(check_valid_cell_location)
    99198    0.073    0.000    0.089    0.000 visitors.py:430(<listcomp>)
    99198    0.065    0.000    2.281    0.000 visitors.py:415(visit)
    99000    0.065    0.000    0.065    0.000 {method 'sub' of 're.Pattern' objects}
   297396    0.064    0.000    0.064    0.000 Cell.py:128(get_contents)
   480843    0.059    0.000    0.059    0.000 {built-in method builtins.len}
    99198    0.055    0.000    0.072    0.000 utils.py:212(is_formula)
   597564    0.054    0.000    0.054    0.000 {method 'pop' of 'list' objects}
   198198    0.052    0.000    0.052    0.000 Cell.py:62(get_cached_formula)
    99198    0.048    0.000    0.063    0.000 utils.py:295(get_highest_precedence_error)
168003/164241    0.042    0.000    0.053    0.000 {built-in method builtins.hash}
    99297    0.039    0.000    0.078    0.000 abc.py:96(__instancecheck__)
      198    0.039    0.000    0.135    0.001 earley_forest.py:283(visit)
    99297    0.039    0.000    0.039    0.000 {built-in method _abc._abc_instancecheck}
    99198    0.037    0.000    0.037    0.000 {method 'quantize' of 'decimal.Decimal' objects}
    51084    0.033    0.000    0.053    0.000 utils.py:345(add)
   198297    0.031    0.000    0.031    0.000 Sheet.py:54(get_sheet_name)
   109395    0.031    0.000    0.031    0.000 {built-in method __new__ of type object at 0x00007FFB2480DCB0}
    99198    0.031    0.000    0.031    0.000 Cell.py:131(set_children)
    99198    0.028    0.000    0.028    0.000 {method 'to_integral' of 'decimal.Decimal' objects}
   198990    0.028    0.000    0.028    0.000 {method 'strip' of 'str' objects}
    38511    0.028    0.000    0.051    0.000 grammar.py:18(__eq__)
    89496    0.025    0.000    0.035    0.000 grammar.py:25(__hash__)
   108009    0.023    0.000    0.023    0.000 {method 'add' of 'set' objects}
    99198    0.022    0.000    0.022    0.000 Parser.py:108(get_cell_refs)
    61182    0.022    0.000    0.022    0.000 earley_common.py:28(__eq__)
      198    0.019    0.000   20.227    0.102 Workbook.py:35(run_func)
    28413    0.018    0.000    0.031    0.000 utils.py:342(__contains__)
    99198    0.017    0.000    0.017    0.000 Cell.py:135(get_children)
      198    0.015    0.000   20.208    0.102 Workbook.py:727(set_cell_contents)
      792    0.015    0.000    0.047    0.000 xearley.py:41(scan)
     3366    0.014    0.000    0.032    0.000 earley_forest.py:50(__init__)
     1782    0.014    0.000    0.051    0.000 earley.py:135(<listcomp>)
    99198    0.013    0.000    0.013    0.000 {method 'is_finite' of 'decimal.Decimal' objects}
    75339    0.010    0.000    0.010    0.000 grammar.py:121(__hash__)
    79101    0.010    0.000    0.010    0.000 earley_common.py:31(__hash__)
     3564    0.008    0.000    0.036    0.000 earley_forest.py:437(_visit_node_out_helper)
     1881    0.008    0.000    0.017    0.000 earley_forest.py:603(transform_packed_node)
    29304    0.007    0.000    0.007    0.000 {built-in method builtins.next}
     3366    0.007    0.000    0.013    0.000 {built-in method builtins.sorted}
     9504    0.005    0.000    0.011    0.000 utils.py:339(__init__)
      198    0.005    0.000    0.714    0.004 earley.py:262(parse)
     9504    0.005    0.000    0.006    0.000 {built-in method fromkeys}
    39204    0.005    0.000    0.005    0.000 {built-in method builtins.id}
     3564    0.005    0.000    0.015    0.000 earley_forest.py:64(add_family)
     3564    0.005    0.000    0.008    0.000 earley_forest.py:131(__init__)
      198    0.004    0.000    0.563    0.003 xearley.py:39(_parse)
     1881    0.004    0.000    0.010    0.000 earley_forest.py:631(visit_packed_node_in)
     1485    0.003    0.000    0.008    0.000 earley_forest.py:581(transform_symbol_node)
     3564    0.003    0.000    0.014    0.000 earley_common.py:25(advance)
     3366    0.003    0.000    0.019    0.000 earley_forest.py:85(children)
     9603    0.003    0.000    0.005    0.000 utils.py:348(__iter__)
     1881    0.003    0.000    0.027    0.000 earley_forest.py:638(visit_packed_node_out)
     3960    0.003    0.000    0.006    0.000 parser_frontends.py:184(match)
     1485    0.003    0.000    0.005    0.000 earley_forest.py:565(_call_rule_func)
     1881    0.003    0.000    0.006    0.000 earley_forest.py:427(visit_packed_node_in)
     1683    0.003    0.000    0.015    0.000 earley_forest.py:422(visit_symbol_node_in)
     5049    0.003    0.000    0.004    0.000 {method 'setdefault' of 'dict' objects}
     1683    0.003    0.000    0.024    0.000 earley_forest.py:625(visit_symbol_node_in)
     3762    0.002    0.000    0.003    0.000 earley_forest.py:145(sort_key)
      198    0.002    0.000    0.719    0.004 parser_frontends.py:100(parse)
    16236    0.002    0.000    0.002    0.000 {method 'pop' of 'collections.deque' objects}
    12969    0.002    0.000    0.002    0.000 {built-in method builtins.iter}
      198    0.002    0.000    0.003    0.000 utils.py:179(convert_location_to_idx)
     1485    0.002    0.000    0.003    0.000 earley_forest.py:556(_collapse_ambig)
    15741    0.002    0.000    0.002    0.000 {method 'append' of 'collections.deque' objects}
     1683    0.002    0.000    0.002    0.000 earley_forest.py:499(__init__)
      198    0.002    0.000    0.002    0.000 parser_frontends.py:96(_make_lexer_thread)
     1881    0.002    0.000    0.002    0.000 earley_forest.py:155(children)
      198    0.002    0.000    0.002    0.000 Parser.py:243(number)
      495    0.001    0.000    0.002    0.000 lexer.py:213(_future_new)
     1881    0.001    0.000    0.024    0.000 earley_forest.py:450(visit_packed_node_out)
     5247    0.001    0.000    0.001    0.000 {method 'remove' of 'set' objects}
     1683    0.001    0.000    0.002    0.000 earley_forest.py:70(load_paths)
     3762    0.001    0.000    0.001    0.000 earley_forest.py:141(is_empty)
      594    0.001    0.000    0.001    0.000 {method 'join' of 'str' objects}
     3366    0.001    0.000    0.002    0.000 utils.py:357(__len__)
      198    0.001    0.000    0.002    0.000 earley_forest.py:523(__init__)
      198    0.001    0.000    0.003    0.000 earley.py:284(<listcomp>)
     1485    0.001    0.000    0.013    0.000 earley_forest.py:444(visit_symbol_node_out)
      198    0.001    0.000    0.002    0.000 Workbook.py:687(_get_sheet_name_location)
      198    0.001    0.000    0.006    0.000 Sheet.py:60(set_cell_contents)
      495    0.001    0.000    0.001    0.000 earley_forest.py:193(__init__)
      495    0.001    0.000    0.003    0.000 lexer.py:202(__new__)
      396    0.001    0.000    0.001    0.000 earley_forest.py:432(visit_token_node)
      198    0.001    0.000    0.002    0.000 Workbook.py:714(clean_children_cells)
     1881    0.001    0.000    0.001    0.000 earley_forest.py:158(<listcomp>)
      198    0.001    0.000    0.720    0.004 lark.py:640(parse)
     3267    0.001    0.000    0.001    0.000 earley_forest.py:101(__hash__)
      198    0.001    0.000    0.135    0.001 earley_forest.py:535(visit)
     3564    0.001    0.000    0.001    0.000 earley_forest.py:548(_check_cycle)
     1287    0.001    0.000    0.001    0.000 parse_tree_builder.py:20(__call__)
     1485    0.001    0.000    0.001    0.000 earley_forest.py:571(_call_ambig_func)
     3564    0.001    0.000    0.001    0.000 earley_forest.py:169(__hash__)
      198    0.001    0.000    0.136    0.001 earley_forest.py:397(transform)
      198    0.001    0.000    0.001    0.000 Sheet.py:124(update_extent)
      198    0.001    0.000    0.001    0.000 earley_forest.py:390(__init__)
      198    0.000    0.000    0.001    0.000 parse_tree_builder.py:145(__call__)
      198    0.000    0.000    0.001    0.000 earley_forest.py:591(transform_intermediate_node)
      198    0.000    0.000    0.000    0.000 parser_frontends.py:86(_verify_start)
      792    0.000    0.000    0.000    0.000 utils.py:354(__bool__)
      198    0.000    0.000    0.000    0.000 lark.py:220(__getattr__)
      198    0.000    0.000    0.001    0.000 Cell.py:65(set_contents)
     1485    0.000    0.000    0.000    0.000 {built-in method builtins.hasattr}
      198    0.000    0.000    0.000    0.000 grammar.py:15(__init__)
      198    0.000    0.000    0.000    0.000 {method 'split' of 'str' objects}
       99    0.000    0.000    0.001    0.000 Workbook.py:700(add_children_cells)
       99    0.000    0.000    0.000    0.000 Graph.py:96(update_child)
      495    0.000    0.000    0.000    0.000 {method 'group' of 're.Match' objects}
      198    0.000    0.000    0.000    0.000 Cell.py:59(cache_formula)
       99    0.000    0.000    0.000    0.000 Graph.py:68(add_connection)
      198    0.000    0.000    0.002    0.000 earley_forest.py:447(visit_intermediate_node_out)
      198    0.000    0.000    0.000    0.000 tree.py:61(__init__)
      495    0.000    0.000    0.000    0.000 earley_forest.py:207(__hash__)
      198    0.000    0.000    0.000    0.000 earley_forest.py:232(__init__)
      495    0.000    0.000    0.000    0.000 {method 'end' of 're.Match' objects}
      396    0.000    0.000    0.000    0.000 {built-in method builtins.ord}
       99    0.000    0.000    0.000    0.000 {method 'remove' of 'list' objects}
      198    0.000    0.000    0.000    0.000 {method 'upper' of 'str' objects}
      396    0.000    0.000    0.000    0.000 earley_forest.py:418(transform_token_node)
      198    0.000    0.000    0.000    0.000 {method 'lstrip' of 'str' objects}
      198    0.000    0.000    0.000    0.000 {method 'rstrip' of 'str' objects}
      2/1    0.000    0.000    0.000    0.000 {built-in method _abc._abc_subclasscheck}
        1    0.000    0.000    0.000    0.000 cProfile.py:134(__exit__)
      2/1    0.000    0.000    0.000    0.000 abc.py:100(__subclasscheck__)
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
        1    0.000    0.000    0.000    0.000 {method 'update' of 'dict' objects}



##################Running pro_copy_massive_sheet... #######################
for test <function pro_copy_massive_sheet at 0x0000017F167293A0> total time: 33.3457421
Total Logs
         7600051 function calls (7500050 primitive calls) in 6.041 seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
  1900006    0.816    0.000    0.816    0.000 {method 'lower' of 'str' objects}
   100000    0.721    0.000    1.950    0.000 Cell.py:81(set_cell_value)
   100000    0.622    0.000    5.770    0.000 Workbook.py:727(set_cell_contents)
   100000    0.440    0.000    1.077    0.000 utils.py:307(error_matcher)
   100000    0.394    0.000    3.372    0.000 Sheet.py:60(set_cell_contents)
   100000    0.374    0.000    0.612    0.000 Workbook.py:638(recompute_cell_and_parents)
   100000    0.304    0.000    0.495    0.000 utils.py:179(convert_location_to_idx)
   200000    0.198    0.000    0.333    0.000 Sheet.py:93(get_cell_value)
   200000    0.146    0.000    0.146    0.000 {method 'join' of 'str' objects}
   100000    0.145    0.000    2.124    0.000 Cell.py:65(set_contents)
 100002/1    0.125    0.000    6.041    6.041 Workbook.py:35(run_func)
   100000    0.122    0.000    2.246    0.000 Cell.py:46(__init__)
   400000    0.120    0.000    0.120    0.000 {method 'get' of 'dict' objects}
   100000    0.120    0.000    0.153    0.000 Sheet.py:124(update_extent)
        1    0.118    0.118    6.041    6.041 Workbook.py:1038(copy_sheet)
   100001    0.099    0.000    0.183    0.000 Workbook.py:540(get_sheet_name_from_hidden)
   200004    0.099    0.000    0.139    0.000 utils.py:78(get_hidden_name)
   800000    0.098    0.000    0.098    0.000 {method 'strip' of 'str' objects}
   100000    0.091    0.000    0.293    0.000 re.py:188(match)
   700002    0.090    0.000    0.090    0.000 {built-in method builtins.len}
   200000    0.089    0.000    0.128    0.000 Sheet.py:120(get_cell)
   100000    0.084    0.000    0.084    0.000 {method 'match' of 're.Pattern' objects}
   100000    0.083    0.000    0.118    0.000 re.py:289(_compile)
   100000    0.076    0.000    0.369    0.000 utils.py:131(check_valid_cell_location)
   100000    0.070    0.000    0.132    0.000 Workbook.py:714(clean_children_cells)
   200000    0.066    0.000    0.066    0.000 {built-in method _heapq.heappush}
   100000    0.058    0.000    0.058    0.000 Graph.py:330(tarjans)
   100000    0.058    0.000    0.074    0.000 utils.py:212(is_formula)
   200000    0.050    0.000    0.050    0.000 {built-in method builtins.isinstance}
   100000    0.028    0.000    0.028    0.000 Cell.py:128(get_contents)
   100000    0.028    0.000    0.028    0.000 {method 'rstrip' of 'str' objects}
   200000    0.025    0.000    0.025    0.000 {built-in method builtins.ord}
   100000    0.024    0.000    0.024    0.000 {method 'lstrip' of 'str' objects}
   100000    0.020    0.000    0.020    0.000 Cell.py:125(get_value)
   100000    0.020    0.000    0.020    0.000 {method 'upper' of 'str' objects}
   100001    0.020    0.000    0.020    0.000 Sheet.py:54(get_sheet_name)
        1    0.000    0.000    0.000    0.000 Workbook.py:868(new_sheet)
        1    0.000    0.000    0.000    0.000 cProfile.py:134(__exit__)
        1    0.000    0.000    0.000    0.000 utils.py:207(remove_exponent)
        2    0.000    0.000    0.000    0.000 Workbook.py:505(num_sheets)
        1    0.000    0.000    0.000    0.000 utils.py:96(check_new_name)
        1    0.000    0.000    0.000    0.000 Graph.py:128(get_sheet_parents)
        1    0.000    0.000    0.000    0.000 abc.py:96(__instancecheck__)
        1    0.000    0.000    0.000    0.000 Graph.py:121(has_sheet)
        1    0.000    0.000    0.000    0.000 Workbook.py:857(recompute_sheet_parents)
        1    0.000    0.000    0.000    0.000 {built-in method _abc._abc_instancecheck}
        1    0.000    0.000    0.000    0.000 {method 'quantize' of 'decimal.Decimal' objects}
        1    0.000    0.000    0.000    0.000 {method 'to_integral' of 'decimal.Decimal' objects}
        4    0.000    0.000    0.000    0.000 {method 'keys' of 'collections.OrderedDict' objects}
        1    0.000    0.000    0.000    0.000 Sheet.py:25(__init__)
       10    0.000    0.000    0.000    0.000 {method 'isalnum' of 'str' objects}
        1    0.000    0.000    0.000    0.000 Graph.py:124(add_sheet)
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
        1    0.000    0.000    0.000    0.000 {method 'is_finite' of 'decimal.Decimal' objects}
        1    0.000    0.000    0.000    0.000 {method 'keys' of 'dict' objects}
        1    0.000    0.000    0.000    0.000 {method 'items' of 'dict' objects}
        1    0.000    0.000    0.000    0.000 Sheet.py:57(get_sheet_cells)



##################Running pro_pascals_triangle_speed... #######################
Total Logs
         2575114 function calls in 1.825 seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
     1275    0.178    0.000    0.231    0.000 Graph.py:330(tarjans)
    27448    0.170    0.000    1.470    0.000 Workbook.py:582(recompute_cell_value)
    26524    0.104    0.000    0.853    0.000 Workbook.py:544(get_formula_value)
    26524    0.092    0.000    0.368    0.000 Parser.py:253(cell)
    82122    0.088    0.000    0.136    0.000 Sheet.py:93(get_cell_value)
    27799    0.087    0.000    0.165    0.000 Cell.py:81(set_cell_value)
    26524    0.050    0.000    0.198    0.000 Workbook.py:806(get_cell_value)
   111644    0.048    0.000    0.065    0.000 utils.py:78(get_hidden_name)
     1275    0.046    0.000    1.755    0.001 Workbook.py:638(recompute_cell_and_parents)
   294913    0.045    0.000    0.045    0.000 {method 'lower' of 'str' objects}
    53048    0.043    0.000    0.066    0.000 {built-in method builtins.getattr}
   241266    0.042    0.000    0.042    0.000 {built-in method builtins.isinstance}
    26524    0.041    0.000    0.041    0.000 Parser.py:97(__init__)
    26524    0.040    0.000    0.615    0.000 visitors.py:421(_visit_tree)
    26524    0.039    0.000    0.198    0.000 Sheet.py:104(set_cell_value)
    26524    0.039    0.000    0.046    0.000 typing.py:868(__new__)
    54323    0.033    0.000    0.047    0.000 re.py:289(_compile)
   138644    0.032    0.000    0.032    0.000 {method 'get' of 'dict' objects}
    27799    0.032    0.000    0.049    0.000 utils.py:207(remove_exponent)
    26524    0.032    0.000    0.510    0.000 visitors.py:444(inner)
    27448    0.030    0.000    0.066    0.000 Workbook.py:575(get_cell_from_location)
    26524    0.028    0.000    0.036    0.000 visitors.py:430(<listcomp>)
    54896    0.027    0.000    0.027    0.000 Graph.py:137(get_parents_from_cell)
    27724    0.027    0.000    0.049    0.000 Workbook.py:540(get_sheet_name_from_hidden)
    26524    0.026    0.000    0.418    0.000 Parser.py:40(fix_formula)
    26524    0.024    0.000    0.060    0.000 visitors.py:429(visit_children)
    26524    0.023    0.000    0.064    0.000 re.py:203(sub)
    27799    0.022    0.000    0.066    0.000 re.py:188(match)
    27799    0.021    0.000    0.087    0.000 utils.py:131(check_valid_cell_location)
    27799    0.020    0.000    0.020    0.000 {method 'match' of 're.Pattern' objects}
    26524    0.018    0.000    0.023    0.000 lexer.py:265(__eq__)
    26524    0.018    0.000    0.633    0.000 visitors.py:415(visit)
    26524    0.017    0.000    0.024    0.000 utils.py:295(get_highest_precedence_error)
    82122    0.017    0.000    0.017    0.000 Cell.py:125(get_value)
    26524    0.017    0.000    0.017    0.000 {method 'sub' of 're.Pattern' objects}
    28723    0.016    0.000    0.021    0.000 utils.py:212(is_formula)
   137240    0.015    0.000    0.015    0.000 {method 'append' of 'list' objects}
   115945    0.015    0.000    0.015    0.000 {built-in method builtins.len}
    29998    0.014    0.000    0.024    0.000 Sheet.py:120(get_cell)
    53048    0.014    0.000    0.014    0.000 Cell.py:62(get_cached_formula)
    53972    0.013    0.000    0.013    0.000 Cell.py:128(get_contents)
    82344    0.011    0.000    0.011    0.000 {method 'pop' of 'list' objects}
     1275    0.010    0.000    1.821    0.001 Workbook.py:727(set_cell_contents)
    27799    0.009    0.000    0.009    0.000 {method 'quantize' of 'decimal.Decimal' objects}
    26524    0.008    0.000    0.008    0.000 Cell.py:131(set_children)
    27799    0.008    0.000    0.008    0.000 {method 'to_integral' of 'decimal.Decimal' objects}
    26524    0.008    0.000    0.008    0.000 {built-in method __new__ of type object at 0x00007FFB2480DCB0}
    26524    0.006    0.000    0.006    0.000 Parser.py:108(get_cell_refs)
    37999    0.006    0.000    0.006    0.000 {method 'strip' of 'str' objects}
    26524    0.006    0.000    0.006    0.000 {method 'add' of 'set' objects}
     1275    0.005    0.000    0.008    0.000 utils.py:179(convert_location_to_idx)
    27799    0.005    0.000    0.005    0.000 Cell.py:135(get_children)
     1275    0.005    0.000    0.007    0.000 utils.py:307(error_matcher)
    27724    0.005    0.000    0.005    0.000 Sheet.py:54(get_sheet_name)
     1275    0.004    0.000    0.032    0.000 Sheet.py:60(set_cell_contents)
     1275    0.003    0.000    1.824    0.001 Workbook.py:35(run_func)
     1275    0.003    0.000    0.012    0.000 Workbook.py:714(clean_children_cells)
    27799    0.003    0.000    0.003    0.000 {method 'is_finite' of 'decimal.Decimal' objects}
     1225    0.003    0.000    0.005    0.000 Workbook.py:687(_get_sheet_name_location)
     3775    0.003    0.000    0.003    0.000 {method 'join' of 'str' objects}
     1275    0.002    0.000    0.018    0.000 Cell.py:65(set_contents)
     1225    0.002    0.000    0.003    0.000 Graph.py:96(update_child)
     1275    0.002    0.000    0.002    0.000 Sheet.py:124(update_extent)
     1225    0.001    0.000    0.001    0.000 {method 'remove' of 'list' objects}
     1225    0.001    0.000    0.001    0.000 {method 'split' of 'str' objects}
     4725    0.001    0.000    0.001    0.000 {built-in method builtins.ord}
     1575    0.000    0.000    0.000    0.000 {built-in method builtins.chr}
     1575    0.000    0.000    0.000    0.000 {method 'upper' of 'str' objects}
     1275    0.000    0.000    0.000    0.000 {method 'lstrip' of 'str' objects}
     1275    0.000    0.000    0.000    0.000 {method 'rstrip' of 'str' objects}
        1    0.000    0.000    0.000    0.000 cProfile.py:134(__exit__)
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}



beginning of profiler log written on 2024-03-14 15:38:32.541349 ran on the computer of elik with copy sheet which makes sure we copy sheets without a key in the graph 

##################Running pro_load_workbook... #######################
for test <function pro_load_workbook at 0x7f2a40460d60> total time: 8.214030485000002
Total Logs
         2283902 function calls (2272702 primitive calls) in 0.720 seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
     2100    0.123    0.000    0.459    0.000 earley.py:78(predict_and_complete)
   110400    0.071    0.000    0.116    0.000 earley_common.py:9(__init__)
      200    0.044    0.000    0.155    0.001 earley_forest.py:283(visit)
282800/274000    0.043    0.000    0.055    0.000 {built-in method builtins.hash}
    97500    0.035    0.000    0.052    0.000 utils.py:345(add)
    76800    0.031    0.000    0.060    0.000 grammar.py:18(__eq__)
   154500    0.027    0.000    0.037    0.000 grammar.py:25(__hash__)
     1900    0.023    0.000    0.068    0.000 xearley.py:41(scan)
    72500    0.020    0.000    0.026    0.000 lexer.py:265(__eq__)
   201100    0.016    0.000    0.016    0.000 {built-in method builtins.isinstance}
    38400    0.014    0.000    0.022    0.000 utils.py:342(__contains__)
    87900    0.014    0.000    0.014    0.000 earley_common.py:28(__eq__)
     4600    0.013    0.000    0.058    0.000 earley.py:135(<listcomp>)
     8200    0.012    0.000    0.027    0.000 earley_forest.py:50(__init__)
   146500    0.012    0.000    0.012    0.000 earley_common.py:31(__hash__)
   120400    0.010    0.000    0.010    0.000 grammar.py:121(__hash__)
    22500    0.010    0.000    0.012    0.000 {built-in method fromkeys}
   139700    0.009    0.000    0.009    0.000 {built-in method builtins.len}
     7200    0.009    0.000    0.040    0.000 earley_forest.py:437(_visit_node_out_helper)
     7200    0.009    0.000    0.011    0.000 earley_forest.py:145(sort_key)
     3600    0.009    0.000    0.017    0.000 earley_forest.py:603(transform_packed_node)
   129000    0.009    0.000    0.009    0.000 {method 'append' of 'list' objects}
    61200    0.007    0.000    0.007    0.000 {built-in method builtins.next}
    22500    0.007    0.000    0.019    0.000 utils.py:339(__init__)
     8400    0.006    0.000    0.019    0.000 earley_forest.py:64(add_family)
    80000    0.006    0.000    0.006    0.000 {built-in method builtins.id}
     7200    0.006    0.000    0.021    0.000 {built-in method builtins.sorted}
    20900    0.006    0.000    0.010    0.000 parser_frontends.py:184(match)
    22700    0.005    0.000    0.007    0.000 utils.py:348(__iter__)
     8400    0.005    0.000    0.009    0.000 earley_forest.py:131(__init__)
    21700    0.005    0.000    0.005    0.000 {method 'match' of 're.Pattern' objects}
     8400    0.004    0.000    0.019    0.000 earley_common.py:25(advance)
      200    0.004    0.000    0.531    0.003 xearley.py:39(_parse)
     2800    0.004    0.000    0.010    0.000 earley_forest.py:581(transform_symbol_node)
     7200    0.004    0.000    0.027    0.000 earley_forest.py:85(children)
     3600    0.004    0.000    0.010    0.000 earley_forest.py:631(visit_packed_node_in)
    11800    0.003    0.000    0.005    0.000 {method 'setdefault' of 'dict' objects}
     3600    0.003    0.000    0.023    0.000 earley_forest.py:422(visit_symbol_node_in)
     3600    0.003    0.000    0.028    0.000 earley_forest.py:638(visit_packed_node_out)
     3600    0.003    0.000    0.006    0.000 earley_forest.py:427(visit_packed_node_in)
    29900    0.003    0.000    0.003    0.000 {built-in method builtins.iter}
     3600    0.003    0.000    0.034    0.000 earley_forest.py:625(visit_symbol_node_in)
    33300    0.002    0.000    0.002    0.000 {method 'pop' of 'collections.deque' objects}
    18300    0.002    0.000    0.002    0.000 {method 'add' of 'set' objects}
     2800    0.002    0.000    0.004    0.000 earley_forest.py:556(_collapse_ambig)
     2800    0.002    0.000    0.004    0.000 earley_forest.py:565(_call_rule_func)
    31700    0.002    0.000    0.002    0.000 {method 'append' of 'collections.deque' objects}
     3600    0.002    0.000    0.002    0.000 earley_forest.py:155(children)
      300    0.002    0.000    0.709    0.002 Workbook.py:652(recompute_cell_and_parents)
     7200    0.002    0.000    0.002    0.000 utils.py:357(__len__)
      200    0.002    0.000    0.692    0.003 earley.py:262(parse)
     3600    0.001    0.000    0.002    0.000 earley_forest.py:499(__init__)
    10800    0.001    0.000    0.001    0.000 {method 'remove' of 'set' objects}
     3600    0.001    0.000    0.003    0.000 earley_forest.py:70(load_paths)
     3600    0.001    0.000    0.024    0.000 earley_forest.py:450(visit_packed_node_out)
     7200    0.001    0.000    0.001    0.000 earley_forest.py:141(is_empty)
      300    0.001    0.000    0.716    0.002 Workbook.py:741(set_cell_contents)
      200    0.001    0.000    0.694    0.003 parser_frontends.py:100(parse)
     3200    0.001    0.000    0.001    0.000 {built-in method builtins.getattr}
     8300    0.001    0.000    0.001    0.000 earley_forest.py:101(__hash__)
     2800    0.001    0.000    0.015    0.000 earley_forest.py:444(visit_symbol_node_out)
     1300    0.001    0.000    0.001    0.000 lexer.py:213(_future_new)
      800    0.001    0.000    0.001    0.000 earley_forest.py:591(transform_intermediate_node)
     1300    0.001    0.000    0.001    0.000 Sheet.py:93(get_cell_value)
     2800    0.001    0.000    0.001    0.000 earley_forest.py:571(_call_ambig_func)
     8400    0.001    0.000    0.001    0.000 earley_forest.py:169(__hash__)
     7200    0.001    0.000    0.001    0.000 earley_forest.py:548(_check_cycle)
      500    0.001    0.000    0.002    0.000 Cell.py:81(set_cell_value)
     2300    0.001    0.000    0.001    0.000 parse_tree_builder.py:20(__call__)
     1300    0.001    0.000    0.002    0.000 lexer.py:202(__new__)
     3600    0.001    0.000    0.001    0.000 earley_forest.py:158(<listcomp>)
      100    0.001    0.000    0.720    0.007 Workbook.py:75(load_workbook)
      600    0.001    0.000    0.003    0.000 xearley.py:88(<listcomp>)
     1000    0.001    0.000    0.001    0.000 earley_forest.py:432(visit_token_node)
      300    0.001    0.000    0.004    0.000 Sheet.py:60(set_cell_contents)
     7200    0.001    0.000    0.001    0.000 {method 'pop' of 'list' objects}
      300    0.001    0.000    0.003    0.000 Parser.py:253(cell)
      200    0.001    0.000    0.704    0.004 Workbook.py:558(get_formula_value)
      300    0.001    0.000    0.001    0.000 utils.py:180(convert_location_to_idx)
     1300    0.001    0.000    0.001    0.000 earley_forest.py:193(__init__)
  800/200    0.001    0.000    0.009    0.000 visitors.py:421(_visit_tree)
  800/200    0.001    0.000    0.008    0.000 visitors.py:444(inner)
  800/200    0.001    0.000    0.007    0.000 visitors.py:430(<listcomp>)
      800    0.001    0.000    0.005    0.000 Parser.py:40(fix_formula)
     5900    0.001    0.000    0.001    0.000 {method 'lower' of 'str' objects}
      100    0.001    0.000    0.001    0.000 {method 'read' of '_io.TextIOWrapper' objects}
      900    0.001    0.000    0.001    0.000 __init__.py:272(_compile)
      600    0.001    0.000    0.001    0.000 xearley.py:85(<listcomp>)
      300    0.000    0.000    0.001    0.000 Workbook.py:701(_get_sheet_name_location)
      200    0.000    0.000    0.155    0.001 earley_forest.py:535(visit)
     2200    0.000    0.000    0.000    0.000 utils.py:354(__bool__)
      300    0.000    0.000    0.002    0.000 Workbook.py:822(get_cell_value)
      400    0.000    0.000    0.717    0.002 Workbook.py:36(run_func)
  800/200    0.000    0.000    0.007    0.000 visitors.py:429(visit_children)
      200    0.000    0.000    0.002    0.000 earley.py:284(<listcomp>)
     1300    0.000    0.000    0.001    0.000 utils.py:79(get_hidden_name)
      100    0.000    0.000    0.000    0.000 {method 'seek' of '_io.TextIOWrapper' objects}
      200    0.000    0.000    0.000    0.000 parser_frontends.py:96(_make_lexer_thread)
      800    0.000    0.000    0.001    0.000 utils.py:296(get_highest_precedence_error)
     1300    0.000    0.000    0.000    0.000 {built-in method __new__ of type object at 0x860f60}
      100    0.000    0.000    0.001    0.000 Workbook.py:884(new_sheet)
      600    0.000    0.000    0.001    0.000 __init__.py:163(match)
      200    0.000    0.000    0.001    0.000 Workbook.py:714(add_children_cells)
     2800    0.000    0.000    0.000    0.000 {built-in method builtins.hasattr}
      800    0.000    0.000    0.003    0.000 earley_forest.py:447(visit_intermediate_node_out)
     2300    0.000    0.000    0.000    0.000 {method 'get' of 'dict' objects}
      200    0.000    0.000    0.156    0.001 earley_forest.py:397(transform)
      600    0.000    0.000    0.001    0.000 utils.py:132(check_valid_cell_location)
      200    0.000    0.000    0.001    0.000 earley_forest.py:523(__init__)
      100    0.000    0.000    0.000    0.000 decoder.py:343(raw_decode)
      300    0.000    0.000    0.001    0.000 Cell.py:65(set_contents)
      200    0.000    0.000    0.000    0.000 earley_forest.py:390(__init__)
      300    0.000    0.000    0.000    0.000 utils.py:208(remove_exponent)
      300    0.000    0.000    0.000    0.000 Graph.py:68(add_connection)
     2700    0.000    0.000    0.000    0.000 {method 'end' of 're.Match' objects}
      100    0.000    0.000    0.000    0.000 utils.py:308(error_matcher)
      200    0.000    0.000    0.000    0.000 Parser.py:97(__init__)
      900    0.000    0.000    0.000    0.000 {method 'join' of 'str' objects}
      300    0.000    0.000    0.000    0.000 Workbook.py:554(get_sheet_name_from_hidden)
      300    0.000    0.000    0.000    0.000 Sheet.py:124(update_extent)
      200    0.000    0.000    0.000    0.000 Parser.py:169(add_expr)
      100    0.000    0.000    0.000    0.000 Parser.py:211(mul_expr)
      300    0.000    0.000    0.001    0.000 __init__.py:178(sub)
     1300    0.000    0.000    0.000    0.000 {method 'group' of 're.Match' objects}
      200    0.000    0.000    0.001    0.000 Sheet.py:104(set_cell_value)
      200    0.000    0.000    0.000    0.000 parse_tree_builder.py:145(__call__)
      100    0.000    0.000    0.001    0.000 decoder.py:332(decode)
      800    0.000    0.000    0.000    0.000 tree.py:61(__init__)
      300    0.000    0.000    0.002    0.000 Cell.py:46(__init__)
      100    0.000    0.000    0.000    0.000 utils.py:97(check_new_name)
      100    0.000    0.000    0.000    0.000 Workbook.py:57(__init__)
     1300    0.000    0.000    0.000    0.000 earley_forest.py:207(__hash__)
      200    0.000    0.000    0.694    0.003 lark.py:640(parse)
     1200    0.000    0.000    0.000    0.000 {method 'extend' of 'list' objects}
      600    0.000    0.000    0.000    0.000 Sheet.py:120(get_cell)
      200    0.000    0.000    0.000    0.000 Parser.py:243(number)
      300    0.000    0.000    0.000    0.000 {method 'sub' of 're.Pattern' objects}
      100    0.000    0.000    0.001    0.000 __init__.py:299(loads)
     1600    0.000    0.000    0.000    0.000 {method 'strip' of 'str' objects}
      300    0.000    0.000    0.000    0.000 Graph.py:330(tarjans)
      300    0.000    0.000    0.000    0.000 Workbook.py:728(clean_children_cells)
      200    0.000    0.000    0.000    0.000 parser_frontends.py:86(_verify_start)
     1000    0.000    0.000    0.000    0.000 Cell.py:125(get_value)
      300    0.000    0.000    0.000    0.000 {built-in method _abc._abc_instancecheck}
      300    0.000    0.000    0.000    0.000 utils.py:213(is_formula)
      100    0.000    0.000    0.000    0.000 <frozen codecs>:319(decode)
     1000    0.000    0.000    0.000    0.000 earley_forest.py:418(transform_token_node)
      200    0.000    0.000    0.009    0.000 visitors.py:415(visit)
      600    0.000    0.000    0.000    0.000 {built-in method _heapq.heappush}
      300    0.000    0.000    0.000    0.000 {method 'to_integral' of 'decimal.Decimal' objects}
      300    0.000    0.000    0.000    0.000 {method 'quantize' of 'decimal.Decimal' objects}
      300    0.000    0.000    0.000    0.000 <frozen abc>:117(__instancecheck__)
      200    0.000    0.000    0.000    0.000 lark.py:220(__getattr__)
      100    0.000    0.000    0.000    0.000 <frozen codecs>:327(reset)
      300    0.000    0.000    0.000    0.000 {method 'split' of 'str' objects}
      600    0.000    0.000    0.000    0.000 {built-in method builtins.ord}
      200    0.000    0.000    0.000    0.000 {method 'update' of 'dict' objects}
      100    0.000    0.000    0.000    0.000 Graph.py:128(get_sheet_parents)
      100    0.000    0.000    0.000    0.000 Workbook.py:519(num_sheets)
      100    0.000    0.000    0.000    0.000 Workbook.py:873(recompute_sheet_parents)
      600    0.000    0.000    0.000    0.000 {method 'isalnum' of 'str' objects}
      100    0.000    0.000    0.000    0.000 Graph.py:121(has_sheet)
      100    0.000    0.000    0.000    0.000 {built-in method _codecs.utf_8_decode}
      200    0.000    0.000    0.000    0.000 grammar.py:15(__init__)
      200    0.000    0.000    0.000    0.000 Cell.py:131(set_children)
      100    0.000    0.000    0.000    0.000 {method 'startswith' of 'str' objects}
      400    0.000    0.000    0.000    0.000 Cell.py:128(get_contents)
      300    0.000    0.000    0.000    0.000 {method 'upper' of 'str' objects}
      100    0.000    0.000    0.000    0.000 Sheet.py:25(__init__)
      300    0.000    0.000    0.000    0.000 {method 'is_finite' of 'decimal.Decimal' objects}
      300    0.000    0.000    0.000    0.000 Sheet.py:54(get_sheet_name)
      200    0.000    0.000    0.000    0.000 earley_forest.py:232(__init__)
      300    0.000    0.000    0.000    0.000 {method 'lstrip' of 'str' objects}
      200    0.000    0.000    0.000    0.000 Cell.py:59(cache_formula)
      200    0.000    0.000    0.000    0.000 Parser.py:108(get_cell_refs)
      300    0.000    0.000    0.000    0.000 {method 'rstrip' of 'str' objects}
      100    0.000    0.000    0.000    0.000 Graph.py:124(add_sheet)
      200    0.000    0.000    0.000    0.000 Cell.py:62(get_cached_formula)
      100    0.000    0.000    0.000    0.000 Graph.py:15(__init__)
      100    0.000    0.000    0.000    0.000 {method 'keys' of 'dict' objects}
      100    0.000    0.000    0.000    0.000 {method 'keys' of 'collections.OrderedDict' objects}
      100    0.000    0.000    0.000    0.000 <frozen codecs>:276(reset)
        1    0.000    0.000    0.000    0.000 cProfile.py:118(__exit__)
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}



##################Running pro_copy_sheet... #######################
for test <function pro_copy_sheet at 0x7f2a40460ea0> total time: 3.526622316999999
Total Logs
         1011194 function calls (1006594 primitive calls) in 0.320 seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
      800    0.055    0.000    0.204    0.000 earley.py:78(predict_and_complete)
    51200    0.032    0.000    0.055    0.000 earley_common.py:9(__init__)
127300/123800    0.022    0.000    0.027    0.000 {built-in method builtins.hash}
      100    0.019    0.000    0.064    0.001 earley_forest.py:283(visit)
    43000    0.015    0.000    0.023    0.000 utils.py:345(add)
    32300    0.013    0.000    0.025    0.000 grammar.py:18(__eq__)
    69100    0.012    0.000    0.016    0.000 grammar.py:25(__hash__)
      100    0.009    0.000    0.320    0.003 Workbook.py:1055(copy_sheet)
    30300    0.009    0.000    0.011    0.000 lexer.py:265(__eq__)
      700    0.008    0.000    0.025    0.000 xearley.py:41(scan)
    42000    0.007    0.000    0.007    0.000 earley_common.py:28(__eq__)
    18100    0.007    0.000    0.011    0.000 utils.py:342(__contains__)
    83400    0.007    0.000    0.007    0.000 {built-in method builtins.isinstance}
     1800    0.005    0.000    0.024    0.000 earley.py:135(<listcomp>)
    64800    0.005    0.000    0.005    0.000 earley_common.py:31(__hash__)
     3200    0.005    0.000    0.009    0.000 earley_forest.py:50(__init__)
    55100    0.005    0.000    0.005    0.000 grammar.py:121(__hash__)
    63900    0.004    0.000    0.004    0.000 {built-in method builtins.len}
     3000    0.004    0.000    0.017    0.000 earley_forest.py:437(_visit_node_out_helper)
    58900    0.004    0.000    0.004    0.000 {method 'append' of 'list' objects}
     1500    0.004    0.000    0.007    0.000 earley_forest.py:603(transform_packed_node)
    25400    0.003    0.000    0.003    0.000 {built-in method builtins.next}
     8700    0.003    0.000    0.003    0.000 {built-in method fromkeys}
     3000    0.003    0.000    0.006    0.000 {built-in method builtins.sorted}
     8700    0.002    0.000    0.006    0.000 utils.py:339(__init__)
    33300    0.002    0.000    0.002    0.000 {built-in method builtins.id}
     3300    0.002    0.000    0.007    0.000 earley_forest.py:64(add_family)
     9000    0.002    0.000    0.003    0.000 utils.py:348(__iter__)
     7700    0.002    0.000    0.004    0.000 parser_frontends.py:184(match)
     3300    0.002    0.000    0.004    0.000 earley_forest.py:131(__init__)
     1200    0.002    0.000    0.004    0.000 earley_forest.py:581(transform_symbol_node)
     8000    0.002    0.000    0.002    0.000 {method 'match' of 're.Pattern' objects}
     3300    0.002    0.000    0.008    0.000 earley_common.py:25(advance)
     3000    0.002    0.000    0.009    0.000 earley_forest.py:85(children)
     1500    0.002    0.000    0.004    0.000 earley_forest.py:631(visit_packed_node_in)
      100    0.002    0.000    0.230    0.002 xearley.py:39(_parse)
     1500    0.001    0.000    0.007    0.000 earley_forest.py:422(visit_symbol_node_in)
     1500    0.001    0.000    0.012    0.000 earley_forest.py:638(visit_packed_node_out)
     4700    0.001    0.000    0.002    0.000 {method 'setdefault' of 'dict' objects}
     1500    0.001    0.000    0.003    0.000 earley_forest.py:427(visit_packed_node_in)
     3000    0.001    0.000    0.002    0.000 earley_forest.py:145(sort_key)
     1500    0.001    0.000    0.011    0.000 earley_forest.py:625(visit_symbol_node_in)
    12000    0.001    0.000    0.001    0.000 {built-in method builtins.iter}
     7600    0.001    0.000    0.001    0.000 {method 'add' of 'set' objects}
    13900    0.001    0.000    0.001    0.000 {method 'pop' of 'collections.deque' objects}
     1200    0.001    0.000    0.002    0.000 earley_forest.py:556(_collapse_ambig)
     1200    0.001    0.000    0.002    0.000 earley_forest.py:565(_call_rule_func)
      200    0.001    0.000    0.304    0.002 Workbook.py:652(recompute_cell_and_parents)
      200    0.001    0.000    0.308    0.002 Workbook.py:741(set_cell_contents)
    13300    0.001    0.000    0.001    0.000 {method 'append' of 'collections.deque' objects}
      100    0.001    0.000    0.296    0.003 earley.py:262(parse)
     1500    0.001    0.000    0.001    0.000 earley_forest.py:155(children)
     3000    0.001    0.000    0.001    0.000 utils.py:357(__len__)
     9150    0.001    0.000    0.001    0.000 {method 'lower' of 'str' objects}
     4500    0.001    0.000    0.001    0.000 {method 'remove' of 'set' objects}
     1500    0.001    0.000    0.001    0.000 earley_forest.py:499(__init__)
     1500    0.001    0.000    0.010    0.000 earley_forest.py:450(visit_packed_node_out)
     1500    0.001    0.000    0.001    0.000 earley_forest.py:70(load_paths)
      300    0.001    0.000    0.001    0.000 Cell.py:81(set_cell_value)
      100    0.001    0.000    0.297    0.003 parser_frontends.py:100(parse)
      700    0.001    0.000    0.001    0.000 Sheet.py:93(get_cell_value)
     3000    0.000    0.000    0.000    0.000 earley_forest.py:141(is_empty)
      200    0.000    0.000    0.003    0.000 Sheet.py:60(set_cell_contents)
     1400    0.000    0.000    0.001    0.000 {built-in method builtins.getattr}
     1200    0.000    0.000    0.007    0.000 earley_forest.py:444(visit_symbol_node_out)
      200    0.000    0.000    0.001    0.000 utils.py:180(convert_location_to_idx)
  400/100    0.000    0.000    0.320    0.003 Workbook.py:36(run_func)
     3200    0.000    0.000    0.000    0.000 earley_forest.py:101(__hash__)
     1200    0.000    0.000    0.001    0.000 earley_forest.py:571(_call_ambig_func)
      300    0.000    0.000    0.001    0.000 earley_forest.py:591(transform_intermediate_node)
     1000    0.000    0.000    0.000    0.000 parse_tree_builder.py:20(__call__)
      500    0.000    0.000    0.001    0.000 lexer.py:213(_future_new)
     3000    0.000    0.000    0.000    0.000 earley_forest.py:548(_check_cycle)
     3300    0.000    0.000    0.000    0.000 earley_forest.py:169(__hash__)
     1500    0.000    0.000    0.000    0.000 earley_forest.py:158(<listcomp>)
      100    0.000    0.000    0.301    0.003 Workbook.py:558(get_formula_value)
     3000    0.000    0.000    0.000    0.000 {method 'pop' of 'list' objects}
     5350    0.000    0.000    0.000    0.000 {method 'keys' of 'collections.OrderedDict' objects}
      400    0.000    0.000    0.000    0.000 earley_forest.py:432(visit_token_node)
      500    0.000    0.000    0.001    0.000 lexer.py:202(__new__)
     1000    0.000    0.000    0.000    0.000 utils.py:79(get_hidden_name)
  300/100    0.000    0.000    0.003    0.000 visitors.py:421(_visit_tree)
      200    0.000    0.000    0.001    0.000 xearley.py:88(<listcomp>)
      100    0.000    0.000    0.001    0.000 Workbook.py:884(new_sheet)
      100    0.000    0.000    0.001    0.000 Parser.py:253(cell)
      500    0.000    0.000    0.000    0.000 earley_forest.py:193(__init__)
      400    0.000    0.000    0.000    0.000 __init__.py:272(_compile)
      100    0.000    0.000    0.000    0.000 utils.py:308(error_matcher)
  300/100    0.000    0.000    0.002    0.000 visitors.py:430(<listcomp>)
  300/100    0.000    0.000    0.003    0.000 visitors.py:444(inner)
      300    0.000    0.000    0.002    0.000 Parser.py:40(fix_formula)
      100    0.000    0.000    0.064    0.001 earley_forest.py:535(visit)
      100    0.000    0.000    0.000    0.000 utils.py:97(check_new_name)
      100    0.000    0.000    0.001    0.000 earley.py:284(<listcomp>)
      300    0.000    0.000    0.000    0.000 Workbook.py:554(get_sheet_name_from_hidden)
      200    0.000    0.000    0.001    0.000 Cell.py:65(set_contents)
      100    0.000    0.000    0.000    0.000 parser_frontends.py:96(_make_lexer_thread)
     1300    0.000    0.000    0.000    0.000 {method 'get' of 'dict' objects}
      200    0.000    0.000    0.000    0.000 utils.py:208(remove_exponent)
      300    0.000    0.000    0.001    0.000 __init__.py:163(match)
  300/100    0.000    0.000    0.003    0.000 visitors.py:429(visit_children)
      200    0.000    0.000    0.000    0.000 xearley.py:85(<listcomp>)
      100    0.000    0.000    0.000    0.000 Workbook.py:701(_get_sheet_name_location)
      800    0.000    0.000    0.000    0.000 utils.py:354(__bool__)
      100    0.000    0.000    0.064    0.001 earley_forest.py:397(transform)
      100    0.000    0.000    0.001    0.000 Workbook.py:822(get_cell_value)
      300    0.000    0.000    0.001    0.000 utils.py:132(check_valid_cell_location)
      200    0.000    0.000    0.000    0.000 Sheet.py:124(update_extent)
      500    0.000    0.000    0.000    0.000 {method 'join' of 'str' objects}
     1200    0.000    0.000    0.000    0.000 {built-in method builtins.hasattr}
      300    0.000    0.000    0.000    0.000 utils.py:296(get_highest_precedence_error)
      100    0.000    0.000    0.000    0.000 earley_forest.py:523(__init__)
      100    0.000    0.000    0.000    0.000 earley_forest.py:390(__init__)
      500    0.000    0.000    0.000    0.000 {built-in method __new__ of type object at 0x860f60}
      300    0.000    0.000    0.001    0.000 earley_forest.py:447(visit_intermediate_node_out)
      100    0.000    0.000    0.001    0.000 Workbook.py:714(add_children_cells)
      100    0.000    0.000    0.000    0.000 Parser.py:169(add_expr)
      100    0.000    0.000    0.000    0.000 Parser.py:97(__init__)
      400    0.000    0.000    0.000    0.000 Sheet.py:120(get_cell)
      200    0.000    0.000    0.001    0.000 Cell.py:46(__init__)
      100    0.000    0.000    0.001    0.000 Sheet.py:104(set_cell_value)
      200    0.000    0.000    0.000    0.000 Workbook.py:519(num_sheets)
      100    0.000    0.000    0.000    0.000 Graph.py:68(add_connection)
      100    0.000    0.000    0.000    0.000 parse_tree_builder.py:145(__call__)
     1200    0.000    0.000    0.000    0.000 {method 'strip' of 'str' objects}
      200    0.000    0.000    0.000    0.000 Graph.py:330(tarjans)
      200    0.000    0.000    0.000    0.000 Workbook.py:728(clean_children_cells)
      900    0.000    0.000    0.000    0.000 {method 'end' of 're.Match' objects}
      100    0.000    0.000    0.297    0.003 lark.py:640(parse)
      100    0.000    0.000    0.000    0.000 __init__.py:178(sub)
      500    0.000    0.000    0.000    0.000 {method 'group' of 're.Match' objects}
      300    0.000    0.000    0.000    0.000 tree.py:61(__init__)
      792    0.000    0.000    0.000    0.000 {method 'isalnum' of 'str' objects}
      500    0.000    0.000    0.000    0.000 earley_forest.py:207(__hash__)
      200    0.000    0.000    0.000    0.000 utils.py:213(is_formula)
      100    0.000    0.000    0.000    0.000 Parser.py:243(number)
      400    0.000    0.000    0.000    0.000 {method 'extend' of 'list' objects}
      500    0.000    0.000    0.000    0.000 Cell.py:125(get_value)
      100    0.000    0.000    0.000    0.000 parser_frontends.py:86(_verify_start)
      200    0.000    0.000    0.000    0.000 <frozen abc>:117(__instancecheck__)
      400    0.000    0.000    0.000    0.000 {built-in method _heapq.heappush}
      200    0.000    0.000    0.000    0.000 {method 'quantize' of 'decimal.Decimal' objects}
      200    0.000    0.000    0.000    0.000 {built-in method _abc._abc_instancecheck}
      100    0.000    0.000    0.000    0.000 {method 'sub' of 're.Pattern' objects}
      100    0.000    0.000    0.003    0.000 visitors.py:415(visit)
      200    0.000    0.000    0.000    0.000 {method 'to_integral' of 'decimal.Decimal' objects}
      100    0.000    0.000    0.000    0.000 Graph.py:121(has_sheet)
      400    0.000    0.000    0.000    0.000 Cell.py:128(get_contents)
      400    0.000    0.000    0.000    0.000 earley_forest.py:418(transform_token_node)
      100    0.000    0.000    0.000    0.000 lark.py:220(__getattr__)
      100    0.000    0.000    0.000    0.000 Sheet.py:25(__init__)
      400    0.000    0.000    0.000    0.000 {built-in method builtins.ord}
      300    0.000    0.000    0.000    0.000 Sheet.py:54(get_sheet_name)
      100    0.000    0.000    0.000    0.000 {method 'split' of 'str' objects}
      200    0.000    0.000    0.000    0.000 {method 'upper' of 'str' objects}
      100    0.000    0.000    0.000    0.000 Graph.py:124(add_sheet)
      200    0.000    0.000    0.000    0.000 {method 'is_finite' of 'decimal.Decimal' objects}
      100    0.000    0.000    0.000    0.000 {method 'update' of 'dict' objects}
      200    0.000    0.000    0.000    0.000 {method 'keys' of 'dict' objects}
      100    0.000    0.000    0.000    0.000 Cell.py:131(set_children)
      100    0.000    0.000    0.000    0.000 grammar.py:15(__init__)
      200    0.000    0.000    0.000    0.000 {method 'lstrip' of 'str' objects}
      200    0.000    0.000    0.000    0.000 {method 'rstrip' of 'str' objects}
      100    0.000    0.000    0.000    0.000 Cell.py:59(cache_formula)
      100    0.000    0.000    0.000    0.000 earley_forest.py:232(__init__)
      100    0.000    0.000    0.000    0.000 Parser.py:108(get_cell_refs)
      100    0.000    0.000    0.000    0.000 Sheet.py:57(get_sheet_cells)
      100    0.000    0.000    0.000    0.000 Cell.py:62(get_cached_formula)
      100    0.000    0.000    0.000    0.000 {method 'items' of 'dict' objects}
        1    0.000    0.000    0.000    0.000 cProfile.py:118(__exit__)
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}



##################Running pro_rename_sheet... #######################
for test <function pro_rename_sheet at 0x7f2a40460fe0> total time: 10.159767596999998
Total Logs
         3625292 function calls (3374492 primitive calls) in 1.079 seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
    17800    0.085    0.000    0.160    0.000 tree.py:137(iter_subtrees)
122300/121600    0.084    0.000    0.305    0.000 visitors.py:111(_call_userfunc)
220900/188000    0.063    0.000    0.336    0.000 visitors.py:143(_transform_children)
     4100    0.059    0.000    0.144    0.000 visitors.py:293(transform)
   836500    0.055    0.000    0.056    0.000 {built-in method builtins.isinstance}
247900/200300    0.054    0.000    0.080    0.000 {built-in method builtins.getattr}
   118400    0.047    0.000    0.066    0.000 tree.py:147(<listcomp>)
     7000    0.044    0.000    0.457    0.000 visitors.py:278(transform)
    46200    0.039    0.000    0.050    0.000 tree.py:179(expand_kids_by_data)
213700/108400    0.029    0.000    0.046    0.000 {built-in method builtins.hash}
27300/6000    0.029    0.000    0.180    0.000 load_grammar.py:389(expansion)
      100    0.027    0.000    0.986    0.010 load_grammar.py:690(compile)
   156300    0.025    0.000    0.034    0.000 grammar.py:25(__hash__)
    88000    0.024    0.000    0.037    0.000 visitors.py:171(__default__)
    55300    0.017    0.000    0.029    0.000 grammar.py:18(__eq__)
    72800    0.017    0.000    0.247    0.000 visitors.py:275(_transform_tree)
33500/10600    0.017    0.000    0.219    0.000 visitors.py:342(_call_userfunc)
   103600    0.015    0.000    0.015    0.000 tree.py:61(__init__)
   219000    0.014    0.000    0.014    0.000 {built-in method builtins.id}
     6800    0.014    0.000    0.023    0.000 functools.py:35(update_wrapper)
     3200    0.013    0.000    0.078    0.000 tree_matcher.py:106(_build_recons_rules)
    35800    0.013    0.000    0.063    0.000 load_grammar.py:384(_flatten)
     4300    0.012    0.000    0.060    0.000 load_grammar.py:566(_literal_to_pattern)
9300/1200    0.011    0.000    0.237    0.000 visitors.py:362(visit)
    94800    0.010    0.000    0.011    0.000 tree.py:66(meta)
     7100    0.010    0.000    0.021    0.000 tree_matcher.py:121(<listcomp>)
35500/33700    0.010    0.000    0.032    0.000 tree.py:134(__hash__)
    15800    0.009    0.000    0.031    0.000 grammar.py:103(__init__)
10000/1300    0.009    0.000    0.037    0.000 visitors.py:155(_transform_tree)
     4300    0.009    0.000    0.009    0.000 {built-in method builtins.compile}
   118100    0.009    0.000    0.009    0.000 {built-in method builtins.len}
    12900    0.009    0.000    0.010    0.000 load_grammar.py:537(<genexpr>)
     5600    0.008    0.000    0.041    0.000 load_grammar.py:420(expansions)
     4300    0.008    0.000    0.031    0.000 load_grammar.py:540(eval_escaping)
2900/1500    0.008    0.000    0.155    0.000 load_grammar.py:405(<listcomp>)
   122700    0.008    0.000    0.008    0.000 {method 'append' of 'list' objects}
    27100    0.007    0.000    0.009    0.000 lexer.py:265(__eq__)
     4300    0.007    0.000    0.021    0.000 ast.py:54(literal_eval)
     8700    0.006    0.000    0.024    0.000 tree_matcher.py:57(make_recons_rule)
    10000    0.006    0.000    0.010    0.000 visitors.py:130(_call_userfunc_token)
    28300    0.006    0.000    0.012    0.000 load_grammar.py:759(<genexpr>)
      100    0.005    0.000    0.013    0.000 load_grammar.py:793(<setcomp>)
     6800    0.005    0.000    0.032    0.000 visitors.py:481(__get__)
     1300    0.004    0.000    0.008    0.000 load_grammar.py:450(pattern)
    53300    0.004    0.000    0.004    0.000 {method 'pop' of 'list' objects}
     2900    0.004    0.000    0.017    0.000 utils.py:190(<listcomp>)
     6800    0.004    0.000    0.027    0.000 visitors.py:470(__init__)
     2600    0.003    0.000    0.454    0.000 visitors.py:258(transform)
     6800    0.003    0.000    0.085    0.000 visitors.py:500(_vargs_inline)
     6800    0.003    0.000    0.082    0.000 visitors.py:478(__call__)
      100    0.003    0.000    1.073    0.011 tree_matcher.py:89(__init__)
      100    0.003    0.000    0.004    0.000 load_grammar.py:806(<setcomp>)
    34000    0.003    0.000    0.003    0.000 {built-in method builtins.setattr}
     4300    0.003    0.000    0.064    0.000 load_grammar.py:601(literal)
     7100    0.003    0.000    0.009    0.000 load_grammar.py:798(<lambda>)
     4600    0.003    0.000    0.013    0.000 {built-in method builtins.max}
    21100    0.002    0.000    0.002    0.000 tree_matcher.py:12(is_discarded_terminal)
     9300    0.002    0.000    0.008    0.000 {method 'add' of 'set' objects}
     4300    0.002    0.000    0.012    0.000 ast.py:33(parse)
      100    0.002    0.000    0.008    0.000 tree_matcher.py:115(<setcomp>)
      100    0.002    0.000    0.004    0.000 tree_matcher.py:28(_best_from_group)
     4300    0.002    0.000    0.014    0.000 load_grammar.py:536(_rfind)
  300/200    0.002    0.000    1.082    0.005 Workbook.py:36(run_func)
      100    0.002    0.000    0.002    0.000 Graph.py:28(rename_sheet)
     9100    0.002    0.000    0.002    0.000 grammar.py:69(__init__)
     2600    0.002    0.000    0.096    0.000 load_grammar.py:674(nr_deepcopy_tree)
     5900    0.002    0.000    0.002    0.000 load_grammar.py:668(value)
     4900    0.002    0.000    0.002    0.000 lexer.py:41(__init__)
     6100    0.002    0.000    0.002    0.000 lexer.py:50(__hash__)
    17800    0.002    0.000    0.002    0.000 {method 'values' of 'collections.OrderedDict' objects}
    12200    0.002    0.000    0.002    0.000 grammar.py:42(__init__)
      200    0.002    0.000    0.011    0.000 utils.py:271(<listcomp>)
     2000    0.001    0.000    0.010    0.000 load_grammar.py:631(expansions)
     2900    0.001    0.000    0.019    0.000 utils.py:184(dedup_list)
     2000    0.001    0.000    0.002    0.000 load_grammar.py:637(<lambda>)
      100    0.001    0.000    0.177    0.002 load_grammar.py:710(<listcomp>)
     9400    0.001    0.000    0.001    0.000 grammar.py:15(__init__)
    11900    0.001    0.000    0.001    0.000 {method 'replace' of 'str' objects}
     8600    0.001    0.000    0.001    0.000 {method 'rfind' of 'str' objects}
     4300    0.001    0.000    0.002    0.000 {built-in method builtins.all}
     8700    0.001    0.000    0.001    0.000 tree_matcher.py:17(__init__)
     9000    0.001    0.000    0.001    0.000 {method 'startswith' of 'str' objects}
     5700    0.001    0.000    0.005    0.000 grammar.py:22(__ne__)
      100    0.001    0.000    0.001    0.000 Workbook.py:1020(move_sheet)
     4300    0.001    0.000    0.001    0.000 ast.py:84(_convert)
      100    0.001    0.000    1.080    0.011 Workbook.py:953(rename_sheet)
     2000    0.001    0.000    0.003    0.000 lexer.py:81(to_regexp)
      600    0.001    0.000    0.004    0.000 {method 'sort' of 'list' objects}
      100    0.001    0.000    0.003    0.000 tree_matcher.py:108(<setcomp>)
     3500    0.001    0.000    0.001    0.000 load_grammar.py:621(expansion)
     2200    0.001    0.000    0.003    0.000 lexer.py:125(__init__)
     6900    0.001    0.000    0.001    0.000 {method 'update' of 'dict' objects}
    11600    0.001    0.000    0.001    0.000 tree.py:175(<lambda>)
     1100    0.001    0.000    0.003    0.000 load_grammar.py:346(expr)
    13300    0.001    0.000    0.001    0.000 grammar.py:121(__hash__)
    10000    0.001    0.000    0.001    0.000 visitors.py:178(__default_token__)
     1600    0.001    0.000    0.005    0.000 tree_matcher.py:61(make_recons_rule_to_term)
     7100    0.001    0.000    0.001    0.000 load_grammar.py:431(expansion)
     7100    0.001    0.000    0.001    0.000 {built-in method builtins.any}
     2000    0.001    0.000    0.002    0.000 __init__.py:253(escape)
     1500    0.001    0.000    0.014    0.000 tree.py:169(find_pred)
     2000    0.001    0.000    0.001    0.000 {method 'translate' of 'str' objects}
     2500    0.001    0.000    0.004    0.000 load_grammar.py:639(<genexpr>)
      100    0.001    0.000    0.001    0.000 tree_matcher.py:116(<setcomp>)
     5100    0.001    0.000    0.001    0.000 load_grammar.py:572(<genexpr>)
      100    0.001    0.000    0.041    0.000 load_grammar.py:693(<listcomp>)
     1800    0.001    0.000    0.001    0.000 lexer.py:53(__eq__)
     2100    0.001    0.000    0.001    0.000 lexer.py:70(_get_flags)
      500    0.001    0.000    0.004    0.000 {method 'join' of 'str' objects}
     6700    0.001    0.000    0.001    0.000 typing.py:2256(cast)
      800    0.000    0.000    0.002    0.000 grammar.py:124(__eq__)
     1500    0.000    0.000    0.015    0.000 tree.py:173(find_data)
    10300    0.000    0.000    0.000    0.000 {method 'items' of 'dict' objects}
     3000    0.000    0.000    0.000    0.000 load_grammar.py:617(pattern)
     2200    0.000    0.000    0.001    0.000 <frozen abc>:117(__instancecheck__)
      100    0.000    0.000    1.074    0.011 reconstruct.py:80(__init__)
     1600    0.000    0.000    0.001    0.000 load_grammar.py:210(_args_as_int)
     4300    0.000    0.000    0.000    0.000 {built-in method builtins.iter}
     3200    0.000    0.000    0.000    0.000 visitors.py:108(__init__)
     2200    0.000    0.000    0.000    0.000 {built-in method _abc._abc_instancecheck}
     4300    0.000    0.000    0.000    0.000 {method 'lstrip' of 'str' objects}
     2000    0.000    0.000    0.001    0.000 lexer.py:88(max_width)
      100    0.000    0.000    0.056    0.001 load_grammar.py:694(<listcomp>)
      100    0.000    0.000    0.001    0.000 load_grammar.py:446(<dictcomp>)
     2700    0.000    0.000    0.001    0.000 tree_matcher.py:44(<lambda>)
     1300    0.000    0.000    0.037    0.000 visitors.py:159(transform)
      600    0.000    0.000    0.001    0.000 load_grammar.py:411(alias)
     2000    0.000    0.000    0.000    0.000 lexer.py:84(min_width)
     3000    0.000    0.000    0.000    0.000 load_grammar.py:663(value)
      100    0.000    0.000    0.001    0.000 copy.py:66(copy)
      100    0.000    0.000    0.001    0.000 Workbook.py:884(new_sheet)
      100    0.000    0.000    0.002    0.000 load_grammar.py:246(_add_recurse_rule)
      200    0.000    0.000    0.000    0.000 utils.py:97(check_new_name)
      500    0.000    0.000    0.000    0.000 load_grammar.py:640(<setcomp>)
     2200    0.000    0.000    0.000    0.000 load_grammar.py:809(<lambda>)
     1000    0.000    0.000    0.000    0.000 load_grammar.py:434(alias)
      100    0.000    0.000    0.000    0.000 load_grammar.py:642(expr)
      500    0.000    0.000    0.000    0.000 load_grammar.py:613(_make_joined_pattern)
      100    0.000    0.000    0.000    0.000 reconstruct.py:83(<dictcomp>)
     1300    0.000    0.000    0.000    0.000 tree.py:32(__init__)
      100    0.000    0.000    0.004    0.000 load_grammar.py:375(maybe)
      600    0.000    0.000    0.000    0.000 utils.py:79(get_hidden_name)
      800    0.000    0.000    0.000    0.000 tree_matcher.py:43(<lambda>)
      400    0.000    0.000    0.001    0.000 {built-in method builtins.sum}
      300    0.000    0.000    0.000    0.000 load_grammar.py:201(_will_not_get_removed)
      100    0.000    0.000    0.000    0.000 copy.py:259(_reconstruct)
      300    0.000    0.000    0.000    0.000 Graph.py:128(get_sheet_parents)
      100    0.000    0.000    0.000    0.000 {method '__reduce_ex__' of 'object' objects}
      400    0.000    0.000    0.001    0.000 load_grammar.py:219(expansion)
      100    0.000    0.000    0.000    0.000 load_grammar.py:743(<setcomp>)
      100    0.000    0.000    0.006    0.000 tree_matcher.py:42(_best_rules_from_group)
      100    0.000    0.000    0.000    0.000 load_grammar.py:763(<listcomp>)
     1600    0.000    0.000    0.000    0.000 {built-in method builtins.next}
      100    0.000    0.000    0.000    0.000 load_grammar.py:235(_name_rule)
      200    0.000    0.000    0.011    0.000 utils.py:269(classify_bool)
      100    0.000    0.000    0.001    0.000 load_grammar.py:240(_add_rule)
      200    0.000    0.000    0.000    0.000 visitors.py:263(__mul__)
      100    0.000    0.000    0.001    0.000 load_grammar.py:443(__init__)
     1200    0.000    0.000    0.000    0.000 {method 'lower' of 'str' objects}
     1200    0.000    0.000    0.000    0.000 load_grammar.py:428(expansions)
      200    0.000    0.000    0.000    0.000 visitors.py:163(__mul__)
      100    0.000    0.000    0.000    0.000 load_grammar.py:445(<setcomp>)
     1490    0.000    0.000    0.000    0.000 {method 'isalnum' of 'str' objects}
      200    0.000    0.000    0.000    0.000 Workbook.py:519(num_sheets)
      300    0.000    0.000    0.001    0.000 load_grammar.py:222(expansions)
      100    0.000    0.000    0.000    0.000 Parser.py:380(__init__)
      200    0.000    0.000    0.000    0.000 Workbook.py:873(recompute_sheet_parents)
      100    0.000    0.000    0.000    0.000 load_grammar.py:516(__init__)
      400    0.000    0.000    0.000    0.000 {method 'get' of 'dict' objects}
      100    0.000    0.000    0.000    0.000 load_grammar.py:797(<setcomp>)
      100    0.000    0.000    0.000    0.000 copyreg.py:104(__newobj__)
      100    0.000    0.000    0.000    0.000 {method 'index' of 'list' objects}
      200    0.000    0.000    0.000    0.000 lark.py:220(__getattr__)
      200    0.000    0.000    0.000    0.000 {method 'pop' of 'collections.OrderedDict' objects}
      100    0.000    0.000    0.000    0.000 Sheet.py:134(set_sheet_name)
      400    0.000    0.000    0.000    0.000 visitors.py:255(__init__)
      100    0.000    0.000    0.000    0.000 load_grammar.py:228(__init__)
      100    0.000    0.000    0.000    0.000 Graph.py:121(has_sheet)
      100    0.000    0.000    0.000    0.000 lexer.py:98(to_regexp)
      500    0.000    0.000    0.000    0.000 {method 'keys' of 'collections.OrderedDict' objects}
      100    0.000    0.000    0.000    0.000 Sheet.py:25(__init__)
      100    0.000    0.000    0.000    0.000 {method 'insert' of 'list' objects}
      100    0.000    0.000    0.000    0.000 Graph.py:124(add_sheet)
      100    0.000    0.000    0.000    0.000 {built-in method __new__ of type object at 0x860f60}
      200    0.000    0.000    0.000    0.000 {method 'values' of 'dict' objects}
      100    0.000    0.000    0.000    0.000 reconstruct.py:29(__init__)
      100    0.000    0.000    0.000    0.000 load_grammar.py:198(__init__)
      100    0.000    0.000    0.000    0.000 load_grammar.py:498(__init__)
      100    0.000    0.000    0.000    0.000 {method 'reverse' of 'list' objects}
      100    0.000    0.000    0.000    0.000 {built-in method builtins.hasattr}
      100    0.000    0.000    0.000    0.000 Sheet.py:54(get_sheet_name)
      100    0.000    0.000    0.000    0.000 {built-in method builtins.issubclass}
      100    0.000    0.000    0.000    0.000 {method 'items' of 'collections.OrderedDict' objects}
      100    0.000    0.000    0.000    0.000 {method 'keys' of 'dict' objects}
        1    0.000    0.000    0.000    0.000 cProfile.py:118(__exit__)
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}



##################Running pro_copy_cells... #######################
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
=A1*B1
A1*B1
for test <function pro_copy_cells at 0x7f2a40461120> total time: 22.903993406000016
Total Logs
         7457304 function calls (7195243 primitive calls) in 2.381 seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
     2178    0.119    0.000    0.435    0.000 earley.py:78(predict_and_complete)
      198    0.118    0.001    0.265    0.001 grammar_analysis.py:78(calculate_sets)
   298683    0.103    0.000    0.183    0.000 grammar.py:18(__eq__)
783981/669240    0.099    0.000    0.133    0.000 {built-in method builtins.hash}
   569349    0.097    0.000    0.134    0.000 grammar.py:25(__hash__)
  1329969    0.094    0.000    0.095    0.000 {built-in method builtins.isinstance}
    17919    0.091    0.000    0.170    0.000 tree.py:137(iter_subtrees)
122364/121671    0.090    0.000    0.340    0.000 visitors.py:111(_call_userfunc)
   103455    0.069    0.000    0.111    0.000 earley_common.py:9(__init__)
221661/188694    0.068    0.000    0.375    0.000 visitors.py:143(_transform_children)
     4059    0.065    0.000    0.155    0.000 visitors.py:293(transform)
254418/207294    0.060    0.000    0.089    0.000 {built-in method builtins.getattr}
      495    0.053    0.000    0.187    0.000 earley_forest.py:283(visit)
   170173    0.051    0.000    0.065    0.000 lexer.py:265(__eq__)
   118206    0.050    0.000    0.069    0.000 tree.py:147(<listcomp>)
     7227    0.048    0.000    0.501    0.000 visitors.py:278(transform)
    45738    0.042    0.000    0.053    0.000 tree.py:179(expand_kids_by_data)
    86526    0.032    0.000    0.049    0.000 utils.py:345(add)
    20196    0.030    0.000    0.094    0.000 grammar_analysis.py:187(_expand_rule)
       99    0.029    0.000    1.062    0.011 load_grammar.py:690(compile)
    87219    0.027    0.000    0.040    0.000 visitors.py:171(__default__)
389509/389502    0.027    0.000    0.027    0.000 {built-in method builtins.len}
27027/5940    0.024    0.000    0.195    0.000 load_grammar.py:389(expansion)
    35442    0.024    0.000    0.077    0.000 load_grammar.py:384(_flatten)
   306405    0.021    0.000    0.021    0.000 {built-in method builtins.id}
    69300    0.020    0.000    0.020    0.000 grammar_analysis.py:70(update_set)
     4257    0.019    0.000    0.035    0.000 ast.py:54(literal_eval)
   253372    0.018    0.000    0.018    0.000 {method 'append' of 'list' objects}
    73062    0.018    0.000    0.275    0.000 visitors.py:275(_transform_tree)
33165/10494    0.017    0.000    0.236    0.000 visitors.py:342(_call_userfunc)
    71276    0.017    0.000    0.044    0.000 {method 'add' of 'set' objects}
   104445    0.016    0.000    0.016    0.000 tree.py:61(__init__)
   182754    0.016    0.000    0.016    0.000 grammar.py:121(__hash__)
     3168    0.015    0.000    0.086    0.000 tree_matcher.py:106(_build_recons_rules)
     6732    0.015    0.000    0.024    0.000 functools.py:35(update_wrapper)
    12375    0.015    0.000    0.118    0.000 utils.py:275(bfs)
    34650    0.014    0.000    0.019    0.000 grammar_analysis.py:17(__init__)
     8613    0.013    0.000    0.026    0.000 earley_forest.py:50(__init__)
    33759    0.013    0.000    0.020    0.000 utils.py:342(__contains__)
    79101    0.013    0.000    0.013    0.000 earley_common.py:28(__eq__)
     4257    0.013    0.000    0.071    0.000 load_grammar.py:566(_literal_to_pattern)
     1188    0.013    0.000    0.039    0.000 xearley.py:41(scan)
     4554    0.012    0.000    0.056    0.000 earley.py:135(<listcomp>)
    96525    0.012    0.000    0.012    0.000 tree.py:66(meta)
9207/1188    0.012    0.000    0.256    0.000 visitors.py:362(visit)
     7029    0.011    0.000    0.023    0.000 tree_matcher.py:121(<listcomp>)
     7920    0.011    0.000    0.049    0.000 earley_forest.py:437(_visit_node_out_helper)
     3960    0.011    0.000    0.022    0.000 earley_forest.py:603(transform_packed_node)
35343/33561    0.010    0.000    0.035    0.000 tree.py:134(__hash__)
    16038    0.010    0.000    0.034    0.000 grammar.py:103(__init__)
   123354    0.010    0.000    0.010    0.000 earley_common.py:31(__hash__)
      396    0.010    0.000    0.021    0.000 utils.py:23(classify)
10197/1386    0.010    0.000    0.046    0.000 visitors.py:155(_transform_tree)
     4257    0.010    0.000    0.010    0.000 {built-in method builtins.compile}
    36234    0.010    0.000    0.010    0.000 {built-in method builtins.iter}
     5544    0.009    0.000    0.044    0.000 load_grammar.py:420(expansions)
2871/1485    0.009    0.000    0.168    0.000 load_grammar.py:405(<listcomp>)
     4257    0.009    0.000    0.045    0.000 load_grammar.py:540(eval_escaping)
    70884    0.009    0.000    0.009    0.000 {built-in method builtins.next}
    34650    0.008    0.000    0.020    0.000 grammar_analysis.py:45(__hash__)
     7920    0.007    0.000    0.026    0.000 {built-in method builtins.sorted}
    23265    0.007    0.000    0.014    0.000 utils.py:339(__init__)
    10692    0.007    0.000    0.015    0.000 visitors.py:130(_call_userfunc_token)
     8811    0.007    0.000    0.021    0.000 earley_forest.py:64(add_family)
     8613    0.007    0.000    0.026    0.000 tree_matcher.py:57(make_recons_rule)
      198    0.007    0.000    0.444    0.002 earley.py:32(__init__)
     7920    0.006    0.000    0.008    0.000 earley_forest.py:145(sort_key)
      495    0.006    0.000    0.710    0.001 earley.py:262(parse)
      198    0.006    0.000    0.322    0.002 grammar_analysis.py:141(__init__)
    28017    0.006    0.000    0.012    0.000 load_grammar.py:759(<genexpr>)
    23265    0.006    0.000    0.007    0.000 {built-in method fromkeys}
       99    0.006    0.000    0.014    0.000 load_grammar.py:793(<setcomp>)
    23265    0.005    0.000    0.014    0.000 utils.py:348(__iter__)
     8811    0.005    0.000    0.010    0.000 earley_forest.py:131(__init__)
     2475    0.005    0.000    0.124    0.000 grammar_analysis.py:180(expand_rule)
     6732    0.005    0.000    0.034    0.000 visitors.py:481(__get__)
    61863    0.005    0.000    0.005    0.000 {method 'pop' of 'list' objects}
    34254    0.005    0.000    0.005    0.000 grammar_analysis.py:28(next)
     3168    0.005    0.000    0.012    0.000 earley_forest.py:581(transform_symbol_node)
     8811    0.005    0.000    0.021    0.000 earley_common.py:25(advance)
     1287    0.005    0.000    0.009    0.000 load_grammar.py:450(pattern)
     7920    0.005    0.000    0.034    0.000 earley_forest.py:85(children)
      495    0.004    0.000    0.021    0.000 earley.py:188(scan)
     3960    0.004    0.000    0.012    0.000 earley_forest.py:631(visit_packed_node_in)
    13856    0.004    0.000    0.004    0.000 {method 'match' of 're.Pattern' objects}
     2871    0.004    0.000    0.019    0.000 utils.py:190(<listcomp>)
     6732    0.004    0.000    0.029    0.000 visitors.py:470(__init__)
     3960    0.004    0.000    0.029    0.000 earley_forest.py:422(visit_symbol_node_in)
    12573    0.004    0.000    0.005    0.000 {method 'setdefault' of 'dict' objects}
     3960    0.004    0.000    0.034    0.000 earley_forest.py:638(visit_packed_node_out)
     2574    0.004    0.000    0.486    0.000 visitors.py:258(transform)
     3960    0.004    0.000    0.007    0.000 earley_forest.py:427(visit_packed_node_in)
       99    0.003    0.000    1.158    0.012 tree_matcher.py:89(__init__)
       99    0.003    0.000    2.387    0.024 Workbook.py:435(copy_cells)
     6732    0.003    0.000    0.098    0.000 visitors.py:500(_vargs_inline)
       99    0.003    0.000    0.004    0.000 load_grammar.py:806(<setcomp>)
     6732    0.003    0.000    0.094    0.000 visitors.py:478(__call__)
      297    0.003    0.000    0.006    0.000 tree_matcher.py:28(_best_from_group)
     3960    0.003    0.000    0.042    0.000 earley_forest.py:625(visit_symbol_node_in)
      297    0.003    0.000    0.580    0.002 tree_matcher.py:148(match_tree)
     4257    0.003    0.000    0.075    0.000 load_grammar.py:601(literal)
    33660    0.003    0.000    0.003    0.000 {built-in method builtins.setattr}
    12771    0.003    0.000    0.005    0.000 load_grammar.py:537(<genexpr>)
     9900    0.003    0.000    0.005    0.000 parser_frontends.py:184(match)
      198    0.003    0.000    0.438    0.002 xearley.py:39(_parse)
     7029    0.003    0.000    0.010    0.000 load_grammar.py:798(<lambda>)
     4752    0.003    0.000    0.008    0.000 {built-in method builtins.max}
     3168    0.003    0.000    0.009    0.000 tree_matcher.py:48(_match)
     3168    0.003    0.000    0.005    0.000 earley_forest.py:556(_collapse_ambig)
     3168    0.003    0.000    0.006    0.000 earley_forest.py:565(_call_rule_func)
     2079    0.003    0.000    0.003    0.000 earley.py:58(<listcomp>)
    21879    0.003    0.000    0.003    0.000 tree_matcher.py:12(is_discarded_terminal)
    35838    0.003    0.000    0.003    0.000 {method 'pop' of 'collections.deque' objects}
    40491    0.002    0.000    0.002    0.000 {method 'append' of 'collections.deque' objects}
     4257    0.002    0.000    0.013    0.000 ast.py:33(parse)
      297    0.002    0.000    0.064    0.000 earley.py:171(_parse)
       99    0.002    0.000    2.384    0.024 Workbook.py:296(transfer_cells)
      990    0.002    0.000    0.004    0.000 reconstruct.py:33(__default__)
     4257    0.002    0.000    0.009    0.000 load_grammar.py:536(_rfind)
       99    0.002    0.000    0.008    0.000 tree_matcher.py:115(<setcomp>)
    13860    0.002    0.000    0.002    0.000 grammar.py:42(__init__)
     3956    0.002    0.000    0.007    0.000 __init__.py:163(match)
     9405    0.002    0.000    0.002    0.000 grammar.py:69(__init__)
     4546    0.002    0.000    0.003    0.000 __init__.py:272(_compile)
     3960    0.002    0.000    0.003    0.000 earley_forest.py:155(children)
     2574    0.002    0.000    0.104    0.000 load_grammar.py:674(nr_deepcopy_tree)
      792    0.002    0.000    0.003    0.000 utils.py:180(convert_location_to_idx)
     4851    0.002    0.000    0.002    0.000 lexer.py:41(__init__)
     7920    0.002    0.000    0.003    0.000 utils.py:357(__len__)
     6039    0.002    0.000    0.003    0.000 lexer.py:50(__hash__)
    17919    0.002    0.000    0.002    0.000 {method 'values' of 'collections.OrderedDict' objects}
     5841    0.002    0.000    0.002    0.000 load_grammar.py:668(value)
      198    0.002    0.000    0.012    0.000 utils.py:271(<listcomp>)
      297    0.002    0.000    0.309    0.001 Workbook.py:652(recompute_cell_and_parents)
     3960    0.002    0.000    0.002    0.000 earley_forest.py:499(__init__)
      198    0.002    0.000    0.005    0.000 grammar_analysis.py:82(<setcomp>)
      297    0.002    0.000    0.002    0.000 Graph.py:330(tarjans)
    11880    0.002    0.000    0.002    0.000 {method 'remove' of 'set' objects}
     3960    0.002    0.000    0.003    0.000 earley_forest.py:70(load_paths)
    10791    0.002    0.000    0.002    0.000 grammar.py:15(__init__)
     3960    0.002    0.000    0.030    0.000 earley_forest.py:450(visit_packed_node_out)
     1980    0.002    0.000    0.011    0.000 load_grammar.py:631(expansions)
     2871    0.002    0.000    0.020    0.000 utils.py:184(dedup_list)
      198    0.002    0.000    0.003    0.000 earley.py:52(<setcomp>)
      297    0.002    0.000    0.319    0.001 Workbook.py:741(set_cell_contents)
     1774    0.002    0.000    0.002    0.000 Sheet.py:93(get_cell_value)
     2178    0.001    0.000    0.005    0.000 tree_matcher.py:65(parse_rulename)
     1980    0.001    0.000    0.003    0.000 load_grammar.py:637(<lambda>)
      792    0.001    0.000    0.005    0.000 {method 'sort' of 'list' objects}
     7920    0.001    0.000    0.001    0.000 earley_forest.py:141(is_empty)
       99    0.001    0.000    0.195    0.002 load_grammar.py:710(<listcomp>)
     8514    0.001    0.000    0.001    0.000 {method 'rfind' of 'str' objects}
    11781    0.001    0.000    0.001    0.000 {method 'replace' of 'str' objects}
     4257    0.001    0.000    0.002    0.000 {built-in method builtins.all}
     1782    0.001    0.000    0.002    0.000 lexer.py:213(_future_new)
     8613    0.001    0.000    0.001    0.000 tree_matcher.py:17(__init__)
     5643    0.001    0.000    0.006    0.000 grammar.py:22(__ne__)
     8910    0.001    0.000    0.001    0.000 {method 'startswith' of 'str' objects}
      198    0.001    0.000    0.002    0.000 tree_matcher.py:178(<dictcomp>)
      590    0.001    0.000    0.006    0.000 Parser.py:253(cell)
      891    0.001    0.000    0.002    0.000 utils.py:195(convert_idx_to_location)
      198    0.001    0.000    0.002    0.000 earley.py:53(<setcomp>)
     3168    0.001    0.000    0.019    0.000 earley_forest.py:444(visit_symbol_node_out)
     2572    0.001    0.000    0.005    0.000 {method 'join' of 'str' objects}
      592    0.001    0.000    0.002    0.000 Cell.py:81(set_cell_value)
      198    0.001    0.000    0.585    0.003 parser_frontends.py:100(parse)
     1782    0.001    0.000    0.003    0.000 lexer.py:202(__new__)
     4257    0.001    0.000    0.001    0.000 ast.py:84(_convert)
     1287    0.001    0.000    0.001    0.000 earley_forest.py:432(visit_token_node)
     1980    0.001    0.000    0.003    0.000 lexer.py:81(to_regexp)
     3168    0.001    0.000    0.001    0.000 earley_forest.py:571(_call_ambig_func)
       99    0.001    0.000    0.003    0.000 tree_matcher.py:108(<setcomp>)
      792    0.001    0.000    0.002    0.000 tree_matcher.py:21(__call__)
     3465    0.001    0.000    0.001    0.000 load_grammar.py:621(expansion)
    11484    0.001    0.000    0.001    0.000 tree.py:175(<lambda>)
     8118    0.001    0.000    0.001    0.000 earley_forest.py:101(__hash__)
     2178    0.001    0.000    0.003    0.000 lexer.py:125(__init__)
      392    0.001    0.000    0.012    0.000 Workbook.py:596(recompute_cell_value)
     7920    0.001    0.000    0.001    0.000 earley_forest.py:548(_check_cycle)
     1584    0.001    0.000    0.006    0.000 tree_matcher.py:61(make_recons_rule_to_term)
     6833    0.001    0.000    0.001    0.000 {method 'update' of 'dict' objects}
      792    0.001    0.000    0.001    0.000 earley_forest.py:591(transform_intermediate_node)
      295    0.001    0.000    0.299    0.001 Workbook.py:558(get_formula_value)
     1089    0.001    0.000    0.003    0.000 load_grammar.py:346(expr)
    10494    0.001    0.000    0.001    0.000 visitors.py:178(__default_token__)
     3960    0.001    0.000    0.001    0.000 earley_forest.py:158(<listcomp>)
     9172    0.001    0.000    0.001    0.000 {method 'lower' of 'str' objects}
     8811    0.001    0.000    0.001    0.000 earley_forest.py:169(__hash__)
      495    0.001    0.000    0.188    0.000 earley_forest.py:535(visit)
     7029    0.001    0.000    0.001    0.000 {built-in method builtins.any}
     1683    0.001    0.000    0.001    0.000 earley_forest.py:193(__init__)
     1980    0.001    0.000    0.002    0.000 __init__.py:253(escape)
     7029    0.001    0.000    0.001    0.000 load_grammar.py:431(expansion)
     1778    0.001    0.000    0.004    0.000 utils.py:132(check_valid_cell_location)
  885/295    0.001    0.000    0.012    0.000 visitors.py:421(_visit_tree)
     2561    0.001    0.000    0.001    0.000 utils.py:79(get_hidden_name)
  792/396    0.001    0.000    0.592    0.001 reconstruct.py:85(_reconstruct)
     1980    0.001    0.000    0.001    0.000 {method 'translate' of 'str' objects}
     1485    0.001    0.000    0.016    0.000 tree.py:169(find_pred)
     1980    0.001    0.000    0.001    0.000 parse_tree_builder.py:20(__call__)
      495    0.001    0.000    0.003    0.000 earley.py:284(<listcomp>)
      495    0.001    0.000    0.189    0.000 earley_forest.py:397(transform)
      590    0.001    0.000    0.003    0.000 Workbook.py:822(get_cell_value)
       99    0.001    0.000    0.045    0.000 load_grammar.py:693(<listcomp>)
       99    0.001    0.000    0.001    0.000 tree_matcher.py:116(<setcomp>)
  885/295    0.001    0.000    0.011    0.000 visitors.py:444(inner)
     2475    0.001    0.000    0.001    0.000 typing.py:352(inner)
     9900    0.001    0.000    0.001    0.000 {method 'popleft' of 'collections.deque' objects}
      495    0.001    0.000    0.001    0.000 earley_forest.py:523(__init__)
     2475    0.001    0.000    0.004    0.000 load_grammar.py:639(<genexpr>)
     6435    0.001    0.000    0.001    0.000 grammar_analysis.py:149(<lambda>)
  885/295    0.001    0.000    0.009    0.000 visitors.py:430(<listcomp>)
      297    0.001    0.000    0.004    0.000 Sheet.py:60(set_cell_contents)
      885    0.001    0.000    0.008    0.000 Parser.py:40(fix_formula)
     3564    0.001    0.000    0.001    0.000 tree_matcher.py:44(<lambda>)
     5049    0.001    0.000    0.001    0.000 load_grammar.py:572(<genexpr>)
      394    0.001    0.000    0.001    0.000 Workbook.py:701(_get_sheet_name_location)
     4046    0.001    0.000    0.001    0.000 {method 'get' of 'dict' objects}
      295    0.001    0.000    0.001    0.000 Parser.py:211(mul_expr)
     6435    0.001    0.000    0.001    0.000 grammar_analysis.py:172(<lambda>)
       99    0.001    0.000    1.159    0.012 reconstruct.py:80(__init__)
     2376    0.001    0.000    0.001    0.000 <frozen abc>:117(__instancecheck__)
     2376    0.001    0.000    0.001    0.000 {built-in method _abc._abc_instancecheck}
      792    0.001    0.000    0.002    0.000 grammar.py:124(__eq__)
     1782    0.001    0.000    0.001    0.000 lexer.py:53(__eq__)
      495    0.001    0.000    0.001    0.000 earley_forest.py:390(__init__)
     2079    0.001    0.000    0.001    0.000 lexer.py:70(_get_flags)
     6633    0.001    0.000    0.001    0.000 typing.py:2256(cast)
      297    0.001    0.000    0.001    0.000 earley.py:245(<setcomp>)
      297    0.001    0.000    0.002    0.000 Workbook.py:728(clean_children_cells)
     4851    0.001    0.000    0.001    0.000 {method 'lstrip' of 'str' objects}
  885/295    0.001    0.000    0.010    0.000 visitors.py:429(visit_children)
     1485    0.001    0.000    0.016    0.000 tree.py:173(find_data)
       99    0.001    0.000    0.061    0.001 load_grammar.py:694(<listcomp>)
      198    0.001    0.000    0.003    0.000 Parser.py:420(CELLREF_NO_ABS)
     2970    0.001    0.000    0.001    0.000 load_grammar.py:617(pattern)
      198    0.001    0.000    0.001    0.000 {built-in method builtins.print}
     1584    0.000    0.000    0.001    0.000 load_grammar.py:210(_args_as_int)
     1386    0.000    0.000    0.047    0.000 visitors.py:159(transform)
      198    0.000    0.000    0.001    0.000 parser_frontends.py:96(_make_lexer_thread)
      295    0.000    0.000    0.000    0.000 Parser.py:97(__init__)
     3069    0.000    0.000    0.000    0.000 visitors.py:108(__init__)
      198    0.000    0.000    0.011    0.000 grammar_analysis.py:175(<dictcomp>)
     1881    0.000    0.000    0.000    0.000 {built-in method __new__ of type object at 0x860f60}
     1980    0.000    0.000    0.001    0.000 lexer.py:88(max_width)
       99    0.000    0.000    0.001    0.000 load_grammar.py:446(<dictcomp>)
      885    0.000    0.000    0.001    0.000 utils.py:296(get_highest_precedence_error)
      198    0.000    0.000    0.001    0.000 grammar_analysis.py:145(<dictcomp>)
      594    0.000    0.000    0.001    0.000 load_grammar.py:411(alias)
      297    0.000    0.000    0.008    0.000 tree_matcher.py:42(_best_rules_from_group)
     3267    0.000    0.000    0.000    0.000 {built-in method builtins.hasattr}
      297    0.000    0.000    0.319    0.001 Workbook.py:36(run_func)
     1683    0.000    0.000    0.000    0.000 utils.py:354(__bool__)
     1980    0.000    0.000    0.001    0.000 lexer.py:84(min_width)
      590    0.000    0.000    0.001    0.000 __init__.py:178(sub)
     2970    0.000    0.000    0.000    0.000 load_grammar.py:663(value)
       99    0.000    0.000    0.001    0.000 copy.py:66(copy)
      198    0.000    0.000    0.001    0.000 Parser.py:413(cell)
     2376    0.000    0.000    0.000    0.000 tree.py:32(__init__)
      297    0.000    0.000    0.001    0.000 Cell.py:65(set_contents)
       99    0.000    0.000    0.002    0.000 load_grammar.py:246(_add_recurse_rule)
      297    0.000    0.000    0.001    0.000 Workbook.py:794(get_cell_contents)
      792    0.000    0.000    0.003    0.000 earley_forest.py:447(visit_intermediate_node_out)
      394    0.000    0.000    0.001    0.000 utils.py:208(remove_exponent)
     2178    0.000    0.000    0.000    0.000 load_grammar.py:809(<lambda>)
      495    0.000    0.000    0.000    0.000 load_grammar.py:640(<setcomp>)
      198    0.000    0.000    0.000    0.000 grammar_analysis.py:60(__init__)
      792    0.000    0.000    0.000    0.000 reconstruct.py:15(is_iter_empty)
      986    0.000    0.000    0.000    0.000 Sheet.py:120(get_cell)
      295    0.000    0.000    0.002    0.000 Sheet.py:104(set_cell_value)
      198    0.000    0.000    0.001    0.000 grammar_analysis.py:163(<dictcomp>)
      396    0.000    0.000    0.000    0.000 <frozen codecs>:327(reset)
       99    0.000    0.000    0.592    0.006 reconstruct.py:96(reconstruct)
      198    0.000    0.000    0.001    0.000 grammar_analysis.py:166(<dictcomp>)
      590    0.000    0.000    0.000    0.000 {method 'sub' of 're.Pattern' objects}
      297    0.000    0.000    0.000    0.000 Sheet.py:124(update_extent)
     2178    0.000    0.000    0.000    0.000 {method 'groups' of 're.Match' objects}
       99    0.000    0.000    0.000    0.000 utils.py:308(error_matcher)
     1881    0.000    0.000    0.000    0.000 {method 'upper' of 'str' objects}
       99    0.000    0.000    0.000    0.000 load_grammar.py:642(expr)
      392    0.000    0.000    0.001    0.000 Workbook.py:589(get_cell_from_location)
      198    0.000    0.000    0.012    0.000 grammar_analysis.py:160(<dictcomp>)
       99    0.000    0.000    0.004    0.000 load_grammar.py:375(maybe)
      689    0.000    0.000    0.000    0.000 utils.py:213(is_formula)
      990    0.000    0.000    0.000    0.000 load_grammar.py:434(alias)
       99    0.000    0.000    0.000    0.000 reconstruct.py:83(<dictcomp>)
      495    0.000    0.000    0.000    0.000 load_grammar.py:613(_make_joined_pattern)
     1771    0.000    0.000    0.000    0.000 Cell.py:125(get_value)
     1683    0.000    0.000    0.000    0.000 earley_forest.py:207(__hash__)
       99    0.000    0.000    0.001    0.000 Workbook.py:714(add_children_cells)
      784    0.000    0.000    0.000    0.000 Graph.py:137(get_parents_from_cell)
      198    0.000    0.000    0.000    0.000 parse_tree_builder.py:145(__call__)
     1188    0.000    0.000    0.000    0.000 {method 'group' of 're.Match' objects}
      196    0.000    0.000    0.000    0.000 Graph.py:96(update_child)
       99    0.000    0.000    0.000    0.000 {method '__reduce_ex__' of 'object' objects}
      792    0.000    0.000    0.000    0.000 tree_matcher.py:43(<lambda>)
      198    0.000    0.000    0.585    0.003 lark.py:640(parse)
      297    0.000    0.000    0.000    0.000 load_grammar.py:201(_will_not_get_removed)
      396    0.000    0.000    0.001    0.000 {built-in method builtins.sum}
      394    0.000    0.000    0.000    0.000 {method 'to_integral' of 'decimal.Decimal' objects}
      297    0.000    0.000    0.000    0.000 Sheet.py:99(get_cell_contents)
       99    0.000    0.000    0.000    0.000 copy.py:259(_reconstruct)
      198    0.000    0.000    0.000    0.000 parser_frontends.py:86(_verify_start)
      396    0.000    0.000    0.000    0.000 lark.py:220(__getattr__)
      295    0.000    0.000    0.013    0.000 visitors.py:415(visit)
     1876    0.000    0.000    0.000    0.000 {method 'strip' of 'str' objects}
      199    0.000    0.000    0.000    0.000 Workbook.py:554(get_sheet_name_from_hidden)
      891    0.000    0.000    0.000    0.000 {built-in method builtins.divmod}
      396    0.000    0.000    0.001    0.000 load_grammar.py:219(expansion)
       99    0.000    0.000    0.000    0.000 load_grammar.py:235(_name_rule)
      198    0.000    0.000    0.013    0.000 utils.py:269(classify_bool)
     1586    0.000    0.000    0.000    0.000 {built-in method builtins.ord}
       99    0.000    0.000    0.000    0.000 load_grammar.py:763(<listcomp>)
       99    0.000    0.000    0.000    0.000 load_grammar.py:743(<setcomp>)
     1287    0.000    0.000    0.000    0.000 earley_forest.py:418(transform_token_node)
      198    0.000    0.000    0.000    0.000 visitors.py:163(__mul__)
      198    0.000    0.000    0.000    0.000 Graph.py:68(add_connection)
     1083    0.000    0.000    0.000    0.000 Cell.py:128(get_contents)
       99    0.000    0.000    0.001    0.000 load_grammar.py:443(__init__)
     1188    0.000    0.000    0.000    0.000 {method 'end' of 're.Match' objects}
       99    0.000    0.000    0.001    0.000 load_grammar.py:240(_add_rule)
      394    0.000    0.000    0.000    0.000 {method 'split' of 'str' objects}
      198    0.000    0.000    0.000    0.000 common.py:83(__init__)
      198    0.000    0.000    0.000    0.000 visitors.py:263(__mul__)
       99    0.000    0.000    0.000    0.000 Cell.py:59(cache_formula)
      891    0.000    0.000    0.000    0.000 {built-in method builtins.chr}
     1188    0.000    0.000    0.000    0.000 load_grammar.py:428(expansions)
       99    0.000    0.000    0.000    0.000 load_grammar.py:445(<setcomp>)
      495    0.000    0.000    0.000    0.000 {method 'clear' of 'set' objects}
      394    0.000    0.000    0.000    0.000 {method 'normalize' of 'decimal.Decimal' objects}
      693    0.000    0.000    0.000    0.000 {method 'values' of 'dict' objects}
      297    0.000    0.000    0.001    0.000 load_grammar.py:222(expansions)
      495    0.000    0.000    0.000    0.000 earley.py:254(<setcomp>)
       99    0.000    0.000    0.000    0.000 load_grammar.py:516(__init__)
      694    0.000    0.000    0.000    0.000 {method 'items' of 'dict' objects}
      495    0.000    0.000    0.000    0.000 earley_forest.py:232(__init__)
       99    0.000    0.000    0.000    0.000 load_grammar.py:797(<setcomp>)
      490    0.000    0.000    0.000    0.000 Cell.py:135(get_children)
       99    0.000    0.000    0.000    0.000 copyreg.py:104(__newobj__)
       99    0.000    0.000    0.000    0.000 load_grammar.py:228(__init__)
      295    0.000    0.000    0.000    0.000 Cell.py:131(set_children)
      396    0.000    0.000    0.000    0.000 visitors.py:255(__init__)
      491    0.000    0.000    0.000    0.000 Cell.py:62(get_cached_formula)
      211    0.000    0.000    0.000    0.000 {built-in method builtins.min}
      196    0.000    0.000    0.000    0.000 {method 'remove' of 'list' objects}
      297    0.000    0.000    0.000    0.000 tree_matcher.py:74(__init__)
      594    0.000    0.000    0.000    0.000 {method 'rstrip' of 'str' objects}
      4/1    0.000    0.000    0.000    0.000 _parser.py:509(_parse)
      295    0.000    0.000    0.000    0.000 Parser.py:108(get_cell_refs)
      394    0.000    0.000    0.000    0.000 {method 'is_finite' of 'decimal.Decimal' objects}
       99    0.000    0.000    0.000    0.000 lexer.py:98(to_regexp)
      297    0.000    0.000    0.000    0.000 tree_matcher.py:77(lex)
       99    0.000    0.000    0.000    0.000 reconstruct.py:29(__init__)
      396    0.000    0.000    0.000    0.000 <frozen codecs>:276(reset)
      4/1    0.000    0.000    0.000    0.000 _parser.py:449(_parse_sub)
      6/1    0.000    0.000    0.000    0.000 _compiler.py:37(_compile)
      199    0.000    0.000    0.000    0.000 Sheet.py:54(get_sheet_name)
       99    0.000    0.000    0.000    0.000 Parser.py:409(__init__)
       99    0.000    0.000    0.000    0.000 {method 'reverse' of 'list' objects}
        1    0.000    0.000    0.000    0.000 _compiler.py:571(_code)
       99    0.000    0.000    0.000    0.000 load_grammar.py:498(__init__)
       99    0.000    0.000    0.000    0.000 load_grammar.py:198(__init__)
       99    0.000    0.000    0.000    0.000 {built-in method builtins.issubclass}
        1    0.000    0.000    0.000    0.000 _parser.py:972(parse)
      8/3    0.000    0.000    0.000    0.000 _parser.py:174(getwidth)
       34    0.000    0.000    0.000    0.000 _parser.py:164(__getitem__)
        1    0.000    0.000    0.000    0.000 _compiler.py:509(_compile_info)
        1    0.000    0.000    0.000    0.000 _compiler.py:738(compile)
       17    0.000    0.000    0.000    0.000 _parser.py:233(__next)
        2    0.000    0.000    0.000    0.000 enum.py:686(__call__)
        2    0.000    0.000    0.000    0.000 enum.py:1509(__and__)
        2    0.000    0.000    0.000    0.000 _parser.py:94(closegroup)
      2/1    0.000    0.000    0.000    0.000 _compiler.py:434(_get_literal_prefix)
        1    0.000    0.000    0.000    0.000 _compiler.py:241(_optimize_charset)
       11    0.000    0.000    0.000    0.000 _parser.py:254(get)
       18    0.000    0.000    0.000    0.000 _parser.py:249(match)
        1    0.000    0.000    0.000    0.000 _parser.py:224(__init__)
        3    0.000    0.000    0.000    0.000 Cell.py:46(__init__)
       11    0.000    0.000    0.000    0.000 _parser.py:286(tell)
        2    0.000    0.000    0.000    0.000 _parser.py:82(opengroup)
        1    0.000    0.000    0.000    0.000 cProfile.py:118(__exit__)
       13    0.000    0.000    0.000    0.000 _parser.py:160(__len__)
        7    0.000    0.000    0.000    0.000 _parser.py:109(__init__)
        7    0.000    0.000    0.000    0.000 _parser.py:172(append)
        1    0.000    0.000    0.000    0.000 _compiler.py:214(_compile_charset)
        1    0.000    0.000    0.000    0.000 _compiler.py:465(_get_charset_prefix)
        3    0.000    0.000    0.000    0.000 _compiler.py:396(_simple)
        6    0.000    0.000    0.000    0.000 _parser.py:79(groups)
        6    0.000    0.000    0.000    0.000 {built-in method _heapq.heappush}
        2    0.000    0.000    0.000    0.000 enum.py:1091(__new__)
        2    0.000    0.000    0.000    0.000 _compiler.py:568(isstring)
        3    0.000    0.000    0.000    0.000 _parser.py:168(__setitem__)
        1    0.000    0.000    0.000    0.000 _parser.py:73(__init__)
        4    0.000    0.000    0.000    0.000 _compiler.py:31(_combine_flags)
        1    0.000    0.000    0.000    0.000 {method 'find' of 'bytearray' objects}
        1    0.000    0.000    0.000    0.000 {built-in method _sre.compile}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
        1    0.000    0.000    0.000    0.000 _parser.py:956(fix_flags)
        1    0.000    0.000    0.000    0.000 _parser.py:369(_escape)
        3    0.000    0.000    0.000    0.000 _compiler.py:426(_get_iscased)
        1    0.000    0.000    0.000    0.000 _parser.py:288(seek)
        1    0.000    0.000    0.000    0.000 {method 'extend' of 'list' objects}



##################Running pro_copy_cells2... #######################
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
=(A1 + 5) / 2 - 6 * IF(TRUE, 2, 4) - 1/7 + IFERROR(False, 1) - 6  + IF(FALSE, 0 , (1*6-4 * 1/2 + (6*1 - 2/(5+1) * 1000)))
(A1+5)/2-6*IF(TRUE,2,4)-1/7+IFERROR(False,1)-6+IF(FALSE,0,(1*6-4*1/2+(6*1-2/(5+1)*1000)))
for test <function pro_copy_cells2 at 0x7f2a40461260> total time: 129.45823431399987
Total Logs
         40341025 function calls (40079301 primitive calls) in 12.700 seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
    35739    2.116    0.000    7.807    0.000 earley.py:78(predict_and_complete)
  1902582    1.229    0.000    2.021    0.000 earley_common.py:9(__init__)
     5247    0.839    0.000    2.825    0.001 earley_forest.py:283(visit)
4897643/4734096    0.769    0.000    0.986    0.000 {built-in method builtins.hash}
  1652508    0.594    0.000    0.896    0.000 utils.py:345(add)
  1393454    0.541    0.000    1.015    0.000 grammar.py:18(__eq__)
  2657872    0.464    0.000    0.642    0.000 grammar.py:25(__hash__)
  1167665    0.324    0.000    0.408    0.000 lexer.py:265(__eq__)
  3797999    0.292    0.000    0.292    0.000 {built-in method builtins.isinstance}
    20889    0.244    0.000    0.782    0.000 xearley.py:41(scan)
  1450944    0.233    0.000    0.236    0.000 earley_common.py:28(__eq__)
   594594    0.221    0.000    0.340    0.000 utils.py:342(__contains__)
   376002    0.215    0.000    0.246    0.000 {built-in method fromkeys}
   137016    0.209    0.000    0.542    0.000 earley_forest.py:50(__init__)
    66825    0.205    0.000    0.943    0.000 earley.py:135(<listcomp>)
  2397186    0.190    0.000    0.190    0.000 earley_common.py:31(__hash__)
  2095843    0.180    0.000    0.180    0.000 grammar.py:121(__hash__)
   133848    0.176    0.000    0.775    0.000 earley_forest.py:437(_visit_node_out_helper)
    68112    0.163    0.000    0.373    0.000 earley_forest.py:603(transform_packed_node)
  2370040    0.158    0.000    0.158    0.000 {built-in method builtins.len}
  2228891    0.154    0.000    0.154    0.000 {method 'append' of 'list' objects}
   376002    0.148    0.000    0.394    0.000 utils.py:339(__init__)
  1187620    0.135    0.000    0.135    0.000 {built-in method builtins.next}
  1574409    0.117    0.000    0.117    0.000 {built-in method builtins.id}
   131472    0.110    0.000    0.276    0.000 {built-in method builtins.sorted}
   140382    0.105    0.000    0.318    0.000 earley_forest.py:64(add_family)
   386793    0.089    0.000    0.138    0.000 utils.py:348(__iter__)
   140382    0.083    0.000    0.153    0.000 earley_forest.py:131(__init__)
     9603    0.079    0.000    0.415    0.000 earley.py:188(scan)
    48114    0.075    0.000    0.135    0.000 earley_forest.py:565(_call_rule_func)
   140382    0.071    0.000    0.322    0.000 earley_common.py:25(advance)
    68112    0.071    0.000    0.200    0.000 earley_forest.py:631(visit_packed_node_in)
   131472    0.070    0.000    0.395    0.000 earley_forest.py:85(children)
   310666    0.068    0.000    0.068    0.000 {method 'match' of 're.Pattern' objects}
     5247    0.067    0.000   12.148    0.002 earley.py:262(parse)
    48114    0.067    0.000    0.160    0.000 earley_forest.py:581(transform_symbol_node)
   250767    0.063    0.000    0.112    0.000 parser_frontends.py:184(match)
   536326    0.063    0.000    0.063    0.000 {built-in method builtins.iter}
    44847    0.059    0.000    0.096    0.000 reconstruct.py:33(__default__)
    68112    0.058    0.000    0.576    0.000 earley_forest.py:638(visit_packed_node_out)
    65736    0.057    0.000    0.322    0.000 earley_forest.py:422(visit_symbol_node_in)
    68112    0.057    0.000    0.119    0.000 earley_forest.py:427(visit_packed_node_in)
   202752    0.055    0.000    0.077    0.000 {method 'setdefault' of 'dict' objects}
   136224    0.052    0.000    0.074    0.000 earley_forest.py:145(sort_key)
131008/116423    0.050    0.000    0.261    0.000 visitors.py:143(_transform_children)
    65736    0.048    0.000    0.514    0.000 earley_forest.py:625(visit_symbol_node_in)
182956/182480    0.047    0.000    0.048    0.000 {built-in method builtins.getattr}
51119/51112    0.045    0.000    0.185    0.000 visitors.py:111(_call_userfunc)
   620235    0.042    0.000    0.042    0.000 {method 'pop' of 'collections.deque' objects}
     5227    0.040    0.000    0.073    0.000 tree.py:137(iter_subtrees)
      198    0.040    0.000    7.217    0.036 xearley.py:39(_parse)
    60588    0.040    0.000    0.164    0.000 tree_matcher.py:48(_match)
     5049    0.040    0.000    1.892    0.000 earley.py:171(_parse)
     5119    0.038    0.000    0.380    0.000 visitors.py:278(transform)
   337447    0.038    0.000    0.038    0.000 {method 'add' of 'set' objects}
    59899    0.035    0.000    0.084    0.000 __init__.py:163(match)
    48114    0.034    0.000    0.056    0.000 earley_forest.py:556(_collapse_ambig)
   582590    0.034    0.000    0.034    0.000 {method 'append' of 'collections.deque' objects}
    59301    0.033    0.000    0.121    0.000 tree_matcher.py:65(parse_rulename)
    68112    0.032    0.000    0.047    0.000 earley_forest.py:155(children)
   131472    0.029    0.000    0.041    0.000 utils.py:357(__len__)
    65736    0.027    0.000    0.029    0.000 earley_forest.py:499(__init__)
    65736    0.026    0.000    0.049    0.000 earley_forest.py:70(load_paths)
   199584    0.026    0.000    0.026    0.000 {method 'remove' of 'set' objects}
    86781    0.025    0.000    0.031    0.000 tree.py:66(meta)
    68112    0.024    0.000    0.508    0.000 earley_forest.py:450(visit_packed_node_out)
    59998    0.022    0.000    0.030    0.000 __init__.py:272(_compile)
    34255    0.022    0.000    0.040    0.000 visitors.py:130(_call_userfunc_token)
   136224    0.022    0.000    0.022    0.000 earley_forest.py:141(is_empty)
    46031    0.021    0.000    0.029    0.000 tree.py:147(<listcomp>)
    18018    0.021    0.000    0.038    0.000 tree_matcher.py:21(__call__)
    17622    0.020    0.000    0.028    0.000 earley_forest.py:591(transform_intermediate_node)
44055/6633    0.018    0.000    3.582    0.001 reconstruct.py:85(_reconstruct)
     5049    0.018    0.000    3.188    0.001 tree_matcher.py:148(match_tree)
    48114    0.017    0.000    0.254    0.000 earley_forest.py:444(visit_symbol_node_out)
    22869    0.017    0.000    0.021    0.000 earley_forest.py:432(visit_token_node)
   136026    0.017    0.000    0.017    0.000 earley_forest.py:101(__hash__)
   133848    0.016    0.000    0.016    0.000 earley_forest.py:548(_check_cycle)
    48114    0.015    0.000    0.020    0.000 earley_forest.py:571(_call_ambig_func)
    68112    0.015    0.000    0.015    0.000 earley_forest.py:158(<listcomp>)
   140382    0.015    0.000    0.015    0.000 earley_forest.py:169(__hash__)
    31185    0.014    0.000    0.033    0.000 earley_forest.py:193(__init__)
    20691    0.014    0.000    0.019    0.000 lexer.py:213(_future_new)
   134381    0.014    0.000    0.014    0.000 {method 'pop' of 'list' objects}
    45575    0.013    0.000    0.185    0.000 visitors.py:275(_transform_tree)
    62020    0.011    0.000    0.011    0.000 tree.py:61(__init__)
      198    0.011    0.000    9.025    0.046 parser_frontends.py:100(parse)
    20691    0.011    0.000    0.030    0.000 lexer.py:202(__new__)
     5247    0.010    0.000    2.835    0.001 earley_forest.py:535(visit)
27184/5287    0.008    0.000    0.015    0.000 tree.py:134(__hash__)
    22770    0.008    0.000    0.011    0.000 parse_tree_builder.py:20(__call__)
     5049    0.008    0.000    0.015    0.000 earley.py:245(<setcomp>)
     5247    0.007    0.000    2.843    0.001 earley_forest.py:397(transform)
    32769    0.007    0.000    0.007    0.000 utils.py:354(__bool__)
    18018    0.007    0.000    0.009    0.000 reconstruct.py:15(is_iter_empty)
     5247    0.006    0.000    0.012    0.000 earley_forest.py:523(__init__)
    17622    0.006    0.000    0.062    0.000 earley_forest.py:447(visit_intermediate_node_out)
    59301    0.006    0.000    0.006    0.000 {method 'groups' of 're.Match' objects}
    44959    0.006    0.000    0.006    0.000 tree.py:32(__init__)
     5247    0.006    0.000    0.017    0.000 earley.py:284(<listcomp>)
    48115    0.005    0.000    0.005    0.000 {built-in method builtins.hasattr}
     5247    0.005    0.000    0.006    0.000 earley_forest.py:390(__init__)
    20692    0.005    0.000    0.005    0.000 {built-in method __new__ of type object at 0x860f60}
 5149/112    0.005    0.000    0.031    0.000 visitors.py:155(_transform_tree)
        7    0.004    0.001    0.009    0.001 grammar_analysis.py:78(calculate_sets)
    31185    0.004    0.000    0.004    0.000 earley_forest.py:207(__hash__)
        1    0.004    0.004   12.700   12.700 Workbook.py:296(transfer_cells)
    24664    0.004    0.000    0.004    0.000 tree_matcher.py:12(is_discarded_terminal)
     3069    0.003    0.000    0.011    0.000 xearley.py:88(<listcomp>)
  4752/99    0.003    0.000    0.029    0.000 visitors.py:421(_visit_tree)
     2574    0.003    0.000    0.004    0.000 parse_tree_builder.py:145(__call__)
  4455/99    0.003    0.000    0.028    0.000 visitors.py:430(<listcomp>)
    34156    0.003    0.000    0.003    0.000 visitors.py:178(__default_token__)
    20394    0.003    0.000    0.003    0.000 {method 'group' of 're.Match' objects}
       99    0.003    0.000    3.585    0.036 reconstruct.py:96(reconstruct)
  4455/99    0.003    0.000    0.029    0.000 visitors.py:444(inner)
     3069    0.003    0.000    0.003    0.000 xearley.py:85(<listcomp>)
     4455    0.003    0.000    0.011    0.000 Parser.py:40(fix_formula)
    26532    0.002    0.000    0.002    0.000 {method 'end' of 're.Match' objects}
    11118    0.002    0.000    0.002    0.000 grammar.py:42(__init__)
    22869    0.002    0.000    0.002    0.000 earley_forest.py:418(transform_token_node)
     9603    0.002    0.000    0.002    0.000 earley.py:254(<setcomp>)
  4455/99    0.002    0.000    0.028    0.000 visitors.py:429(visit_children)
     5830    0.002    0.000    0.003    0.000 visitors.py:171(__default__)
     9603    0.002    0.000    0.002    0.000 {method 'clear' of 'set' objects}
    10319    0.002    0.000    0.002    0.000 grammar.py:15(__init__)
     4455    0.002    0.000    0.002    0.000 utils.py:296(get_highest_precedence_error)
      198    0.001    0.000    4.502    0.023 Workbook.py:652(recompute_cell_and_parents)
     7427    0.001    0.000    0.001    0.000 {method 'get' of 'dict' objects}
      198    0.001    0.000    4.508    0.023 Workbook.py:741(set_cell_contents)
      300    0.001    0.000    0.002    0.000 utils.py:180(convert_location_to_idx)
      702    0.001    0.000    0.003    0.000 grammar_analysis.py:187(_expand_rule)
      891    0.001    0.000    0.001    0.000 Parser.py:211(mul_expr)
      990    0.001    0.000    0.001    0.000 Parser.py:169(add_expr)
     1782    0.001    0.000    0.001    0.000 Parser.py:243(number)
     5049    0.001    0.000    0.001    0.000 tree_matcher.py:74(__init__)
      198    0.001    0.000    0.003    0.000 Sheet.py:60(set_cell_contents)
     6138    0.001    0.000    0.001    0.000 {method 'extend' of 'list' objects}
     5247    0.001    0.000    0.001    0.000 earley_forest.py:232(__init__)
      198    0.001    0.000    0.001    0.000 {built-in method builtins.print}
      297    0.001    0.000    0.016    0.000 Parser.py:330(function)
     5049    0.001    0.000    0.001    0.000 tree_matcher.py:77(lex)
      496    0.001    0.000    0.001    0.000 utils.py:195(convert_idx_to_location)
     5227    0.001    0.000    0.001    0.000 {method 'values' of 'collections.OrderedDict' objects}
     2391    0.001    0.000    0.001    0.000 grammar_analysis.py:70(update_set)
       41    0.001    0.000    0.002    0.000 visitors.py:293(transform)
       99    0.001    0.000    4.498    0.045 Workbook.py:558(get_formula_value)
      450    0.001    0.000    0.004    0.000 utils.py:275(bfs)
      693    0.001    0.000    0.001    0.000 Sheet.py:93(get_cell_value)
      803    0.001    0.000    0.001    0.000 {method 'join' of 'str' objects}
      297    0.001    0.000    0.001    0.000 Cell.py:81(set_cell_value)
      198    0.001    0.000    0.001    0.000 parser_frontends.py:96(_make_lexer_thread)
     1189    0.000    0.000    0.001    0.000 grammar_analysis.py:17(__init__)
       99    0.000    0.000    0.002    0.000 Parser.py:253(cell)
      198    0.000    0.000    0.014    0.000 Functions.py:366(func)
      462    0.000    0.000    0.001    0.000 tree.py:179(expand_kids_by_data)
       99    0.000    0.000    0.002    0.000 Parser.py:420(CELLREF_NO_ABS)
      598    0.000    0.000    0.002    0.000 utils.py:132(check_valid_cell_location)
     2876    0.000    0.000    0.000    0.000 {method 'lower' of 'str' objects}
      396    0.000    0.000    0.000    0.000 <frozen codecs>:327(reset)
      198    0.000    0.000    4.508    0.023 Workbook.py:36(run_func)
       14    0.000    0.000    0.001    0.000 utils.py:23(classify)
   273/60    0.000    0.000    0.002    0.000 load_grammar.py:389(expansion)
      198    0.000    0.000    9.025    0.046 lark.py:640(parse)
        1    0.000    0.000    0.011    0.011 load_grammar.py:690(compile)
      792    0.000    0.000    0.000    0.000 utils.py:79(get_hidden_name)
     1189    0.000    0.000    0.001    0.000 grammar_analysis.py:45(__hash__)
       99    0.000    0.000    0.001    0.000 Workbook.py:822(get_cell_value)
      198    0.000    0.000    0.001    0.000 Cell.py:65(set_contents)
   594/99    0.000    0.000    0.029    0.000 visitors.py:415(visit)
       99    0.000    0.000    0.000    0.000 Workbook.py:701(_get_sheet_name_location)
        7    0.000    0.000    0.016    0.002 earley.py:32(__init__)
      495    0.000    0.000    0.013    0.000 Functions.py:108(eval_arg)
       99    0.000    0.000    0.001    0.000 Parser.py:413(cell)
      198    0.000    0.000    0.000    0.000 Functions.py:363(__init__)
        7    0.000    0.000    0.011    0.002 grammar_analysis.py:141(__init__)
       99    0.000    0.000    0.001    0.000 Workbook.py:714(add_children_cells)
      198    0.000    0.000    0.000    0.000 parser_frontends.py:86(_verify_start)
       99    0.000    0.000    0.000    0.000 Parser.py:97(__init__)
      198    0.000    0.000    0.000    0.000 Sheet.py:124(update_extent)
      297    0.000    0.000    0.000    0.000 Parser.py:289(boolean)
       89    0.000    0.000    0.005    0.000 grammar_analysis.py:180(expand_rule)
     1192    0.000    0.000    0.000    0.000 {method 'upper' of 'str' objects}
      396    0.000    0.000    0.000    0.000 {built-in method _heapq.heappush}
      198    0.000    0.000    0.001    0.000 Cell.py:46(__init__)
      297    0.000    0.000    0.014    0.000 Functions.py:111(__call__)
  335/106    0.000    0.000    0.002    0.000 visitors.py:342(_call_userfunc)
      200    0.000    0.000    0.000    0.000 lark.py:220(__getattr__)
      198    0.000    0.000    0.000    0.000 utils.py:26(convert_to)
      198    0.000    0.000    0.001    0.000 Workbook.py:794(get_cell_contents)
      198    0.000    0.000    0.000    0.000 Workbook.py:554(get_sheet_name_from_hidden)
       43    0.000    0.000    0.001    0.000 load_grammar.py:566(_literal_to_pattern)
     1175    0.000    0.000    0.000    0.000 grammar_analysis.py:28(next)
      198    0.000    0.000    0.000    0.000 Workbook.py:728(clean_children_cells)
       99    0.000    0.000    0.000    0.000 __init__.py:178(sub)
       68    0.000    0.000    0.000    0.000 functools.py:35(update_wrapper)
       32    0.000    0.000    0.001    0.000 tree_matcher.py:106(_build_recons_rules)
      396    0.000    0.000    0.000    0.000 Sheet.py:120(get_cell)
       99    0.000    0.000    0.000    0.000 {method 'sub' of 're.Pattern' objects}
      358    0.000    0.000    0.001    0.000 load_grammar.py:384(_flatten)
       99    0.000    0.000    0.001    0.000 Sheet.py:104(set_cell_value)
      297    0.000    0.000    0.000    0.000 Functions.py:103(__init__)
       99    0.000    0.000    0.000    0.000 Graph.py:68(add_connection)
    93/12    0.000    0.000    0.003    0.000 visitors.py:362(visit)
       99    0.000    0.000    0.000    0.000 utils.py:208(remove_exponent)
      172    0.000    0.000    0.000    0.000 grammar.py:103(__init__)
      121    0.000    0.000    0.000    0.000 {built-in method _abc._abc_instancecheck}
       99    0.000    0.000    0.001    0.000 Functions.py:392(func)
       71    0.000    0.000    0.000    0.000 tree_matcher.py:121(<listcomp>)
      198    0.000    0.000    0.000    0.000 utils.py:213(is_formula)
       43    0.000    0.000    0.000    0.000 {built-in method builtins.compile}
       99    0.000    0.000    0.000    0.000 Parser.py:409(__init__)
      198    0.000    0.000    0.000    0.000 Graph.py:330(tarjans)
       75    0.000    0.000    0.000    0.000 earley.py:58(<listcomp>)
      496    0.000    0.000    0.000    0.000 {built-in method builtins.divmod}
       43    0.000    0.000    0.000    0.000 load_grammar.py:540(eval_escaping)
       56    0.000    0.000    0.000    0.000 load_grammar.py:420(expansions)
      198    0.000    0.000    0.000    0.000 Sheet.py:99(get_cell_contents)
        1    0.000    0.000   12.700   12.700 Workbook.py:435(copy_cells)
    29/15    0.000    0.000    0.002    0.000 load_grammar.py:405(<listcomp>)
       43    0.000    0.000    0.000    0.000 ast.py:54(literal_eval)
      112    0.000    0.000    0.031    0.000 visitors.py:159(transform)
      594    0.000    0.000    0.000    0.000 {method 'strip' of 'str' objects}
       99    0.000    0.000    0.000    0.000 {method 'to_integral' of 'decimal.Decimal' objects}
      495    0.000    0.000    0.000    0.000 Cell.py:125(get_value)
       99    0.000    0.000    0.000    0.000 Functions.py:389(__init__)
      121    0.000    0.000    0.000    0.000 <frozen abc>:117(__instancecheck__)
      600    0.000    0.000    0.000    0.000 {built-in method builtins.ord}
      496    0.000    0.000    0.000    0.000 {built-in method builtins.chr}
       87    0.000    0.000    0.000    0.000 tree_matcher.py:57(make_recons_rule)
      283    0.000    0.000    0.000    0.000 load_grammar.py:759(<genexpr>)
      439    0.000    0.000    0.000    0.000 {method 'lstrip' of 'str' objects}
       99    0.000    0.000    0.000    0.000 {method 'split' of 'str' objects}
        7    0.000    0.000    0.000    0.000 grammar_analysis.py:82(<setcomp>)
      396    0.000    0.000    0.000    0.000 Cell.py:128(get_contents)
      396    0.000    0.000    0.000    0.000 Parser.py:111(parens)
        1    0.000    0.000    0.000    0.000 load_grammar.py:793(<setcomp>)
      396    0.000    0.000    0.000    0.000 {method 'rstrip' of 'str' objects}
       68    0.000    0.000    0.000    0.000 visitors.py:481(__get__)
       13    0.000    0.000    0.000    0.000 load_grammar.py:450(pattern)
        7    0.000    0.000    0.000    0.000 earley.py:52(<setcomp>)
        7    0.000    0.000    0.000    0.000 tree_matcher.py:178(<dictcomp>)
      396    0.000    0.000    0.000    0.000 <frozen codecs>:276(reset)
        8    0.000    0.000    0.000    0.000 tree_matcher.py:28(_best_from_group)
       29    0.000    0.000    0.000    0.000 utils.py:190(<listcomp>)
       99    0.000    0.000    0.000    0.000 {method 'normalize' of 'decimal.Decimal' objects}
        7    0.000    0.000    0.000    0.000 earley.py:53(<setcomp>)
        1    0.000    0.000    0.012    0.012 tree_matcher.py:89(__init__)
       68    0.000    0.000    0.000    0.000 visitors.py:470(__init__)
       99    0.000    0.000    0.000    0.000 Cell.py:59(cache_formula)
       43    0.000    0.000    0.001    0.000 load_grammar.py:601(literal)
       26    0.000    0.000    0.005    0.000 visitors.py:258(transform)
       68    0.000    0.000    0.001    0.000 visitors.py:500(_vargs_inline)
       68    0.000    0.000    0.001    0.000 visitors.py:478(__call__)
       99    0.000    0.000    0.000    0.000 Cell.py:131(set_children)
        1    0.000    0.000    0.000    0.000 load_grammar.py:806(<setcomp>)
      340    0.000    0.000    0.000    0.000 {built-in method builtins.setattr}
      198    0.000    0.000    0.000    0.000 Sheet.py:54(get_sheet_name)
      129    0.000    0.000    0.000    0.000 load_grammar.py:537(<genexpr>)
       48    0.000    0.000    0.000    0.000 {built-in method builtins.max}
       71    0.000    0.000    0.000    0.000 load_grammar.py:798(<lambda>)
      361    0.000    0.000    0.000    0.000 {method 'popleft' of 'collections.deque' objects}
       89    0.000    0.000    0.000    0.000 typing.py:352(inner)
      105    0.000    0.000    0.000    0.000 grammar.py:69(__init__)
       43    0.000    0.000    0.000    0.000 ast.py:33(parse)
      214    0.000    0.000    0.000    0.000 grammar_analysis.py:149(<lambda>)
       99    0.000    0.000    0.000    0.000 Parser.py:108(get_cell_refs)
      214    0.000    0.000    0.000    0.000 grammar_analysis.py:172(<lambda>)
       43    0.000    0.000    0.000    0.000 load_grammar.py:536(_rfind)
        1    0.000    0.000    0.000    0.000 tree_matcher.py:115(<setcomp>)
       61    0.000    0.000    0.000    0.000 lexer.py:50(__hash__)
       49    0.000    0.000    0.000    0.000 lexer.py:41(__init__)
       26    0.000    0.000    0.001    0.000 load_grammar.py:674(nr_deepcopy_tree)
       99    0.000    0.000    0.000    0.000 {method 'is_finite' of 'decimal.Decimal' objects}
        2    0.000    0.000    0.000    0.000 utils.py:271(<listcomp>)
       59    0.000    0.000    0.000    0.000 load_grammar.py:668(value)
       13    0.000    0.000    0.000    0.000 {method 'sort' of 'list' objects}
        7    0.000    0.000    0.000    0.000 grammar_analysis.py:145(<dictcomp>)
       20    0.000    0.000    0.000    0.000 load_grammar.py:631(expansions)
        7    0.000    0.000    0.000    0.000 grammar_analysis.py:175(<dictcomp>)
       29    0.000    0.000    0.000    0.000 utils.py:184(dedup_list)
       86    0.000    0.000    0.000    0.000 {method 'rfind' of 'str' objects}
       99    0.000    0.000    0.000    0.000 Cell.py:62(get_cached_formula)
       20    0.000    0.000    0.000    0.000 load_grammar.py:637(<lambda>)
      119    0.000    0.000    0.000    0.000 {method 'replace' of 'str' objects}
        7    0.000    0.000    0.000    0.000 grammar_analysis.py:60(__init__)
        1    0.000    0.000    0.002    0.002 load_grammar.py:710(<listcomp>)
       43    0.000    0.000    0.000    0.000 {built-in method builtins.all}
       87    0.000    0.000    0.000    0.000 tree_matcher.py:17(__init__)
       90    0.000    0.000    0.000    0.000 {method 'startswith' of 'str' objects}
       57    0.000    0.000    0.000    0.000 grammar.py:22(__ne__)
        7    0.000    0.000    0.000    0.000 grammar_analysis.py:163(<dictcomp>)
        8    0.000    0.000    0.000    0.000 tree_matcher.py:42(_best_rules_from_group)
       43    0.000    0.000    0.000    0.000 ast.py:84(_convert)
       20    0.000    0.000    0.000    0.000 lexer.py:81(to_regexp)
        7    0.000    0.000    0.000    0.000 grammar_analysis.py:166(<dictcomp>)
        1    0.000    0.000    0.000    0.000 load_grammar.py:693(<listcomp>)
        1    0.000    0.000    0.000    0.000 tree_matcher.py:108(<setcomp>)
      116    0.000    0.000    0.000    0.000 tree.py:175(<lambda>)
       70    0.000    0.000    0.000    0.000 {method 'update' of 'dict' objects}
       22    0.000    0.000    0.000    0.000 lexer.py:125(__init__)
       71    0.000    0.000    0.000    0.000 load_grammar.py:431(expansion)
       45    0.000    0.000    0.000    0.000 tree_matcher.py:44(<lambda>)
       11    0.000    0.000    0.000    0.000 load_grammar.py:346(expr)
       35    0.000    0.000    0.000    0.000 load_grammar.py:621(expansion)
       71    0.000    0.000    0.000    0.000 {built-in method builtins.any}
       16    0.000    0.000    0.000    0.000 tree_matcher.py:61(make_recons_rule_to_term)
        7    0.000    0.000    0.000    0.000 grammar_analysis.py:160(<dictcomp>)
       20    0.000    0.000    0.000    0.000 __init__.py:253(escape)
       15    0.000    0.000    0.000    0.000 tree.py:169(find_pred)
       20    0.000    0.000    0.000    0.000 {method 'translate' of 'str' objects}
       25    0.000    0.000    0.000    0.000 load_grammar.py:639(<genexpr>)
        1    0.000    0.000    0.000    0.000 tree_matcher.py:116(<setcomp>)
       51    0.000    0.000    0.000    0.000 load_grammar.py:572(<genexpr>)
        1    0.000    0.000    0.012    0.012 reconstruct.py:80(__init__)
        1    0.000    0.000    0.000    0.000 copy.py:66(copy)
       18    0.000    0.000    0.000    0.000 lexer.py:53(__eq__)
        8    0.000    0.000    0.000    0.000 grammar.py:124(__eq__)
       21    0.000    0.000    0.000    0.000 lexer.py:70(_get_flags)
        1    0.000    0.000    0.001    0.001 load_grammar.py:694(<listcomp>)
       67    0.000    0.000    0.000    0.000 typing.py:2256(cast)
       15    0.000    0.000    0.000    0.000 tree.py:173(find_data)
       30    0.000    0.000    0.000    0.000 load_grammar.py:617(pattern)
       16    0.000    0.000    0.000    0.000 load_grammar.py:210(_args_as_int)
        1    0.000    0.000    0.000    0.000 load_grammar.py:446(<dictcomp>)
        1    0.000    0.000    0.000    0.000 load_grammar.py:246(_add_recurse_rule)
       31    0.000    0.000    0.000    0.000 visitors.py:108(__init__)
        6    0.000    0.000    0.000    0.000 load_grammar.py:411(alias)
       20    0.000    0.000    0.000    0.000 lexer.py:88(max_width)
        1    0.000    0.000    0.000    0.000 copyreg.py:104(__newobj__)
       20    0.000    0.000    0.000    0.000 lexer.py:84(min_width)
       30    0.000    0.000    0.000    0.000 load_grammar.py:663(value)
        7    0.000    0.000    0.000    0.000 common.py:83(__init__)
        1    0.000    0.000    0.000    0.000 load_grammar.py:375(maybe)
       22    0.000    0.000    0.000    0.000 load_grammar.py:809(<lambda>)
        1    0.000    0.000    0.000    0.000 load_grammar.py:642(expr)
        5    0.000    0.000    0.000    0.000 load_grammar.py:640(<setcomp>)
       22    0.000    0.000    0.000    0.000 {method 'values' of 'dict' objects}
        1    0.000    0.000    0.000    0.000 {method '__reduce_ex__' of 'object' objects}
        1    0.000    0.000    0.000    0.000 copy.py:259(_reconstruct)
       22    0.000    0.000    0.000    0.000 {method 'items' of 'dict' objects}
        3    0.000    0.000    0.000    0.000 load_grammar.py:201(_will_not_get_removed)
        1    0.000    0.000    0.000    0.000 cProfile.py:118(__exit__)
       10    0.000    0.000    0.000    0.000 load_grammar.py:434(alias)
        1    0.000    0.000    0.000    0.000 reconstruct.py:83(<dictcomp>)
        4    0.000    0.000    0.000    0.000 load_grammar.py:219(expansion)
        5    0.000    0.000    0.000    0.000 load_grammar.py:613(_make_joined_pattern)
        4    0.000    0.000    0.000    0.000 {built-in method builtins.sum}
        8    0.000    0.000    0.000    0.000 tree_matcher.py:43(<lambda>)
        1    0.000    0.000    0.000    0.000 load_grammar.py:763(<listcomp>)
        1    0.000    0.000    0.000    0.000 load_grammar.py:235(_name_rule)
        2    0.000    0.000    0.000    0.000 visitors.py:163(__mul__)
        1    0.000    0.000    0.000    0.000 load_grammar.py:443(__init__)
        1    0.000    0.000    0.000    0.000 load_grammar.py:240(_add_rule)
        2    0.000    0.000    0.000    0.000 utils.py:269(classify_bool)
        1    0.000    0.000    0.000    0.000 load_grammar.py:743(<setcomp>)
        2    0.000    0.000    0.000    0.000 visitors.py:263(__mul__)
        1    0.000    0.000    0.000    0.000 load_grammar.py:516(__init__)
        1    0.000    0.000    0.000    0.000 load_grammar.py:445(<setcomp>)
       12    0.000    0.000    0.000    0.000 load_grammar.py:428(expansions)
        3    0.000    0.000    0.000    0.000 load_grammar.py:222(expansions)
        1    0.000    0.000    0.000    0.000 load_grammar.py:228(__init__)
        2    0.000    0.000    0.000    0.000 {built-in method builtins.min}
        1    0.000    0.000    0.000    0.000 load_grammar.py:797(<setcomp>)
        1    0.000    0.000    0.000    0.000 lexer.py:98(to_regexp)
        4    0.000    0.000    0.000    0.000 visitors.py:255(__init__)
        1    0.000    0.000    0.000    0.000 load_grammar.py:498(__init__)
        1    0.000    0.000    0.000    0.000 {built-in method builtins.issubclass}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
        1    0.000    0.000    0.000    0.000 reconstruct.py:29(__init__)
        1    0.000    0.000    0.000    0.000 {method 'reverse' of 'list' objects}
        1    0.000    0.000    0.000    0.000 load_grammar.py:198(__init__)



##################Running pro_move_cells... #######################
=A1*B1
A1*B1
for test <function pro_move_cells at 0x7f2a404613a0> total time: 10.514769954000014
Total Logs
         3688230 function calls (3437374 primitive calls) in 1.120 seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
122313/121613    0.087    0.000    0.313    0.000 visitors.py:111(_call_userfunc)
    17803    0.086    0.000    0.160    0.000 tree.py:137(iter_subtrees)
220930/188026    0.064    0.000    0.342    0.000 visitors.py:143(_transform_children)
     4100    0.062    0.000    0.148    0.000 visitors.py:293(transform)
   842905    0.056    0.000    0.057    0.000 {built-in method builtins.isinstance}
248003/200403    0.055    0.000    0.082    0.000 {built-in method builtins.getattr}
   118410    0.047    0.000    0.066    0.000 tree.py:147(<listcomp>)
     7003    0.045    0.000    0.463    0.000 visitors.py:278(transform)
    46200    0.040    0.000    0.051    0.000 tree.py:179(expand_kids_by_data)
219482/114076    0.031    0.000    0.049    0.000 {built-in method builtins.hash}
      100    0.027    0.000    0.998    0.010 load_grammar.py:690(compile)
   160488    0.026    0.000    0.036    0.000 grammar.py:25(__hash__)
    88001    0.026    0.000    0.038    0.000 visitors.py:171(__default__)
27300/6000    0.025    0.000    0.178    0.000 load_grammar.py:389(expansion)
    57764    0.018    0.000    0.032    0.000 grammar.py:18(__eq__)
33500/10600    0.017    0.000    0.217    0.000 visitors.py:342(_call_userfunc)
    72810    0.017    0.000    0.252    0.000 visitors.py:275(_transform_tree)
   103619    0.016    0.000    0.016    0.000 tree.py:61(__init__)
     6800    0.014    0.000    0.023    0.000 functools.py:35(update_wrapper)
   219905    0.014    0.000    0.014    0.000 {built-in method builtins.id}
     3200    0.014    0.000    0.080    0.000 tree_matcher.py:106(_build_recons_rules)
    35800    0.012    0.000    0.063    0.000 load_grammar.py:384(_flatten)
     4300    0.012    0.000    0.026    0.000 ast.py:54(literal_eval)
     4300    0.012    0.000    0.061    0.000 load_grammar.py:566(_literal_to_pattern)
9300/1200    0.011    0.000    0.236    0.000 visitors.py:362(visit)
    94827    0.011    0.000    0.011    0.000 tree.py:66(meta)
     7100    0.010    0.000    0.021    0.000 tree_matcher.py:121(<listcomp>)
35502/33702    0.010    0.000    0.033    0.000 tree.py:134(__hash__)
    15804    0.009    0.000    0.031    0.000 grammar.py:103(__init__)
10003/1301    0.009    0.000    0.038    0.000 visitors.py:155(_transform_tree)
   123850    0.009    0.000    0.009    0.000 {built-in method builtins.len}
     4300    0.009    0.000    0.009    0.000 {built-in method builtins.compile}
     5600    0.009    0.000    0.042    0.000 load_grammar.py:420(expansions)
     4300    0.008    0.000    0.036    0.000 load_grammar.py:540(eval_escaping)
2900/1500    0.008    0.000    0.152    0.000 load_grammar.py:405(<listcomp>)
   126416    0.008    0.000    0.008    0.000 {method 'append' of 'list' objects}
    28556    0.008    0.000    0.010    0.000 lexer.py:265(__eq__)
     8700    0.006    0.000    0.024    0.000 tree_matcher.py:57(make_recons_rule)
    10008    0.006    0.000    0.010    0.000 visitors.py:130(_call_userfunc_token)
    28300    0.006    0.000    0.012    0.000 load_grammar.py:759(<genexpr>)
      100    0.005    0.000    0.013    0.000 load_grammar.py:793(<setcomp>)
     6800    0.005    0.000    0.032    0.000 visitors.py:481(__get__)
     1300    0.004    0.000    0.008    0.000 load_grammar.py:450(pattern)
    54586    0.004    0.000    0.004    0.000 {method 'pop' of 'list' objects}
     2900    0.004    0.000    0.018    0.000 utils.py:190(<listcomp>)
     6800    0.004    0.000    0.027    0.000 visitors.py:470(__init__)
     2600    0.003    0.000    0.461    0.000 visitors.py:258(transform)
     6800    0.003    0.000    0.086    0.000 visitors.py:500(_vargs_inline)
      100    0.003    0.000    1.087    0.011 tree_matcher.py:89(__init__)
     6800    0.003    0.000    0.083    0.000 visitors.py:478(__call__)
     4300    0.003    0.000    0.065    0.000 load_grammar.py:601(literal)
    34000    0.003    0.000    0.003    0.000 {built-in method builtins.setattr}
      100    0.003    0.000    0.004    0.000 load_grammar.py:806(<setcomp>)
    12900    0.003    0.000    0.004    0.000 load_grammar.py:537(<genexpr>)
     4800    0.003    0.000    0.007    0.000 {built-in method builtins.max}
     9931    0.003    0.000    0.009    0.000 {method 'add' of 'set' objects}
     7100    0.003    0.000    0.009    0.000 load_grammar.py:798(<lambda>)
    21110    0.002    0.000    0.002    0.000 tree_matcher.py:12(is_discarded_terminal)
     4300    0.002    0.000    0.012    0.000 ast.py:33(parse)
      102    0.002    0.000    0.005    0.000 tree_matcher.py:28(_best_from_group)
      100    0.002    0.000    0.008    0.000 tree_matcher.py:115(<setcomp>)
     4300    0.002    0.000    0.009    0.000 load_grammar.py:536(_rfind)
     9104    0.002    0.000    0.002    0.000 grammar.py:69(__init__)
     2600    0.002    0.000    0.099    0.000 load_grammar.py:674(nr_deepcopy_tree)
     6100    0.002    0.000    0.003    0.000 lexer.py:50(__hash__)
     4900    0.002    0.000    0.002    0.000 lexer.py:41(__init__)
     5900    0.002    0.000    0.002    0.000 load_grammar.py:668(value)
      100    0.002    0.000    1.123    0.011 Workbook.py:383(move_cells)
    17803    0.002    0.000    0.002    0.000 {method 'values' of 'collections.OrderedDict' objects}
    12218    0.002    0.000    0.002    0.000 grammar.py:42(__init__)
      600    0.002    0.000    0.002    0.000 Graph.py:330(tarjans)
      200    0.002    0.000    0.011    0.000 utils.py:271(<listcomp>)
      600    0.002    0.000    0.017    0.000 Workbook.py:741(set_cell_contents)
      600    0.002    0.000    0.010    0.000 Workbook.py:652(recompute_cell_and_parents)
     2000    0.001    0.000    0.010    0.000 load_grammar.py:631(expansions)
      902    0.001    0.000    0.002    0.000 utils.py:180(convert_location_to_idx)
      100    0.001    0.000    1.122    0.011 Workbook.py:296(transfer_cells)
       22    0.001    0.000    0.005    0.000 earley.py:78(predict_and_complete)
        2    0.001    0.001    0.003    0.002 grammar_analysis.py:78(calculate_sets)
     2900    0.001    0.000    0.019    0.000 utils.py:184(dedup_list)
     2000    0.001    0.000    0.003    0.000 load_grammar.py:637(<lambda>)
     9415    0.001    0.000    0.001    0.000 grammar.py:15(__init__)
      100    0.001    0.000    0.181    0.002 load_grammar.py:710(<listcomp>)
     4300    0.001    0.000    0.002    0.000 {built-in method builtins.all}
    11900    0.001    0.000    0.001    0.000 {method 'replace' of 'str' objects}
     8600    0.001    0.000    0.001    0.000 {method 'rfind' of 'str' objects}
     8700    0.001    0.000    0.001    0.000 tree_matcher.py:17(__init__)
     5700    0.001    0.000    0.005    0.000 grammar.py:22(__ne__)
     9000    0.001    0.000    0.001    0.000 {method 'startswith' of 'str' objects}
    15013    0.001    0.000    0.001    0.000 grammar.py:121(__hash__)
     4300    0.001    0.000    0.001    0.000 ast.py:84(_convert)
      602    0.001    0.000    0.004    0.000 {method 'sort' of 'list' objects}
     2000    0.001    0.000    0.003    0.000 lexer.py:81(to_regexp)
      100    0.001    0.000    0.003    0.000 tree_matcher.py:108(<setcomp>)
     3500    0.001    0.000    0.001    0.000 load_grammar.py:621(expansion)
     2200    0.001    0.000    0.003    0.000 lexer.py:125(__init__)
    11600    0.001    0.000    0.001    0.000 tree.py:175(<lambda>)
     2311    0.001    0.000    0.005    0.000 {method 'join' of 'str' objects}
     6902    0.001    0.000    0.001    0.000 {method 'update' of 'dict' objects}
     1100    0.001    0.000    0.003    0.000 load_grammar.py:346(expr)
     1600    0.001    0.000    0.005    0.000 tree_matcher.py:61(make_recons_rule_to_term)
    10006    0.001    0.000    0.001    0.000 visitors.py:178(__default_token__)
     1045    0.001    0.000    0.001    0.000 earley_common.py:9(__init__)
     7100    0.001    0.000    0.001    0.000 load_grammar.py:431(expansion)
     2000    0.001    0.000    0.002    0.000 __init__.py:253(escape)
     7100    0.001    0.000    0.001    0.000 {built-in method builtins.any}
      702    0.001    0.000    0.001    0.000 utils.py:195(convert_idx_to_location)
        5    0.001    0.000    0.003    0.001 earley_forest.py:283(visit)
     1500    0.001    0.000    0.015    0.000 tree.py:169(find_pred)
     2000    0.001    0.000    0.001    0.000 {method 'translate' of 'str' objects}
     2500    0.001    0.000    0.004    0.000 load_grammar.py:639(<genexpr>)
     1334    0.001    0.000    0.002    0.000 __init__.py:163(match)
      100    0.001    0.000    0.001    0.000 tree_matcher.py:116(<setcomp>)
     5100    0.001    0.000    0.001    0.000 load_grammar.py:572(<genexpr>)
      100    0.001    0.000    0.042    0.000 load_grammar.py:693(<listcomp>)
     1220    0.001    0.000    0.001    0.000 Sheet.py:93(get_cell_value)
     1344    0.001    0.000    0.001    0.000 __init__.py:272(_compile)
     1800    0.001    0.000    0.001    0.000 lexer.py:53(__eq__)
     2100    0.001    0.000    0.001    0.000 lexer.py:70(_get_flags)
      600    0.001    0.000    0.002    0.000 Sheet.py:60(set_cell_contents)
     6700    0.001    0.000    0.001    0.000 typing.py:2256(cast)
     1434    0.001    0.000    0.001    0.000 {method 'match' of 're.Pattern' objects}
      204    0.001    0.000    0.002    0.000 grammar_analysis.py:187(_expand_rule)
      800    0.001    0.000    0.002    0.000 grammar.py:124(__eq__)
     4623    0.001    0.000    0.001    0.000 {built-in method builtins.iter}
      600    0.001    0.000    0.017    0.000 Workbook.py:36(run_func)
      100    0.001    0.000    1.088    0.011 reconstruct.py:80(__init__)
     1312    0.000    0.000    0.002    0.000 utils.py:132(check_valid_cell_location)
     3000    0.000    0.000    0.000    0.000 load_grammar.py:617(pattern)
     1500    0.000    0.000    0.015    0.000 tree.py:173(find_data)
     2206    0.000    0.000    0.001    0.000 <frozen abc>:117(__instancecheck__)
     1731    0.000    0.000    0.001    0.000 utils.py:79(get_hidden_name)
     1600    0.000    0.000    0.001    0.000 load_grammar.py:210(_args_as_int)
     2206    0.000    0.000    0.000    0.000 {built-in method _abc._abc_instancecheck}
     3100    0.000    0.000    0.000    0.000 visitors.py:108(__init__)
     4306    0.000    0.000    0.000    0.000 {method 'lstrip' of 'str' objects}
     2000    0.000    0.000    0.001    0.000 lexer.py:88(max_width)
      100    0.000    0.000    0.058    0.001 load_grammar.py:694(<listcomp>)
      100    0.000    0.000    0.001    0.000 load_grammar.py:446(<dictcomp>)
     1602    0.000    0.000    0.001    0.000 Sheet.py:120(get_cell)
      600    0.000    0.000    0.001    0.000 load_grammar.py:411(alias)
     2709    0.000    0.000    0.001    0.000 tree_matcher.py:44(<lambda>)
      874    0.000    0.000    0.001    0.000 utils.py:345(add)
     4403    0.000    0.000    0.000    0.000 {method 'lower' of 'str' objects}
     2000    0.000    0.000    0.001    0.000 lexer.py:84(min_width)
     1301    0.000    0.000    0.039    0.000 visitors.py:159(transform)
     3332    0.000    0.000    0.000    0.000 {method 'get' of 'dict' objects}
     3000    0.000    0.000    0.000    0.000 load_grammar.py:663(value)
      100    0.000    0.000    0.001    0.000 copy.py:66(copy)
      300    0.000    0.000    0.001    0.000 Workbook.py:794(get_cell_contents)
      402    0.000    0.000    0.001    0.000 Workbook.py:596(recompute_cell_value)
      100    0.000    0.000    0.002    0.000 load_grammar.py:246(_add_recurse_rule)
      500    0.000    0.000    0.000    0.000 load_grammar.py:640(<setcomp>)
     2200    0.000    0.000    0.000    0.000 load_grammar.py:809(<lambda>)
     2300    0.000    0.000    0.000    0.000 {built-in method builtins.next}
     1000    0.000    0.000    0.000    0.000 load_grammar.py:434(alias)
      402    0.000    0.000    0.001    0.000 Workbook.py:589(get_cell_from_location)
      600    0.000    0.000    0.000    0.000 Workbook.py:728(clean_children_cells)
      125    0.000    0.000    0.002    0.000 utils.py:275(bfs)
      700    0.000    0.000    0.000    0.000 grammar_analysis.py:70(update_set)
      500    0.000    0.000    0.000    0.000 load_grammar.py:613(_make_joined_pattern)
      804    0.000    0.000    0.000    0.000 Graph.py:137(get_parents_from_cell)
      100    0.000    0.000    0.000    0.000 load_grammar.py:642(expr)
      350    0.000    0.000    0.000    0.000 grammar_analysis.py:17(__init__)
      600    0.000    0.000    0.000    0.000 Sheet.py:124(update_extent)
      100    0.000    0.000    0.000    0.000 reconstruct.py:83(<dictcomp>)
     1311    0.000    0.000    0.000    0.000 tree.py:32(__init__)
      100    0.000    0.000    0.004    0.000 load_grammar.py:375(maybe)
     1606    0.000    0.000    0.000    0.000 {method 'upper' of 'str' objects}
       80    0.000    0.000    0.001    0.000 earley_forest.py:437(_visit_node_out_helper)
      800    0.000    0.000    0.000    0.000 tree_matcher.py:43(<lambda>)
      400    0.000    0.000    0.001    0.000 {built-in method builtins.sum}
       40    0.000    0.000    0.000    0.000 earley_forest.py:603(transform_packed_node)
      100    0.000    0.000    0.000    0.000 copy.py:259(_reconstruct)
      341    0.000    0.000    0.000    0.000 utils.py:342(__contains__)
      300    0.000    0.000    0.000    0.000 load_grammar.py:201(_will_not_get_removed)
      799    0.000    0.000    0.000    0.000 earley_common.py:28(__eq__)
       87    0.000    0.000    0.000    0.000 earley_forest.py:50(__init__)
       12    0.000    0.000    0.000    0.000 xearley.py:41(scan)
      100    0.000    0.000    0.000    0.000 {method '__reduce_ex__' of 'object' objects}
     1804    0.000    0.000    0.000    0.000 {built-in method builtins.ord}
      400    0.000    0.000    0.001    0.000 load_grammar.py:219(expansion)
       46    0.000    0.000    0.001    0.000 earley.py:135(<listcomp>)
      102    0.000    0.000    0.006    0.000 tree_matcher.py:42(_best_rules_from_group)
      100    0.000    0.000    0.000    0.000 load_grammar.py:763(<listcomp>)
      100    0.000    0.000    0.001    0.000 load_grammar.py:443(__init__)
      200    0.000    0.000    0.000    0.000 visitors.py:263(__mul__)
     1246    0.000    0.000    0.000    0.000 earley_common.py:31(__hash__)
      100    0.000    0.000    0.000    0.000 load_grammar.py:235(_name_rule)
      100    0.000    0.000    0.001    0.000 load_grammar.py:240(_add_rule)
      100    0.000    0.000    0.000    0.000 load_grammar.py:743(<setcomp>)
      350    0.000    0.000    0.000    0.000 grammar_analysis.py:45(__hash__)
        4    0.000    0.000    0.000    0.000 utils.py:23(classify)
      200    0.000    0.000    0.011    0.000 utils.py:269(classify_bool)
     1200    0.000    0.000    0.000    0.000 load_grammar.py:428(expansions)
      100    0.000    0.000    0.000    0.000 load_grammar.py:445(<setcomp>)
      200    0.000    0.000    0.000    0.000 visitors.py:163(__mul__)
        2    0.000    0.000    0.006    0.003 earley.py:32(__init__)
      300    0.000    0.000    0.001    0.000 load_grammar.py:222(expansions)
      300    0.000    0.000    0.000    0.000 Sheet.py:99(get_cell_contents)
       80    0.000    0.000    0.000    0.000 {built-in method builtins.sorted}
       40    0.000    0.000    0.000    0.000 earley_forest.py:155(children)
      702    0.000    0.000    0.000    0.000 {built-in method builtins.divmod}
      235    0.000    0.000    0.000    0.000 utils.py:339(__init__)
       25    0.000    0.000    0.002    0.000 grammar_analysis.py:180(expand_rule)
       89    0.000    0.000    0.000    0.000 earley_forest.py:64(add_family)
      100    0.000    0.000    0.000    0.000 load_grammar.py:516(__init__)
        5    0.000    0.000    0.009    0.002 earley.py:262(parse)
      235    0.000    0.000    0.000    0.000 {built-in method fromkeys}
       32    0.000    0.000    0.000    0.000 earley_forest.py:581(transform_symbol_node)
        2    0.000    0.000    0.004    0.002 grammar_analysis.py:141(__init__)
      346    0.000    0.000    0.000    0.000 grammar_analysis.py:28(next)
      100    0.000    0.000    0.000    0.000 load_grammar.py:797(<setcomp>)
       89    0.000    0.000    0.000    0.000 earley_forest.py:131(__init__)
      235    0.000    0.000    0.000    0.000 utils.py:348(__iter__)
      604    0.000    0.000    0.000    0.000 utils.py:213(is_formula)
      702    0.000    0.000    0.000    0.000 {built-in method builtins.chr}
      100    0.000    0.000    0.000    0.000 copyreg.py:104(__newobj__)
       80    0.000    0.000    0.000    0.000 earley_forest.py:85(children)
      202    0.000    0.000    0.000    0.000 lark.py:220(__getattr__)
       40    0.000    0.000    0.001    0.000 earley_forest.py:638(visit_packed_node_out)
      400    0.000    0.000    0.000    0.000 visitors.py:255(__init__)
       89    0.000    0.000    0.000    0.000 earley_common.py:25(advance)
        5    0.000    0.000    0.000    0.000 earley.py:188(scan)
       40    0.000    0.000    0.000    0.000 earley_forest.py:631(visit_packed_node_in)
      100    0.000    0.000    0.000    0.000 load_grammar.py:228(__init__)
      200    0.000    0.000    0.000    0.000 {built-in method builtins.min}
       40    0.000    0.000    0.000    0.000 earley_forest.py:422(visit_symbol_node_in)
       32    0.000    0.000    0.000    0.000 earley_forest.py:565(_call_rule_func)
      127    0.000    0.000    0.000    0.000 {method 'setdefault' of 'dict' objects}
        3    0.000    0.000    0.008    0.003 tree_matcher.py:148(match_tree)
       40    0.000    0.000    0.000    0.000 earley_forest.py:427(visit_packed_node_in)
       32    0.000    0.000    0.000    0.000 earley_forest.py:556(_collapse_ambig)
       80    0.000    0.000    0.000    0.000 earley_forest.py:145(sort_key)
       40    0.000    0.000    0.000    0.000 earley_forest.py:625(visit_symbol_node_in)
       10    0.000    0.000    0.000    0.000 reconstruct.py:33(__default__)
      100    0.000    0.000    0.000    0.000 lexer.py:98(to_regexp)
       21    0.000    0.000    0.000    0.000 earley.py:58(<listcomp>)
      100    0.000    0.000    0.000    0.000 parser_frontends.py:184(match)
       32    0.000    0.000    0.000    0.000 tree_matcher.py:48(_match)
      362    0.000    0.000    0.000    0.000 {method 'pop' of 'collections.deque' objects}
      409    0.000    0.000    0.000    0.000 {method 'append' of 'collections.deque' objects}
        2    0.000    0.000    0.005    0.003 xearley.py:39(_parse)
        3    0.000    0.000    0.001    0.000 earley.py:171(_parse)
        2    0.000    0.000    0.000    0.000 tree_matcher.py:178(<dictcomp>)
      118    0.000    0.000    0.000    0.000 {built-in method __new__ of type object at 0x860f60}
      120    0.000    0.000    0.000    0.000 {method 'remove' of 'set' objects}
       40    0.000    0.000    0.000    0.000 earley_forest.py:499(__init__)
       10    0.000    0.000    0.000    0.000 Parser.py:253(cell)
       40    0.000    0.000    0.000    0.000 earley_forest.py:450(visit_packed_node_out)
       80    0.000    0.000    0.000    0.000 utils.py:357(__len__)
        8    0.000    0.000    0.000    0.000 Cell.py:81(set_cell_value)
      132    0.000    0.000    0.000    0.000 {built-in method builtins.hasattr}
        5    0.000    0.000    0.005    0.001 Workbook.py:558(get_formula_value)
       40    0.000    0.000    0.000    0.000 earley_forest.py:70(load_paths)
      100    0.000    0.000    0.000    0.000 reconstruct.py:29(__init__)
        8    0.000    0.000    0.000    0.000 earley_forest.py:591(transform_intermediate_node)
       22    0.000    0.000    0.000    0.000 tree_matcher.py:65(parse_rulename)
       32    0.000    0.000    0.000    0.000 earley_forest.py:444(visit_symbol_node_out)
        2    0.000    0.000    0.000    0.000 grammar_analysis.py:82(<setcomp>)
      8/4    0.000    0.000    0.008    0.002 reconstruct.py:85(_reconstruct)
     15/5    0.000    0.000    0.000    0.000 visitors.py:421(_visit_tree)
      100    0.000    0.000    0.000    0.000 load_grammar.py:198(__init__)
        2    0.000    0.000    0.000    0.000 earley.py:52(<setcomp>)
       13    0.000    0.000    0.000    0.000 earley_forest.py:432(visit_token_node)
       80    0.000    0.000    0.000    0.000 earley_forest.py:141(is_empty)
       32    0.000    0.000    0.000    0.000 earley_forest.py:571(_call_ambig_func)
      100    0.000    0.000    0.000    0.000 load_grammar.py:498(__init__)
      106    0.000    0.000    0.000    0.000 {method 'values' of 'dict' objects}
       18    0.000    0.000    0.000    0.000 lexer.py:213(_future_new)
      106    0.000    0.000    0.000    0.000 {method 'items' of 'dict' objects}
      100    0.000    0.000    0.000    0.000 {method 'reverse' of 'list' objects}
       80    0.000    0.000    0.000    0.000 earley_forest.py:548(_check_cycle)
        2    0.000    0.000    0.000    0.000 {built-in method builtins.print}
       10    0.000    0.000    0.000    0.000 Workbook.py:822(get_cell_value)
        8    0.000    0.000    0.000    0.000 tree_matcher.py:21(__call__)
     15/5    0.000    0.000    0.000    0.000 visitors.py:444(inner)
      100    0.000    0.000    0.000    0.000 {built-in method builtins.issubclass}
        5    0.000    0.000    0.000    0.000 Parser.py:211(mul_expr)
        2    0.000    0.000    0.000    0.000 earley.py:53(<setcomp>)
       18    0.000    0.000    0.000    0.000 lexer.py:202(__new__)
     15/5    0.000    0.000    0.000    0.000 visitors.py:430(<listcomp>)
        2    0.000    0.000    0.007    0.004 parser_frontends.py:100(parse)
        5    0.000    0.000    0.003    0.001 earley_forest.py:535(visit)
       15    0.000    0.000    0.000    0.000 Parser.py:40(fix_formula)
       82    0.000    0.000    0.000    0.000 earley_forest.py:101(__hash__)
       25    0.000    0.000    0.000    0.000 typing.py:352(inner)
      100    0.000    0.000    0.000    0.000 {method 'popleft' of 'collections.deque' objects}
        5    0.000    0.000    0.003    0.001 earley_forest.py:397(transform)
       40    0.000    0.000    0.000    0.000 earley_forest.py:158(<listcomp>)
       20    0.000    0.000    0.000    0.000 parse_tree_builder.py:20(__call__)
        5    0.000    0.000    0.000    0.000 Parser.py:97(__init__)
        6    0.000    0.000    0.000    0.000 utils.py:208(remove_exponent)
       89    0.000    0.000    0.000    0.000 earley_forest.py:169(__hash__)
        6    0.000    0.000    0.000    0.000 Workbook.py:701(_get_sheet_name_location)
       17    0.000    0.000    0.000    0.000 earley_forest.py:193(__init__)
        1    0.000    0.000    0.008    0.008 reconstruct.py:96(reconstruct)
     15/5    0.000    0.000    0.000    0.000 visitors.py:429(visit_children)
       65    0.000    0.000    0.000    0.000 grammar_analysis.py:149(<lambda>)
       11    0.000    0.000    0.000    0.000 Workbook.py:554(get_sheet_name_from_hidden)
        6    0.000    0.000    0.000    0.000 Sheet.py:111(_shrink_sheet)
        5    0.000    0.000    0.000    0.000 earley.py:284(<listcomp>)
        9    0.000    0.000    0.000    0.000 Cell.py:65(set_contents)
       10    0.000    0.000    0.000    0.000 __init__.py:178(sub)
        4    0.000    0.000    0.000    0.000 <frozen codecs>:327(reset)
       15    0.000    0.000    0.000    0.000 utils.py:296(get_highest_precedence_error)
        5    0.000    0.000    0.000    0.000 earley_forest.py:523(__init__)
        2    0.000    0.000    0.000    0.000 grammar_analysis.py:145(<dictcomp>)
        3    0.000    0.000    0.000    0.000 earley.py:245(<setcomp>)
        5    0.000    0.000    0.000    0.000 earley_forest.py:390(__init__)
        8    0.000    0.000    0.000    0.000 reconstruct.py:15(is_iter_empty)
       65    0.000    0.000    0.000    0.000 grammar_analysis.py:172(<lambda>)
        8    0.000    0.000    0.000    0.000 earley_forest.py:447(visit_intermediate_node_out)
        5    0.000    0.000    0.000    0.000 Sheet.py:104(set_cell_value)
        2    0.000    0.000    0.000    0.000 parser_frontends.py:96(_make_lexer_thread)
       10    0.000    0.000    0.000    0.000 {method 'sub' of 're.Pattern' objects}
        2    0.000    0.000    0.000    0.000 Parser.py:420(CELLREF_NO_ABS)
       17    0.000    0.000    0.000    0.000 utils.py:354(__bool__)
        2    0.000    0.000    0.000    0.000 Parser.py:413(cell)
        2    0.000    0.000    0.000    0.000 grammar_analysis.py:175(<dictcomp>)
       23    0.000    0.000    0.000    0.000 Cell.py:125(get_value)
        5    0.000    0.000    0.000    0.000 visitors.py:415(visit)
        2    0.000    0.000    0.000    0.000 grammar_analysis.py:60(__init__)
       16    0.000    0.000    0.000    0.000 {method 'remove' of 'list' objects}
        6    0.000    0.000    0.000    0.000 {method 'to_integral' of 'decimal.Decimal' objects}
       22    0.000    0.000    0.000    0.000 {method 'groups' of 're.Match' objects}
        2    0.000    0.000    0.007    0.004 lark.py:640(parse)
        1    0.000    0.000    0.000    0.000 Workbook.py:714(add_children_cells)
        2    0.000    0.000    0.000    0.000 grammar_analysis.py:166(<dictcomp>)
        3    0.000    0.000    0.000    0.000 Cell.py:46(__init__)
        2    0.000    0.000    0.000    0.000 parse_tree_builder.py:145(__call__)
        1    0.000    0.000    0.000    0.000 cProfile.py:118(__exit__)
        4    0.000    0.000    0.000    0.000 Graph.py:96(update_child)
        1    0.000    0.000    0.000    0.000 utils.py:308(error_matcher)
        2    0.000    0.000    0.000    0.000 grammar_analysis.py:163(<dictcomp>)
       12    0.000    0.000    0.000    0.000 {method 'group' of 're.Match' objects}
        2    0.000    0.000    0.000    0.000 grammar_analysis.py:160(<dictcomp>)
       17    0.000    0.000    0.000    0.000 earley_forest.py:207(__hash__)
        2    0.000    0.000    0.000    0.000 Graph.py:68(add_connection)
        2    0.000    0.000    0.000    0.000 parser_frontends.py:86(_verify_start)
       12    0.000    0.000    0.000    0.000 {built-in method _heapq.heapify}
        6    0.000    0.000    0.000    0.000 {method 'split' of 'str' objects}
       13    0.000    0.000    0.000    0.000 earley_forest.py:418(transform_token_node)
       18    0.000    0.000    0.000    0.000 {method 'strip' of 'str' objects}
       13    0.000    0.000    0.000    0.000 Cell.py:128(get_contents)
       12    0.000    0.000    0.000    0.000 {method 'end' of 're.Match' objects}
        6    0.000    0.000    0.000    0.000 {built-in method _heapq.heappush}
       11    0.000    0.000    0.000    0.000 Sheet.py:54(get_sheet_name)
       10    0.000    0.000    0.000    0.000 Cell.py:135(get_children)
        5    0.000    0.000    0.000    0.000 {method 'clear' of 'set' objects}
        4    0.000    0.000    0.000    0.000 {method 'quantize' of 'decimal.Decimal' objects}
        5    0.000    0.000    0.000    0.000 earley.py:254(<setcomp>)
        9    0.000    0.000    0.000    0.000 Cell.py:62(get_cached_formula)
        5    0.000    0.000    0.000    0.000 Cell.py:131(set_children)
        6    0.000    0.000    0.000    0.000 {method 'is_finite' of 'decimal.Decimal' objects}
        2    0.000    0.000    0.000    0.000 common.py:83(__init__)
        5    0.000    0.000    0.000    0.000 earley_forest.py:232(__init__)
        4    0.000    0.000    0.000    0.000 <frozen codecs>:276(reset)
        2    0.000    0.000    0.000    0.000 {method 'normalize' of 'decimal.Decimal' objects}
        5    0.000    0.000    0.000    0.000 Parser.py:108(get_cell_refs)
        3    0.000    0.000    0.000    0.000 tree_matcher.py:74(__init__)
        1    0.000    0.000    0.000    0.000 Parser.py:409(__init__)
        6    0.000    0.000    0.000    0.000 {method 'rstrip' of 'str' objects}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
        3    0.000    0.000    0.000    0.000 tree_matcher.py:77(lex)
        1    0.000    0.000    0.000    0.000 Cell.py:59(cache_formula)



##################Running pro_move_cells2... #######################
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
=A1
A1
for test <function pro_move_cells2 at 0x7f2a404614e0> total time: 4.470944692999999
Total Logs
         1466020 function calls (1459152 primitive calls) in 0.441 seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
      990    0.078    0.000    0.284    0.000 earley.py:78(predict_and_complete)
    78705    0.047    0.000    0.076    0.000 earley_common.py:9(__init__)
191755/186341    0.027    0.000    0.035    0.000 {built-in method builtins.hash}
      297    0.024    0.000    0.081    0.000 earley_forest.py:283(visit)
    59400    0.021    0.000    0.032    0.000 utils.py:345(add)
    46113    0.018    0.000    0.034    0.000 grammar.py:18(__eq__)
   103291    0.017    0.000    0.024    0.000 grammar.py:25(__hash__)
    42470    0.012    0.000    0.015    0.000 lexer.py:265(__eq__)
    28512    0.010    0.000    0.016    0.000 utils.py:342(__contains__)
    66726    0.010    0.000    0.010    0.000 earley_common.py:28(__eq__)
   125263    0.009    0.000    0.009    0.000 {built-in method builtins.isinstance}
    84481    0.007    0.000    0.007    0.000 grammar.py:121(__hash__)
    87813    0.007    0.000    0.007    0.000 earley_common.py:31(__hash__)
     2079    0.007    0.000    0.031    0.000 earley.py:135(<listcomp>)
    98295    0.006    0.000    0.006    0.000 {built-in method builtins.len}
     4059    0.006    0.000    0.014    0.000 earley_forest.py:50(__init__)
      594    0.006    0.000    0.017    0.000 xearley.py:41(scan)
    89587    0.006    0.000    0.006    0.000 {method 'append' of 'list' objects}
    10791    0.005    0.000    0.006    0.000 {built-in method fromkeys}
     3960    0.005    0.000    0.022    0.000 earley_forest.py:437(_visit_node_out_helper)
     2079    0.005    0.000    0.009    0.000 earley_forest.py:603(transform_packed_node)
    32884    0.004    0.000    0.004    0.000 {built-in method builtins.next}
     3762    0.003    0.000    0.008    0.000 {built-in method builtins.sorted}
    45849    0.003    0.000    0.003    0.000 {built-in method builtins.id}
    10791    0.003    0.000    0.009    0.000 utils.py:339(__init__)
     4257    0.003    0.000    0.009    0.000 earley_forest.py:64(add_family)
      297    0.003    0.000    0.398    0.001 earley.py:262(parse)
     4257    0.002    0.000    0.004    0.000 earley_forest.py:131(__init__)
    10593    0.002    0.000    0.003    0.000 utils.py:348(__iter__)
     1683    0.002    0.000    0.006    0.000 earley_forest.py:581(transform_symbol_node)
     2079    0.002    0.000    0.006    0.000 earley_forest.py:631(visit_packed_node_in)
     4257    0.002    0.000    0.009    0.000 earley_common.py:25(advance)
     3762    0.002    0.000    0.011    0.000 earley_forest.py:85(children)
     2079    0.002    0.000    0.015    0.000 earley_forest.py:638(visit_packed_node_out)
     2079    0.002    0.000    0.004    0.000 earley_forest.py:427(visit_packed_node_in)
     1881    0.002    0.000    0.009    0.000 earley_forest.py:422(visit_symbol_node_in)
      198    0.002    0.000    0.298    0.002 xearley.py:39(_parse)
     5940    0.002    0.000    0.002    0.000 {method 'setdefault' of 'dict' objects}
     4158    0.002    0.000    0.002    0.000 earley_forest.py:145(sort_key)
5845/5369    0.001    0.000    0.002    0.000 {built-in method builtins.getattr}
     1881    0.001    0.000    0.014    0.000 earley_forest.py:625(visit_symbol_node_in)
      396    0.001    0.000    0.209    0.001 Workbook.py:741(set_cell_contents)
      396    0.001    0.000    0.200    0.001 Workbook.py:652(recompute_cell_and_parents)
     1683    0.001    0.000    0.002    0.000 earley_forest.py:556(_collapse_ambig)
     5152    0.001    0.000    0.001    0.000 {method 'match' of 're.Pattern' objects}
    10499    0.001    0.000    0.001    0.000 {method 'add' of 'set' objects}
    14497    0.001    0.000    0.001    0.000 {built-in method builtins.iter}
     1683    0.001    0.000    0.002    0.000 earley_forest.py:565(_call_rule_func)
    18216    0.001    0.000    0.001    0.000 {method 'pop' of 'collections.deque' objects}
     4158    0.001    0.000    0.002    0.000 parser_frontends.py:184(match)
1421/1414    0.001    0.000    0.005    0.000 visitors.py:111(_call_userfunc)
      277    0.001    0.000    0.002    0.000 tree.py:137(iter_subtrees)
      498    0.001    0.000    0.001    0.000 utils.py:180(convert_location_to_idx)
        1    0.001    0.001    0.441    0.441 Workbook.py:296(transfer_cells)
    17164    0.001    0.000    0.001    0.000 {method 'append' of 'collections.deque' objects}
     1386    0.001    0.000    0.001    0.000 Sheet.py:93(get_cell_value)
     2079    0.001    0.000    0.001    0.000 earley_forest.py:155(children)
2605/2276    0.001    0.000    0.005    0.000 visitors.py:143(_transform_children)
      396    0.001    0.000    0.004    0.000 Sheet.py:60(set_cell_contents)
       41    0.001    0.000    0.002    0.000 visitors.py:293(transform)
     3762    0.001    0.000    0.001    0.000 utils.py:357(__len__)
       99    0.001    0.000    0.003    0.000 earley.py:188(scan)
      198    0.001    0.000    0.381    0.002 parser_frontends.py:100(parse)
     2079    0.001    0.000    0.013    0.000 earley_forest.py:450(visit_packed_node_out)
     5841    0.001    0.000    0.001    0.000 {method 'remove' of 'set' objects}
        1    0.001    0.001    0.002    0.002 grammar_analysis.py:78(calculate_sets)
     1881    0.001    0.000    0.001    0.000 earley_forest.py:70(load_paths)
     1881    0.001    0.000    0.001    0.000 earley_forest.py:499(__init__)
      396    0.001    0.000    0.001    0.000 Cell.py:81(set_cell_value)
      169    0.001    0.000    0.006    0.000 visitors.py:278(transform)
     4158    0.001    0.000    0.001    0.000 earley_forest.py:141(is_empty)
      396    0.001    0.000    0.001    0.000 {built-in method _heapq.heapify}
      891    0.001    0.000    0.001    0.000 lexer.py:213(_future_new)
     1192    0.001    0.000    0.001    0.000 __init__.py:272(_compile)
      496    0.001    0.000    0.001    0.000 utils.py:195(convert_idx_to_location)
     1683    0.001    0.000    0.009    0.000 earley_forest.py:444(visit_symbol_node_out)
      198    0.001    0.000    0.195    0.001 Workbook.py:558(get_formula_value)
      297    0.001    0.000    0.002    0.000 earley.py:284(<listcomp>)
     1683    0.001    0.000    0.001    0.000 earley_forest.py:571(_call_ambig_func)
      594    0.001    0.000    0.001    0.000 tree_matcher.py:48(_match)
      994    0.001    0.000    0.002    0.000 __init__.py:163(match)
     1283    0.001    0.000    0.001    0.000 tree.py:147(<listcomp>)
      891    0.001    0.000    0.001    0.000 lexer.py:202(__new__)
       99    0.001    0.000    0.009    0.000 earley.py:171(_parse)
     4759    0.001    0.000    0.001    0.000 {method 'lower' of 'str' objects}
     4793    0.000    0.000    0.000    0.000 {method 'pop' of 'list' objects}
     3960    0.000    0.000    0.000    0.000 earley_forest.py:548(_check_cycle)
     1685    0.000    0.000    0.001    0.000 utils.py:79(get_hidden_name)
     3762    0.000    0.000    0.000    0.000 earley_forest.py:101(__hash__)
     2079    0.000    0.000    0.000    0.000 earley_forest.py:158(<listcomp>)
      198    0.000    0.000    0.002    0.000 Parser.py:253(cell)
      297    0.000    0.000    0.081    0.000 earley_forest.py:535(visit)
      100    0.000    0.000    0.004    0.000 Workbook.py:596(recompute_cell_value)
     4257    0.000    0.000    0.000    0.000 earley_forest.py:169(__hash__)
     2973    0.000    0.000    0.000    0.000 {method 'get' of 'dict' objects}
      495    0.000    0.000    0.001    0.000 earley_forest.py:432(visit_token_node)
      462    0.000    0.000    0.001    0.000 tree.py:179(expand_kids_by_data)
     1386    0.000    0.000    0.000    0.000 parse_tree_builder.py:20(__call__)
      297    0.000    0.000    0.082    0.000 earley_forest.py:397(transform)
      895    0.000    0.000    0.002    0.000 utils.py:132(check_valid_cell_location)
       99    0.000    0.000    0.022    0.000 tree_matcher.py:148(match_tree)
      396    0.000    0.000    0.209    0.001 Workbook.py:36(run_func)
      297    0.000    0.000    0.001    0.000 earley_forest.py:523(__init__)
      396    0.000    0.000    0.000    0.000 Graph.py:330(tarjans)
     1298    0.000    0.000    0.000    0.000 {method 'join' of 'str' objects}
      198    0.000    0.000    0.000    0.000 parser_frontends.py:96(_make_lexer_thread)
      693    0.000    0.000    0.000    0.000 earley_forest.py:193(__init__)
      297    0.000    0.000    0.000    0.000 earley_forest.py:390(__init__)
      880    0.000    0.000    0.000    0.000 visitors.py:171(__default__)
      495    0.000    0.000    0.001    0.000 Workbook.py:554(get_sheet_name_from_hidden)
   273/60    0.000    0.000    0.002    0.000 load_grammar.py:389(expansion)
      396    0.000    0.000    0.001    0.000 Workbook.py:728(clean_children_cells)
        1    0.000    0.000    0.011    0.011 load_grammar.py:690(compile)
       99    0.000    0.000    0.001    0.000 reconstruct.py:33(__default__)
      198    0.000    0.000    0.001    0.000 {built-in method builtins.print}
      198    0.000    0.000    0.000    0.000 Workbook.py:701(_get_sheet_name_location)
      396    0.000    0.000    0.001    0.000 Cell.py:65(set_contents)
      396    0.000    0.000    0.000    0.000 Sheet.py:124(update_extent)
      198    0.000    0.000    0.001    0.000 Workbook.py:822(get_cell_value)
     1432    0.000    0.000    0.000    0.000 tree.py:61(__init__)
      198    0.000    0.000    0.000    0.000 earley_forest.py:591(transform_intermediate_node)
      892    0.000    0.000    0.000    0.000 Sheet.py:120(get_cell)
       99    0.000    0.000    0.001    0.000 Parser.py:420(CELLREF_NO_ABS)
      298    0.000    0.000    0.002    0.000 visitors.py:130(_call_userfunc_token)
  199/112    0.000    0.000    0.003    0.000 visitors.py:155(_transform_tree)
      198    0.000    0.000    0.001    0.000 Workbook.py:794(get_cell_contents)
     1245    0.000    0.000    0.000    0.000 tree.py:66(meta)
      827    0.000    0.000    0.003    0.000 visitors.py:275(_transform_tree)
      396    0.000    0.000    0.000    0.000 <frozen codecs>:327(reset)
      495    0.000    0.000    0.000    0.000 {method 'remove' of 'list' objects}
      892    0.000    0.000    0.000    0.000 {built-in method __new__ of type object at 0x860f60}
      198    0.000    0.000    0.003    0.000 visitors.py:421(_visit_tree)
     1684    0.000    0.000    0.000    0.000 {built-in method builtins.hasattr}
       99    0.000    0.000    0.001    0.000 Parser.py:413(cell)
      198    0.000    0.000    0.000    0.000 Parser.py:97(__init__)
      198    0.000    0.000    0.001    0.000 Sheet.py:104(set_cell_value)
      198    0.000    0.000    0.000    0.000 utils.py:208(remove_exponent)
      198    0.000    0.000    0.001    0.000 Sheet.py:111(_shrink_sheet)
      198    0.000    0.000    0.000    0.000 parse_tree_builder.py:145(__call__)
  335/106    0.000    0.000    0.002    0.000 visitors.py:342(_call_userfunc)
      198    0.000    0.000    0.003    0.000 visitors.py:444(inner)
       99    0.000    0.000    0.024    0.000 reconstruct.py:96(reconstruct)
       99    0.000    0.000    0.000    0.000 earley.py:245(<setcomp>)
      198    0.000    0.000    0.002    0.000 Parser.py:40(fix_formula)
      102    0.000    0.000    0.000    0.000 grammar_analysis.py:187(_expand_rule)
      693    0.000    0.000    0.000    0.000 utils.py:354(__bool__)
       99    0.000    0.000    0.000    0.000 tree_matcher.py:21(__call__)
       32    0.000    0.000    0.001    0.000 tree_matcher.py:106(_build_recons_rules)
      198    0.000    0.000    0.024    0.000 reconstruct.py:85(_reconstruct)
       68    0.000    0.000    0.000    0.000 functools.py:35(update_wrapper)
      816    0.000    0.000    0.000    0.000 grammar.py:42(__init__)
      495    0.000    0.000    0.000    0.000 utils.py:213(is_formula)
     1093    0.000    0.000    0.000    0.000 {method 'upper' of 'str' objects}
      198    0.000    0.000    0.381    0.002 lark.py:640(parse)
      198    0.000    0.000    0.000    0.000 __init__.py:178(sub)
       43    0.000    0.000    0.001    0.000 load_grammar.py:566(_literal_to_pattern)
      358    0.000    0.000    0.001    0.000 load_grammar.py:384(_flatten)
       99    0.000    0.000    0.000    0.000 Workbook.py:714(add_children_cells)
      198    0.000    0.000    0.000    0.000 visitors.py:429(visit_children)
      891    0.000    0.000    0.000    0.000 Cell.py:125(get_value)
      409    0.000    0.000    0.000    0.000 grammar_analysis.py:70(update_set)
       43    0.000    0.000    0.000    0.000 {built-in method builtins.compile}
    93/12    0.000    0.000    0.002    0.000 visitors.py:362(visit)
      198    0.000    0.000    0.001    0.000 Cell.py:46(__init__)
      198    0.000    0.000    0.000    0.000 parser_frontends.py:86(_verify_start)
       71    0.000    0.000    0.000    0.000 tree_matcher.py:121(<listcomp>)
      198    0.000    0.000    0.000    0.000 Sheet.py:99(get_cell_contents)
      396    0.000    0.000    0.000    0.000 {built-in method _heapq.heappush}
      198    0.000    0.000    0.003    0.000 visitors.py:415(visit)
  355/337    0.000    0.000    0.000    0.000 tree.py:134(__hash__)
      160    0.000    0.000    0.000    0.000 grammar.py:103(__init__)
      594    0.000    0.000    0.000    0.000 {method 'group' of 're.Match' objects}
       43    0.000    0.000    0.000    0.000 load_grammar.py:540(eval_escaping)
      693    0.000    0.000    0.000    0.000 earley_forest.py:207(__hash__)
       99    0.000    0.000    0.000    0.000 tree_matcher.py:65(parse_rulename)
    29/15    0.000    0.000    0.002    0.000 load_grammar.py:405(<listcomp>)
       56    0.000    0.000    0.000    0.000 load_grammar.py:420(expansions)
       43    0.000    0.000    0.000    0.000 ast.py:54(literal_eval)
      198    0.000    0.000    0.001    0.000 earley_forest.py:447(visit_intermediate_node_out)
      996    0.000    0.000    0.000    0.000 {built-in method builtins.ord}
      198    0.000    0.000    0.000    0.000 visitors.py:430(<listcomp>)
       87    0.000    0.000    0.000    0.000 tree_matcher.py:57(make_recons_rule)
      198    0.000    0.000    0.000    0.000 {method 'sub' of 're.Pattern' objects}
      200    0.000    0.000    0.000    0.000 lark.py:220(__getattr__)
      198    0.000    0.000    0.000    0.000 utils.py:296(get_highest_precedence_error)
      395    0.000    0.000    0.000    0.000 grammar.py:15(__init__)
       63    0.000    0.000    0.001    0.000 utils.py:275(bfs)
      100    0.000    0.000    0.000    0.000 Workbook.py:589(get_cell_from_location)
      594    0.000    0.000    0.000    0.000 Cell.py:128(get_contents)
       99    0.000    0.000    0.000    0.000 Graph.py:68(add_connection)
      220    0.000    0.000    0.000    0.000 {built-in method _abc._abc_instancecheck}
      174    0.000    0.000    0.000    0.000 grammar_analysis.py:17(__init__)
      693    0.000    0.000    0.000    0.000 {method 'strip' of 'str' objects}
       99    0.000    0.000    0.000    0.000 Graph.py:96(update_child)
      496    0.000    0.000    0.000    0.000 {built-in method builtins.divmod}
        2    0.000    0.000    0.000    0.000 utils.py:23(classify)
      220    0.000    0.000    0.000    0.000 <frozen abc>:117(__instancecheck__)
      495    0.000    0.000    0.000    0.000 Sheet.py:54(get_sheet_name)
      283    0.000    0.000    0.000    0.000 load_grammar.py:759(<genexpr>)
      594    0.000    0.000    0.000    0.000 {method 'end' of 're.Match' objects}
        1    0.000    0.000    0.000    0.000 load_grammar.py:793(<setcomp>)
      297    0.000    0.000    0.000    0.000 Cell.py:135(get_children)
      198    0.000    0.000    0.000    0.000 {method 'to_integral' of 'decimal.Decimal' objects}
      198    0.000    0.000    0.000    0.000 {method 'quantize' of 'decimal.Decimal' objects}
       68    0.000    0.000    0.000    0.000 visitors.py:481(__get__)
      198    0.000    0.000    0.000    0.000 {method 'split' of 'str' objects}
      495    0.000    0.000    0.000    0.000 earley_forest.py:418(transform_token_node)
      439    0.000    0.000    0.000    0.000 {method 'lstrip' of 'str' objects}
      297    0.000    0.000    0.000    0.000 earley_forest.py:232(__init__)
      496    0.000    0.000    0.000    0.000 {built-in method builtins.chr}
       99    0.000    0.000    0.000    0.000 reconstruct.py:15(is_iter_empty)
       13    0.000    0.000    0.000    0.000 load_grammar.py:450(pattern)
      310    0.000    0.000    0.000    0.000 tree_matcher.py:12(is_discarded_terminal)
        1    0.000    0.000    0.002    0.002 grammar_analysis.py:141(__init__)
      112    0.000    0.000    0.003    0.000 visitors.py:159(transform)
       29    0.000    0.000    0.000    0.000 utils.py:190(<listcomp>)
        1    0.000    0.000    0.003    0.003 earley.py:32(__init__)
      174    0.000    0.000    0.000    0.000 grammar_analysis.py:45(__hash__)
       68    0.000    0.000    0.000    0.000 visitors.py:470(__init__)
      297    0.000    0.000    0.000    0.000 Cell.py:62(get_cached_formula)
      198    0.000    0.000    0.000    0.000 Cell.py:131(set_children)
        1    0.000    0.000    0.012    0.012 tree_matcher.py:89(__init__)
      396    0.000    0.000    0.000    0.000 <frozen codecs>:276(reset)
      396    0.000    0.000    0.000    0.000 {method 'rstrip' of 'str' objects}
        1    0.000    0.000    0.441    0.441 Workbook.py:383(move_cells)
       68    0.000    0.000    0.001    0.000 visitors.py:478(__call__)
       26    0.000    0.000    0.005    0.000 visitors.py:258(transform)
        2    0.000    0.000    0.000    0.000 tree_matcher.py:28(_best_from_group)
      340    0.000    0.000    0.000    0.000 {built-in method builtins.setattr}
       68    0.000    0.000    0.001    0.000 visitors.py:500(_vargs_inline)
       43    0.000    0.000    0.001    0.000 load_grammar.py:601(literal)
      129    0.000    0.000    0.000    0.000 load_grammar.py:537(<genexpr>)
      198    0.000    0.000    0.000    0.000 Parser.py:108(get_cell_refs)
      200    0.000    0.000    0.000    0.000 Graph.py:137(get_parents_from_cell)
        1    0.000    0.000    0.000    0.000 load_grammar.py:806(<setcomp>)
      277    0.000    0.000    0.000    0.000 {method 'values' of 'collections.OrderedDict' objects}
       13    0.000    0.000    0.001    0.000 grammar_analysis.py:180(expand_rule)
       48    0.000    0.000    0.000    0.000 {built-in method builtins.max}
       71    0.000    0.000    0.000    0.000 load_grammar.py:798(<lambda>)
      198    0.000    0.000    0.000    0.000 {method 'is_finite' of 'decimal.Decimal' objects}
       43    0.000    0.000    0.000    0.000 ast.py:33(parse)
       99    0.000    0.000    0.000    0.000 {method 'clear' of 'set' objects}
       26    0.000    0.000    0.001    0.000 load_grammar.py:674(nr_deepcopy_tree)
       99    0.000    0.000    0.000    0.000 {method 'groups' of 're.Match' objects}
      172    0.000    0.000    0.000    0.000 grammar_analysis.py:28(next)
       43    0.000    0.000    0.000    0.000 load_grammar.py:536(_rfind)
        1    0.000    0.000    0.000    0.000 tree_matcher.py:115(<setcomp>)
       99    0.000    0.000    0.000    0.000 Parser.py:409(__init__)
       93    0.000    0.000    0.000    0.000 grammar.py:69(__init__)
       99    0.000    0.000    0.000    0.000 earley.py:254(<setcomp>)
       49    0.000    0.000    0.000    0.000 lexer.py:41(__init__)
      199    0.000    0.000    0.000    0.000 visitors.py:178(__default_token__)
       61    0.000    0.000    0.000    0.000 lexer.py:50(__hash__)
       20    0.000    0.000    0.000    0.000 load_grammar.py:631(expansions)
        2    0.000    0.000    0.000    0.000 utils.py:271(<listcomp>)
      112    0.000    0.000    0.000    0.000 tree.py:32(__init__)
       99    0.000    0.000    0.000    0.000 tree_matcher.py:74(__init__)
       59    0.000    0.000    0.000    0.000 load_grammar.py:668(value)
       11    0.000    0.000    0.000    0.000 earley.py:58(<listcomp>)
       99    0.000    0.000    0.000    0.000 tree_matcher.py:77(lex)
       29    0.000    0.000    0.000    0.000 utils.py:184(dedup_list)
       20    0.000    0.000    0.000    0.000 load_grammar.py:637(<lambda>)
       86    0.000    0.000    0.000    0.000 {method 'rfind' of 'str' objects}
       87    0.000    0.000    0.000    0.000 tree_matcher.py:17(__init__)
       99    0.000    0.000    0.000    0.000 Cell.py:59(cache_formula)
      119    0.000    0.000    0.000    0.000 {method 'replace' of 'str' objects}
        7    0.000    0.000    0.000    0.000 {method 'sort' of 'list' objects}
        1    0.000    0.000    0.002    0.002 load_grammar.py:710(<listcomp>)
       90    0.000    0.000    0.000    0.000 {method 'startswith' of 'str' objects}
       43    0.000    0.000    0.000    0.000 {built-in method builtins.all}
       57    0.000    0.000    0.000    0.000 grammar.py:22(__ne__)
       43    0.000    0.000    0.000    0.000 ast.py:84(_convert)
       20    0.000    0.000    0.000    0.000 lexer.py:81(to_regexp)
       71    0.000    0.000    0.000    0.000 {built-in method builtins.any}
       22    0.000    0.000    0.000    0.000 lexer.py:125(__init__)
       35    0.000    0.000    0.000    0.000 load_grammar.py:621(expansion)
      116    0.000    0.000    0.000    0.000 tree.py:175(<lambda>)
        1    0.000    0.000    0.000    0.000 tree_matcher.py:108(<setcomp>)
        1    0.000    0.000    0.000    0.000 grammar_analysis.py:82(<setcomp>)
       70    0.000    0.000    0.000    0.000 {method 'update' of 'dict' objects}
        1    0.000    0.000    0.001    0.001 load_grammar.py:693(<listcomp>)
       20    0.000    0.000    0.000    0.000 __init__.py:253(escape)
       11    0.000    0.000    0.000    0.000 load_grammar.py:346(expr)
       16    0.000    0.000    0.000    0.000 tree_matcher.py:61(make_recons_rule_to_term)
        1    0.000    0.000    0.000    0.000 earley.py:52(<setcomp>)
       15    0.000    0.000    0.000    0.000 tree.py:169(find_pred)
        1    0.000    0.000    0.000    0.000 tree_matcher.py:178(<dictcomp>)
       71    0.000    0.000    0.000    0.000 load_grammar.py:431(expansion)
       20    0.000    0.000    0.000    0.000 {method 'translate' of 'str' objects}
       25    0.000    0.000    0.000    0.000 load_grammar.py:639(<genexpr>)
        1    0.000    0.000    0.000    0.000 tree_matcher.py:116(<setcomp>)
        1    0.000    0.000    0.000    0.000 earley.py:53(<setcomp>)
        1    0.000    0.000    0.000    0.000 copy.py:66(copy)
        1    0.000    0.000    0.001    0.001 load_grammar.py:694(<listcomp>)
        1    0.000    0.000    0.012    0.012 reconstruct.py:80(__init__)
       35    0.000    0.000    0.000    0.000 tree_matcher.py:44(<lambda>)
       67    0.000    0.000    0.000    0.000 typing.py:2256(cast)
       51    0.000    0.000    0.000    0.000 load_grammar.py:572(<genexpr>)
        8    0.000    0.000    0.000    0.000 grammar.py:124(__eq__)
       31    0.000    0.000    0.000    0.000 visitors.py:108(__init__)
       15    0.000    0.000    0.000    0.000 tree.py:173(find_data)
       18    0.000    0.000    0.000    0.000 lexer.py:53(__eq__)
       21    0.000    0.000    0.000    0.000 lexer.py:70(_get_flags)
        2    0.000    0.000    0.000    0.000 utils.py:269(classify_bool)
       30    0.000    0.000    0.000    0.000 load_grammar.py:617(pattern)
       13    0.000    0.000    0.000    0.000 typing.py:352(inner)
        1    0.000    0.000    0.000    0.000 load_grammar.py:446(<dictcomp>)
       20    0.000    0.000    0.000    0.000 lexer.py:88(max_width)
        6    0.000    0.000    0.000    0.000 load_grammar.py:411(alias)
        1    0.000    0.000    0.000    0.000 copyreg.py:104(__newobj__)
       36    0.000    0.000    0.000    0.000 grammar_analysis.py:149(<lambda>)
       20    0.000    0.000    0.000    0.000 lexer.py:84(min_width)
       16    0.000    0.000    0.000    0.000 load_grammar.py:210(_args_as_int)
       50    0.000    0.000    0.000    0.000 {method 'popleft' of 'collections.deque' objects}
        1    0.000    0.000    0.000    0.000 load_grammar.py:246(_add_recurse_rule)
       36    0.000    0.000    0.000    0.000 grammar_analysis.py:172(<lambda>)
        2    0.000    0.000    0.000    0.000 tree_matcher.py:42(_best_rules_from_group)
       30    0.000    0.000    0.000    0.000 load_grammar.py:663(value)
        1    0.000    0.000    0.000    0.000 load_grammar.py:642(expr)
       22    0.000    0.000    0.000    0.000 load_grammar.py:809(<lambda>)
        1    0.000    0.000    0.000    0.000 {method '__reduce_ex__' of 'object' objects}
        5    0.000    0.000    0.000    0.000 load_grammar.py:640(<setcomp>)
        1    0.000    0.000    0.000    0.000 load_grammar.py:375(maybe)
        1    0.000    0.000    0.000    0.000 copy.py:259(_reconstruct)
       10    0.000    0.000    0.000    0.000 load_grammar.py:434(alias)
        1    0.000    0.000    0.000    0.000 reconstruct.py:83(<dictcomp>)
        1    0.000    0.000    0.000    0.000 grammar_analysis.py:175(<dictcomp>)
        1    0.000    0.000    0.000    0.000 grammar_analysis.py:145(<dictcomp>)
        1    0.000    0.000    0.000    0.000 cProfile.py:118(__exit__)
        5    0.000    0.000    0.000    0.000 load_grammar.py:613(_make_joined_pattern)
        4    0.000    0.000    0.000    0.000 load_grammar.py:219(expansion)
        3    0.000    0.000    0.000    0.000 load_grammar.py:201(_will_not_get_removed)
        8    0.000    0.000    0.000    0.000 tree_matcher.py:43(<lambda>)
        1    0.000    0.000    0.000    0.000 load_grammar.py:235(_name_rule)
        1    0.000    0.000    0.000    0.000 grammar_analysis.py:60(__init__)
        1    0.000    0.000    0.000    0.000 load_grammar.py:443(__init__)
        4    0.000    0.000    0.000    0.000 {built-in method builtins.sum}
        2    0.000    0.000    0.000    0.000 visitors.py:163(__mul__)
        1    0.000    0.000    0.000    0.000 load_grammar.py:763(<listcomp>)
        1    0.000    0.000    0.000    0.000 grammar_analysis.py:166(<dictcomp>)
        2    0.000    0.000    0.000    0.000 visitors.py:263(__mul__)
        1    0.000    0.000    0.000    0.000 grammar_analysis.py:160(<dictcomp>)
        1    0.000    0.000    0.000    0.000 grammar_analysis.py:163(<dictcomp>)
        1    0.000    0.000    0.000    0.000 load_grammar.py:240(_add_rule)
        1    0.000    0.000    0.000    0.000 load_grammar.py:228(__init__)
       12    0.000    0.000    0.000    0.000 load_grammar.py:428(expansions)
        1    0.000    0.000    0.000    0.000 load_grammar.py:445(<setcomp>)
        1    0.000    0.000    0.000    0.000 load_grammar.py:743(<setcomp>)
        1    0.000    0.000    0.000    0.000 common.py:83(__init__)
        1    0.000    0.000    0.000    0.000 load_grammar.py:516(__init__)
        3    0.000    0.000    0.000    0.000 load_grammar.py:222(expansions)
        4    0.000    0.000    0.000    0.000 {method 'values' of 'dict' objects}
        1    0.000    0.000    0.000    0.000 load_grammar.py:797(<setcomp>)
        1    0.000    0.000    0.000    0.000 lexer.py:98(to_regexp)
        4    0.000    0.000    0.000    0.000 visitors.py:255(__init__)
        2    0.000    0.000    0.000    0.000 {built-in method builtins.min}
        4    0.000    0.000    0.000    0.000 {method 'items' of 'dict' objects}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
        1    0.000    0.000    0.000    0.000 load_grammar.py:498(__init__)
        1    0.000    0.000    0.000    0.000 {built-in method builtins.issubclass}
        1    0.000    0.000    0.000    0.000 reconstruct.py:29(__init__)
        1    0.000    0.000    0.000    0.000 {method 'reverse' of 'list' objects}
        1    0.000    0.000    0.000    0.000 load_grammar.py:198(__init__)



##################Running pro_create_sheets... #######################
for test <function pro_create_sheets at 0x7f2a40461620> total time: 0.029472792999999997
Total Logs
         41859 function calls in 0.007 seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
     5000    0.002    0.000    0.005    0.000 random.py:367(choice)
     5000    0.002    0.000    0.002    0.000 random.py:235(_randbelow_with_getrandbits)
     5100    0.001    0.000    0.006    0.000 profiler.py:46(<genexpr>)
      100    0.001    0.000    0.001    0.000 utils.py:97(check_new_name)
    10100    0.000    0.000    0.000    0.000 {built-in method builtins.len}
      100    0.000    0.000    0.006    0.000 {method 'join' of 'str' objects}
     5157    0.000    0.000    0.000    0.000 {method 'getrandbits' of '_random.Random' objects}
     5000    0.000    0.000    0.000    0.000 {method 'bit_length' of 'int' objects}
     5000    0.000    0.000    0.000    0.000 {method 'isalnum' of 'str' objects}
      100    0.000    0.000    0.001    0.000 Workbook.py:884(new_sheet)
      100    0.000    0.000    0.006    0.000 profiler.py:43(generate_random_string)
      100    0.000    0.000    0.001    0.000 Workbook.py:36(run_func)
      100    0.000    0.000    0.000    0.000 Workbook.py:519(num_sheets)
      100    0.000    0.000    0.000    0.000 Graph.py:128(get_sheet_parents)
      100    0.000    0.000    0.000    0.000 Workbook.py:873(recompute_sheet_parents)
      100    0.000    0.000    0.000    0.000 Graph.py:121(has_sheet)
      100    0.000    0.000    0.000    0.000 Sheet.py:25(__init__)
      100    0.000    0.000    0.000    0.000 utils.py:79(get_hidden_name)
      100    0.000    0.000    0.000    0.000 Graph.py:124(add_sheet)
      100    0.000    0.000    0.000    0.000 {method 'lower' of 'str' objects}
      100    0.000    0.000    0.000    0.000 {method 'keys' of 'collections.OrderedDict' objects}
      100    0.000    0.000    0.000    0.000 {method 'keys' of 'dict' objects}
        1    0.000    0.000    0.000    0.000 cProfile.py:118(__exit__)
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}



##################Running pro_set_cell_contents... #######################
for test <function pro_set_cell_contents at 0x7f2a40461760> total time: 26.810059880000008
Total Logs
         35967896 function calls in 6.399 seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
  4999500    2.066    0.000    4.580    0.000 random.py:367(choice)
  4999500    1.545    0.000    2.084    0.000 random.py:235(_randbelow_with_getrandbits)
  5009499    1.143    0.000    5.723    0.000 profiler.py:46(<genexpr>)
 10068993    0.436    0.000    0.436    0.000 {built-in method builtins.len}
    29997    0.368    0.000    6.091    0.000 {method 'join' of 'str' objects}
  5160975    0.295    0.000    0.295    0.000 {method 'getrandbits' of '_random.Random' objects}
  4999500    0.243    0.000    0.243    0.000 {method 'bit_length' of 'int' objects}
     9999    0.036    0.000    0.286    0.000 Workbook.py:741(set_cell_contents)
   189981    0.029    0.000    0.029    0.000 {method 'lower' of 'str' objects}
     9999    0.025    0.000    0.048    0.000 utils.py:308(error_matcher)
     9999    0.022    0.000    0.151    0.000 Sheet.py:60(set_cell_contents)
     9999    0.021    0.000    0.034    0.000 Workbook.py:652(recompute_cell_and_parents)
     9999    0.018    0.000    0.027    0.000 utils.py:180(convert_location_to_idx)
     9999    0.018    0.000    0.071    0.000 Cell.py:81(set_cell_value)
    19998    0.012    0.000    0.020    0.000 Sheet.py:93(get_cell_value)
     9999    0.010    0.000    6.094    0.001 profiler.py:43(generate_random_string)
     9999    0.009    0.000    0.011    0.000 profiler.py:25(convert_to_excel_coordinates)
     9999    0.009    0.000    0.082    0.000 Cell.py:65(set_contents)
     9999    0.008    0.000    0.294    0.000 Workbook.py:36(run_func)
     9999    0.007    0.000    0.009    0.000 Sheet.py:124(update_extent)
    39996    0.007    0.000    0.007    0.000 {method 'get' of 'dict' objects}
     9999    0.006    0.000    0.010    0.000 Workbook.py:554(get_sheet_name_from_hidden)
    79992    0.006    0.000    0.006    0.000 {method 'strip' of 'str' objects}
     9999    0.006    0.000    0.087    0.000 Cell.py:46(__init__)
    19998    0.006    0.000    0.007    0.000 utils.py:79(get_hidden_name)
    19998    0.005    0.000    0.008    0.000 Sheet.py:120(get_cell)
     9999    0.005    0.000    0.016    0.000 __init__.py:163(match)
     9999    0.005    0.000    0.007    0.000 __init__.py:272(_compile)
    19998    0.005    0.000    0.005    0.000 {built-in method _heapq.heappush}
     9999    0.004    0.000    0.020    0.000 utils.py:132(check_valid_cell_location)
     9999    0.004    0.000    0.007    0.000 Workbook.py:728(clean_children_cells)
     9999    0.003    0.000    0.003    0.000 Graph.py:330(tarjans)
    19998    0.003    0.000    0.003    0.000 {built-in method builtins.isinstance}
     9999    0.003    0.000    0.004    0.000 utils.py:213(is_formula)
     9999    0.003    0.000    0.003    0.000 {method 'match' of 're.Pattern' objects}
    19998    0.001    0.000    0.001    0.000 {built-in method builtins.ord}
     9999    0.001    0.000    0.001    0.000 Cell.py:125(get_value)
     9999    0.001    0.000    0.001    0.000 {method 'upper' of 'str' objects}
     9999    0.001    0.000    0.001    0.000 {built-in method builtins.divmod}
     9999    0.001    0.000    0.001    0.000 Sheet.py:54(get_sheet_name)
     9999    0.001    0.000    0.001    0.000 {method 'lstrip' of 'str' objects}
     9999    0.001    0.000    0.001    0.000 {method 'rstrip' of 'str' objects}
     9999    0.001    0.000    0.001    0.000 {built-in method builtins.chr}
        1    0.000    0.000    0.000    0.000 cProfile.py:118(__exit__)
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}



##################Running pro_update_formula_chain... #######################
for test <function pro_update_formula_chain at 0x7f2a404619e0> total time: 12.164677239000007
Total Logs
         880014 function calls in 2.774 seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    2.483    2.483    2.498    2.498 Graph.py:330(tarjans)
    10000    0.031    0.000    0.266    0.000 Workbook.py:596(recompute_cell_value)
    69995    0.022    0.000    0.022    0.000 {built-in method builtins.isinstance}
    29999    0.017    0.000    0.026    0.000 Sheet.py:93(get_cell_value)
     9999    0.015    0.000    0.153    0.000 Workbook.py:558(get_formula_value)
     9999    0.015    0.000    0.081    0.000 Parser.py:253(cell)
    10000    0.014    0.000    0.027    0.000 Cell.py:81(set_cell_value)
    20000    0.010    0.000    0.010    0.000 Graph.py:137(get_parents_from_cell)
    40000    0.009    0.000    0.012    0.000 utils.py:79(get_hidden_name)
     9999    0.009    0.000    0.052    0.000 Workbook.py:822(get_cell_value)
     9999    0.008    0.000    0.125    0.000 visitors.py:421(_visit_tree)
   100011    0.008    0.000    0.008    0.000 {method 'lower' of 'str' objects}
    19998    0.008    0.000    0.012    0.000 {built-in method builtins.getattr}
        1    0.007    0.007    2.773    2.773 Workbook.py:652(recompute_cell_and_parents)
    19999    0.007    0.000    0.025    0.000 __init__.py:272(_compile)
     9999    0.006    0.000    0.035    0.000 Sheet.py:104(set_cell_value)
    50000    0.006    0.000    0.006    0.000 {method 'get' of 'dict' objects}
     9999    0.005    0.000    0.105    0.000 visitors.py:444(inner)
    10000    0.005    0.000    0.008    0.000 utils.py:208(remove_exponent)
    10000    0.005    0.000    0.013    0.000 Workbook.py:589(get_cell_from_location)
     9999    0.005    0.000    0.006    0.000 visitors.py:430(<listcomp>)
     9999    0.005    0.000    0.005    0.000 Parser.py:97(__init__)
    10000    0.005    0.000    0.009    0.000 Workbook.py:554(get_sheet_name_from_hidden)
     9999    0.005    0.000    0.089    0.000 Parser.py:40(fix_formula)
     9999    0.004    0.000    0.010    0.000 visitors.py:429(visit_children)
     9999    0.004    0.000    0.011    0.000 __init__.py:178(sub)
    10000    0.004    0.000    0.027    0.000 __init__.py:163(match)
     9999    0.004    0.000    0.004    0.000 lexer.py:265(__eq__)
    10000    0.003    0.000    0.030    0.000 utils.py:132(check_valid_cell_location)
    29999    0.003    0.000    0.003    0.000 Cell.py:125(get_value)
    40004    0.003    0.000    0.003    0.000 {built-in method builtins.len}
     9999    0.003    0.000    0.128    0.000 visitors.py:415(visit)
    10001    0.003    0.000    0.004    0.000 utils.py:213(is_formula)
    10002    0.003    0.000    0.005    0.000 Sheet.py:120(get_cell)
     9999    0.003    0.000    0.003    0.000 utils.py:296(get_highest_precedence_error)
    10000    0.003    0.000    0.003    0.000 {method 'match' of 're.Pattern' objects}
    50000    0.002    0.000    0.002    0.000 {method 'append' of 'list' objects}
    19998    0.002    0.000    0.002    0.000 Cell.py:62(get_cached_formula)
    19999    0.002    0.000    0.002    0.000 Cell.py:128(get_contents)
    30000    0.002    0.000    0.002    0.000 {method 'pop' of 'list' objects}
     9999    0.002    0.000    0.002    0.000 {method 'sub' of 're.Pattern' objects}
    10000    0.002    0.000    0.002    0.000 {method 'to_integral' of 'decimal.Decimal' objects}
    10000    0.001    0.000    0.001    0.000 {method 'quantize' of 'decimal.Decimal' objects}
     9999    0.001    0.000    0.001    0.000 Cell.py:131(set_children)
    10000    0.001    0.000    0.001    0.000 Cell.py:135(get_children)
     9999    0.001    0.000    0.001    0.000 Parser.py:108(get_cell_refs)
     9999    0.001    0.000    0.001    0.000 {method 'add' of 'set' objects}
    10000    0.001    0.000    0.001    0.000 Sheet.py:54(get_sheet_name)
    10000    0.001    0.000    0.001    0.000 {method 'is_finite' of 'decimal.Decimal' objects}
    10008    0.001    0.000    0.001    0.000 {method 'strip' of 'str' objects}
        1    0.000    0.000    2.773    2.773 Workbook.py:741(set_cell_contents)
        1    0.000    0.000    2.774    2.774 Workbook.py:36(run_func)
        1    0.000    0.000    0.000    0.000 utils.py:180(convert_location_to_idx)
        1    0.000    0.000    0.000    0.000 Sheet.py:60(set_cell_contents)
        1    0.000    0.000    0.000    0.000 utils.py:308(error_matcher)
        1    0.000    0.000    0.000    0.000 cProfile.py:118(__exit__)
        1    0.000    0.000    0.000    0.000 Cell.py:65(set_contents)
        1    0.000    0.000    0.000    0.000 Workbook.py:728(clean_children_cells)
        1    0.000    0.000    0.000    0.000 Sheet.py:124(update_extent)
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
        2    0.000    0.000    0.000    0.000 {method 'join' of 'str' objects}
        2    0.000    0.000    0.000    0.000 {built-in method builtins.ord}
        1    0.000    0.000    0.000    0.000 {method 'upper' of 'str' objects}
        1    0.000    0.000    0.000    0.000 {method 'lstrip' of 'str' objects}
        1    0.000    0.000    0.000    0.000 {method 'rstrip' of 'str' objects}



##################Running pro_write_formula_chain... #######################
for test <function pro_write_formula_chain at 0x7f2a40461940> total time: 644.6417123790002
Total Logs
         182250683 function calls (181430765 primitive calls) in 61.699 seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
   158874   11.342    0.000   42.199    0.000 earley.py:78(predict_and_complete)
  9669033    6.701    0.000   11.399    0.000 earley_common.py:9(__init__)
23817618/23197680    4.425    0.000    5.539    0.000 {built-in method builtins.hash}
     9999    3.764    0.000   12.614    0.001 earley_forest.py:283(visit)
  7969203    3.167    0.000    4.801    0.000 utils.py:345(add)
  5629437    2.506    0.000    4.823    0.000 grammar.py:18(__eq__)
 12878712    2.455    0.000    3.400    0.000 grammar.py:25(__hash__)
   148875    1.647    0.000    4.819    0.000 xearley.py:41(scan)
  5269473    1.600    0.000    2.022    0.000 lexer.py:265(__eq__)
  3429657    1.416    0.000    2.191    0.000 utils.py:342(__contains__)
  7919208    1.376    0.000    1.396    0.000 earley_common.py:28(__eq__)
 14698530    1.229    0.000    1.229    0.000 {built-in method builtins.isinstance}
 12088791    1.046    0.000    1.046    0.000 earley_common.py:31(__hash__)
   299970    1.027    0.000    4.774    0.000 earley.py:135(<listcomp>)
 10398960    0.974    0.000    0.974    0.000 grammar.py:121(__hash__)
   579942    0.920    0.000    2.149    0.000 earley_forest.py:50(__init__)
 11748825    0.836    0.000    0.836    0.000 {built-in method builtins.len}
   559944    0.807    0.000    3.322    0.000 earley_forest.py:437(_visit_node_out_helper)
 11156664    0.804    0.000    0.804    0.000 {method 'append' of 'list' objects}
  1626507    0.761    0.000    0.917    0.000 {built-in method fromkeys}
   279972    0.761    0.000    1.435    0.000 earley_forest.py:603(transform_packed_node)
  1626507    0.603    0.000    1.520    0.000 utils.py:339(__init__)
  4779522    0.598    0.000    0.598    0.000 {built-in method builtins.next}
   559944    0.514    0.000    1.243    0.000 {built-in method builtins.sorted}
  6229377    0.512    0.000    0.512    0.000 {built-in method builtins.id}
   599940    0.483    0.000    1.484    0.000 earley_forest.py:64(add_family)
  1438746    0.415    0.000    0.741    0.000 parser_frontends.py:184(match)
  1666503    0.407    0.000    0.570    0.000 utils.py:348(__iter__)
   599940    0.390    0.000    0.714    0.000 earley_forest.py:131(__init__)
  1458744    0.340    0.000    0.340    0.000 {method 'match' of 're.Pattern' objects}
   599940    0.328    0.000    1.666    0.000 earley_common.py:25(advance)
   559944    0.323    0.000    1.783    0.000 earley_forest.py:85(children)
     9999    0.323    0.000   47.343    0.005 xearley.py:39(_parse)
   209979    0.319    0.000    0.778    0.000 earley_forest.py:581(transform_symbol_node)
   279972    0.307    0.000    0.909    0.000 earley_forest.py:631(visit_packed_node_in)
   279972    0.282    0.000    1.449    0.000 earley_forest.py:422(visit_symbol_node_in)
   279972    0.268    0.000    0.554    0.000 earley_forest.py:427(visit_packed_node_in)
   559944    0.265    0.000    0.364    0.000 earley_forest.py:145(sort_key)
   859914    0.263    0.000    0.370    0.000 {method 'setdefault' of 'dict' objects}
   279972    0.262    0.000    2.358    0.000 earley_forest.py:638(visit_packed_node_out)
   279972    0.231    0.000    2.363    0.000 earley_forest.py:625(visit_symbol_node_in)
  2226447    0.223    0.000    0.223    0.000 {built-in method builtins.iter}
  2579742    0.189    0.000    0.189    0.000 {method 'pop' of 'collections.deque' objects}
  1409859    0.182    0.000    0.182    0.000 {method 'add' of 'set' objects}
   209979    0.172    0.000    0.328    0.000 earley_forest.py:565(_call_rule_func)
   209979    0.168    0.000    0.282    0.000 earley_forest.py:556(_collapse_ambig)
  2489751    0.158    0.000    0.158    0.000 {method 'append' of 'collections.deque' objects}
   279972    0.142    0.000    0.215    0.000 earley_forest.py:155(children)
   559944    0.139    0.000    0.194    0.000 utils.py:357(__len__)
   279972    0.125    0.000    0.130    0.000 earley_forest.py:499(__init__)
   839916    0.123    0.000    0.123    0.000 {method 'remove' of 'set' objects}
   279972    0.116    0.000    0.216    0.000 earley_forest.py:70(load_paths)
   279972    0.112    0.000    2.047    0.000 earley_forest.py:450(visit_packed_node_out)
   559944    0.099    0.000    0.099    0.000 earley_forest.py:141(is_empty)
     9999    0.094    0.000   60.300    0.006 earley.py:262(parse)
    69993    0.093    0.000    0.129    0.000 earley_forest.py:591(transform_intermediate_node)
     9999    0.087    0.000   60.426    0.006 parser_frontends.py:100(parse)
     9999    0.086    0.000   61.401    0.006 Workbook.py:652(recompute_cell_and_parents)
   209979    0.083    0.000    1.215    0.000 earley_forest.py:444(visit_symbol_node_out)
   599940    0.081    0.000    0.081    0.000 earley_forest.py:101(__hash__)
   199980    0.080    0.000    0.097    0.000 {built-in method builtins.getattr}
    89991    0.076    0.000    0.102    0.000 lexer.py:213(_future_new)
   279972    0.073    0.000    0.073    0.000 earley_forest.py:158(<listcomp>)
   559944    0.073    0.000    0.073    0.000 earley_forest.py:548(_check_cycle)
   209979    0.071    0.000    0.091    0.000 earley_forest.py:571(_call_ambig_func)
   169983    0.070    0.000    0.089    0.000 parse_tree_builder.py:20(__call__)
   599940    0.070    0.000    0.070    0.000 earley_forest.py:169(__hash__)
    79992    0.067    0.000    0.084    0.000 earley_forest.py:432(visit_token_node)
    89991    0.064    0.000    0.166    0.000 lexer.py:202(__new__)
   559944    0.062    0.000    0.062    0.000 {method 'pop' of 'list' objects}
59994/9999    0.054    0.000    0.588    0.000 visitors.py:421(_visit_tree)
    89991    0.052    0.000    0.062    0.000 earley_forest.py:193(__init__)
59994/9999    0.049    0.000    0.546    0.000 visitors.py:444(inner)
59994/9999    0.049    0.000    0.486    0.000 visitors.py:430(<listcomp>)
    59994    0.047    0.000    0.308    0.000 Parser.py:40(fix_formula)
     9999    0.043    0.000   61.662    0.006 Workbook.py:741(set_cell_contents)
     9999    0.043    0.000   61.099    0.006 Workbook.py:558(get_formula_value)
    49995    0.043    0.000    0.072    0.000 Sheet.py:93(get_cell_value)
    19998    0.039    0.000    0.068    0.000 Cell.py:81(set_cell_value)
   178872    0.039    0.000    0.039    0.000 utils.py:354(__bool__)
     9999    0.037    0.000    0.149    0.000 Sheet.py:60(set_cell_contents)
59994/9999    0.035    0.000    0.493    0.000 visitors.py:429(visit_children)
     9999    0.034    0.000    0.152    0.000 Parser.py:253(cell)
     9999    0.034    0.000    0.051    0.000 utils.py:180(convert_location_to_idx)
    29997    0.032    0.000    0.096    0.000 xearley.py:88(<listcomp>)
    29997    0.032    0.000    0.032    0.000 xearley.py:85(<listcomp>)
    59994    0.030    0.000    0.042    0.000 utils.py:296(get_highest_precedence_error)
    69993    0.029    0.000    0.284    0.000 earley_forest.py:447(visit_intermediate_node_out)
     9999    0.029    0.000   12.643    0.001 earley_forest.py:535(visit)
    89991    0.027    0.000    0.027    0.000 {built-in method __new__ of type object at 0x860f60}
   209979    0.026    0.000    0.026    0.000 {built-in method builtins.hasattr}
    19998    0.024    0.000    0.032    0.000 parse_tree_builder.py:145(__call__)
     9999    0.023    0.000    0.086    0.000 earley.py:284(<listcomp>)
     9999    0.023    0.000    0.030    0.000 parser_frontends.py:96(_make_lexer_thread)
    89991    0.022    0.000    0.022    0.000 {method 'get' of 'dict' objects}
    29997    0.022    0.000    0.030    0.000 __init__.py:272(_compile)
     9999    0.022    0.000    0.034    0.000 Workbook.py:701(_get_sheet_name_location)
     9999    0.021    0.000    0.026    0.000 Parser.py:211(mul_expr)
   159984    0.021    0.000    0.021    0.000 {method 'lower' of 'str' objects}
     9999    0.020    0.000    0.079    0.000 Workbook.py:822(get_cell_value)
    19998    0.018    0.000    0.018    0.000 Parser.py:243(number)
     9999    0.018    0.000    0.037    0.000 earley_forest.py:523(__init__)
     9999    0.018    0.000    0.021    0.000 profiler.py:25(convert_to_excel_coordinates)
     9999    0.017    0.000   12.662    0.001 earley_forest.py:397(transform)
     9999    0.017    0.000    0.019    0.000 earley_forest.py:390(__init__)
     9999    0.016    0.000    0.022    0.000 Parser.py:169(add_expr)
     9999    0.016    0.000    0.070    0.000 Workbook.py:714(add_children_cells)
    89991    0.016    0.000    0.016    0.000 {method 'group' of 're.Match' objects}
     9999    0.016    0.000   61.678    0.006 Workbook.py:36(run_func)
    59994    0.016    0.000    0.016    0.000 tree.py:61(__init__)
    39996    0.015    0.000    0.021    0.000 utils.py:79(get_hidden_name)
   149985    0.015    0.000    0.015    0.000 {method 'end' of 're.Match' objects}
     9999    0.015    0.000    0.015    0.000 Parser.py:97(__init__)
     9999    0.015    0.000    0.019    0.000 Graph.py:68(add_connection)
    29997    0.014    0.000    0.014    0.000 {method 'join' of 'str' objects}
    19998    0.013    0.000    0.044    0.000 __init__.py:163(match)
    89991    0.013    0.000    0.013    0.000 earley_forest.py:207(__hash__)
    19998    0.012    0.000    0.056    0.000 utils.py:132(check_valid_cell_location)
     9999    0.012    0.000    0.028    0.000 Cell.py:65(set_contents)
     9999    0.012    0.000    0.069    0.000 Sheet.py:104(set_cell_value)
     9999    0.012    0.000    0.019    0.000 utils.py:208(remove_exponent)
     9999    0.011    0.000    0.033    0.000 __init__.py:178(sub)
     9999    0.011    0.000    0.013    0.000 Sheet.py:124(update_extent)
    19998    0.011    0.000    0.011    0.000 {built-in method _heapq.heappush}
     9999    0.011    0.000   60.436    0.006 lark.py:640(parse)
     9999    0.009    0.000    0.016    0.000 Workbook.py:554(get_sheet_name_from_hidden)
    79992    0.009    0.000    0.009    0.000 earley_forest.py:418(transform_token_node)
    59994    0.009    0.000    0.009    0.000 {method 'extend' of 'list' objects}
     9999    0.009    0.000    0.009    0.000 {method 'sub' of 're.Pattern' objects}
     9999    0.009    0.000    0.010    0.000 parser_frontends.py:86(_verify_start)
     9999    0.008    0.000    0.008    0.000 Graph.py:330(tarjans)
     9999    0.008    0.000    0.036    0.000 Cell.py:46(__init__)
     9999    0.007    0.000    0.007    0.000 {built-in method _abc._abc_instancecheck}
    19998    0.006    0.000    0.009    0.000 Sheet.py:120(get_cell)
     9999    0.006    0.000    0.595    0.000 visitors.py:415(visit)
     9999    0.006    0.000    0.006    0.000 lark.py:220(__getattr__)
    39996    0.006    0.000    0.006    0.000 Cell.py:125(get_value)
     9999    0.006    0.000    0.010    0.000 Workbook.py:728(clean_children_cells)
     9999    0.005    0.000    0.005    0.000 {method 'split' of 'str' objects}
     9999    0.005    0.000    0.006    0.000 utils.py:213(is_formula)
    39996    0.005    0.000    0.005    0.000 {method 'strip' of 'str' objects}
     9999    0.004    0.000    0.004    0.000 {method 'update' of 'dict' objects}
     9999    0.004    0.000    0.011    0.000 <frozen abc>:117(__instancecheck__)
     9999    0.004    0.000    0.004    0.000 {method 'to_integral' of 'decimal.Decimal' objects}
     9909    0.004    0.000    0.004    0.000 {method 'quantize' of 'decimal.Decimal' objects}
     9999    0.003    0.000    0.003    0.000 Cell.py:131(set_children)
     9999    0.003    0.000    0.003    0.000 grammar.py:15(__init__)
    19998    0.003    0.000    0.003    0.000 Cell.py:128(get_contents)
     9999    0.002    0.000    0.002    0.000 Cell.py:59(cache_formula)
    19998    0.002    0.000    0.002    0.000 {built-in method builtins.ord}
     9999    0.002    0.000    0.002    0.000 {built-in method builtins.divmod}
     9999    0.002    0.000    0.002    0.000 earley_forest.py:232(__init__)
     9999    0.002    0.000    0.002    0.000 {method 'upper' of 'str' objects}
     9999    0.002    0.000    0.002    0.000 Parser.py:108(get_cell_refs)
     9999    0.002    0.000    0.002    0.000 Parser.py:111(parens)
     9999    0.002    0.000    0.002    0.000 Sheet.py:54(get_sheet_name)
     9999    0.002    0.000    0.002    0.000 {built-in method builtins.chr}
     9999    0.001    0.000    0.001    0.000 {method 'is_finite' of 'decimal.Decimal' objects}
     9999    0.001    0.000    0.001    0.000 {method 'lstrip' of 'str' objects}
     9999    0.001    0.000    0.001    0.000 Cell.py:62(get_cached_formula)
     9999    0.001    0.000    0.001    0.000 {method 'rstrip' of 'str' objects}
       90    0.000    0.000    0.000    0.000 {method 'normalize' of 'decimal.Decimal' objects}
        1    0.000    0.000    0.000    0.000 cProfile.py:118(__exit__)
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}



##################Running pro_cyle_formula_chain... #######################
for test <function pro_cyle_formula_chain at 0x7f2a40461b20> total time: 11.419253291000006
Total Logs
         306789 function calls (306768 primitive calls) in 2.834 seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    2.759    2.759    2.777    2.777 Graph.py:330(tarjans)
        1    0.018    0.018    0.054    0.054 Workbook.py:630(_set_cycle_detected)
    20000    0.010    0.000    0.010    0.000 Graph.py:137(get_parents_from_cell)
    10002    0.007    0.000    0.010    0.000 Cell.py:81(set_cell_value)
    20005    0.005    0.000    0.006    0.000 utils.py:79(get_hidden_name)
    10000    0.005    0.000    0.013    0.000 Workbook.py:589(get_cell_from_location)
    10002    0.004    0.000    0.008    0.000 Workbook.py:554(get_sheet_name_from_hidden)
    30001    0.004    0.000    0.004    0.000 {built-in method builtins.min}
    10002    0.002    0.000    0.004    0.000 Sheet.py:120(get_cell)
    30019    0.002    0.000    0.002    0.000 {method 'pop' of 'list' objects}
    10005    0.002    0.000    0.002    0.000 Cell.py:125(get_value)
    10009    0.002    0.000    0.002    0.000 {method 'get' of 'dict' objects}
    30017    0.002    0.000    0.002    0.000 {method 'lower' of 'str' objects}
    30544    0.002    0.000    0.002    0.000 {built-in method builtins.isinstance}
    40433    0.002    0.000    0.002    0.000 {method 'append' of 'list' objects}
    10000    0.001    0.000    0.001    0.000 CellError.py:11(__init__)
    10002    0.001    0.000    0.001    0.000 Cell.py:128(get_contents)
    10002    0.001    0.000    0.001    0.000 Sheet.py:54(get_sheet_name)
    10005    0.001    0.000    0.001    0.000 {method 'strip' of 'str' objects}
        1    0.001    0.001    2.833    2.833 Workbook.py:652(recompute_cell_and_parents)
        4    0.000    0.000    0.002    0.000 earley.py:78(predict_and_complete)
        1    0.000    0.000    2.834    2.834 Workbook.py:36(run_func)
      388    0.000    0.000    0.000    0.000 earley_common.py:9(__init__)
        1    0.000    0.000    2.834    2.834 Workbook.py:741(set_cell_contents)
  917/896    0.000    0.000    0.000    0.000 {built-in method builtins.hash}
        1    0.000    0.000    0.000    0.000 earley_forest.py:283(visit)
      290    0.000    0.000    0.000    0.000 utils.py:345(add)
      215    0.000    0.000    0.000    0.000 grammar.py:18(__eq__)
      485    0.000    0.000    0.000    0.000 grammar.py:25(__hash__)
       51    0.000    0.000    0.000    0.000 {built-in method fromkeys}
      203    0.000    0.000    0.000    0.000 lexer.py:265(__eq__)
      144    0.000    0.000    0.000    0.000 utils.py:342(__contains__)
      333    0.000    0.000    0.000    0.000 earley_common.py:28(__eq__)
      431    0.000    0.000    0.000    0.000 earley_common.py:31(__hash__)
        3    0.000    0.000    0.000    0.000 xearley.py:41(scan)
      415    0.000    0.000    0.000    0.000 grammar.py:121(__hash__)
       10    0.000    0.000    0.000    0.000 earley.py:135(<listcomp>)
      465    0.000    0.000    0.000    0.000 {built-in method builtins.len}
       20    0.000    0.000    0.000    0.000 earley_forest.py:50(__init__)
       19    0.000    0.000    0.000    0.000 earley_forest.py:437(_visit_node_out_helper)
       10    0.000    0.000    0.000    0.000 earley_forest.py:603(transform_packed_node)
      156    0.000    0.000    0.000    0.000 {built-in method builtins.next}
       51    0.000    0.000    0.000    0.000 utils.py:339(__init__)
       18    0.000    0.000    0.000    0.000 {built-in method builtins.sorted}
      209    0.000    0.000    0.000    0.000 {built-in method builtins.id}
       21    0.000    0.000    0.000    0.000 earley_forest.py:64(add_family)
       21    0.000    0.000    0.000    0.000 earley_forest.py:131(__init__)
        8    0.000    0.000    0.000    0.000 earley_forest.py:581(transform_symbol_node)
       48    0.000    0.000    0.000    0.000 utils.py:348(__iter__)
       18    0.000    0.000    0.000    0.000 earley_forest.py:85(children)
       21    0.000    0.000    0.000    0.000 earley_common.py:25(advance)
       10    0.000    0.000    0.000    0.000 earley_forest.py:631(visit_packed_node_in)
        1    0.000    0.000    0.002    0.002 xearley.py:39(_parse)
        1    0.000    0.000    0.002    0.002 earley.py:262(parse)
       10    0.000    0.000    0.000    0.000 earley_forest.py:638(visit_packed_node_out)
       10    0.000    0.000    0.000    0.000 earley_forest.py:427(visit_packed_node_in)
       29    0.000    0.000    0.000    0.000 {method 'setdefault' of 'dict' objects}
        9    0.000    0.000    0.000    0.000 earley_forest.py:422(visit_symbol_node_in)
       20    0.000    0.000    0.000    0.000 earley_forest.py:145(sort_key)
        8    0.000    0.000    0.000    0.000 earley_forest.py:556(_collapse_ambig)
        9    0.000    0.000    0.000    0.000 earley_forest.py:625(visit_symbol_node_in)
        3    0.000    0.000    0.000    0.000 lexer.py:213(_future_new)
       21    0.000    0.000    0.000    0.000 parser_frontends.py:184(match)
       49    0.000    0.000    0.000    0.000 {method 'add' of 'set' objects}
       66    0.000    0.000    0.000    0.000 {built-in method builtins.iter}
       23    0.000    0.000    0.000    0.000 {method 'match' of 're.Pattern' objects}
       86    0.000    0.000    0.000    0.000 {method 'pop' of 'collections.deque' objects}
        8    0.000    0.000    0.000    0.000 earley_forest.py:565(_call_rule_func)
        5    0.000    0.000    0.000    0.000 Sheet.py:93(get_cell_value)
       83    0.000    0.000    0.000    0.000 {method 'append' of 'collections.deque' objects}
        1    0.000    0.000    0.000    0.000 utils.py:180(convert_location_to_idx)
        1    0.000    0.000    0.002    0.002 Workbook.py:558(get_formula_value)
        1    0.000    0.000    0.002    0.002 parser_frontends.py:100(parse)
       10    0.000    0.000    0.000    0.000 earley_forest.py:155(children)
       18    0.000    0.000    0.000    0.000 utils.py:357(__len__)
        1    0.000    0.000    0.000    0.000 cProfile.py:118(__exit__)
       28    0.000    0.000    0.000    0.000 {method 'remove' of 'set' objects}
       10    0.000    0.000    0.000    0.000 earley_forest.py:450(visit_packed_node_out)
        9    0.000    0.000    0.000    0.000 earley_forest.py:499(__init__)
        9    0.000    0.000    0.000    0.000 earley_forest.py:70(load_paths)
        2    0.000    0.000    0.000    0.000 __init__.py:163(match)
        1    0.000    0.000    0.000    0.000 Parser.py:253(cell)
        3    0.000    0.000    0.000    0.000 __init__.py:272(_compile)
        1    0.000    0.000    0.000    0.000 Sheet.py:60(set_cell_contents)
        8    0.000    0.000    0.000    0.000 earley_forest.py:444(visit_symbol_node_out)
       20    0.000    0.000    0.000    0.000 earley_forest.py:141(is_empty)
       19    0.000    0.000    0.000    0.000 earley_forest.py:548(_check_cycle)
       10    0.000    0.000    0.000    0.000 {built-in method builtins.getattr}
        1    0.000    0.000    0.000    0.000 utils.py:208(remove_exponent)
        1    0.000    0.000    0.000    0.000 earley.py:284(<listcomp>)
        8    0.000    0.000    0.000    0.000 earley_forest.py:571(_call_ambig_func)
        7    0.000    0.000    0.000    0.000 parse_tree_builder.py:20(__call__)
        1    0.000    0.000    0.000    0.000 parser_frontends.py:96(_make_lexer_thread)
        1    0.000    0.000    0.000    0.000 Workbook.py:701(_get_sheet_name_location)
       19    0.000    0.000    0.000    0.000 earley_forest.py:101(__hash__)
        2    0.000    0.000    0.000    0.000 earley_forest.py:432(visit_token_node)
        1    0.000    0.000    0.000    0.000 Workbook.py:714(add_children_cells)
       10    0.000    0.000    0.000    0.000 earley_forest.py:158(<listcomp>)
        3    0.000    0.000    0.000    0.000 lexer.py:202(__new__)
        1    0.000    0.000    0.000    0.000 Cell.py:65(set_contents)
        1    0.000    0.000    0.000    0.000 Sheet.py:124(update_extent)
        1    0.000    0.000    0.000    0.000 earley_forest.py:535(visit)
       21    0.000    0.000    0.000    0.000 earley_forest.py:169(__hash__)
        1    0.000    0.000    0.000    0.000 Graph.py:68(add_connection)
        1    0.000    0.000    0.000    0.000 earley_forest.py:397(transform)
        1    0.000    0.000    0.000    0.000 __init__.py:178(sub)
        3    0.000    0.000    0.000    0.000 earley_forest.py:193(__init__)
        1    0.000    0.000    0.000    0.000 earley_forest.py:591(transform_intermediate_node)
        2    0.000    0.000    0.000    0.000 utils.py:132(check_valid_cell_location)
        1    0.000    0.000    0.000    0.000 earley_forest.py:523(__init__)
        1    0.000    0.000    0.000    0.000 Workbook.py:822(get_cell_value)
        1    0.000    0.000    0.000    0.000 Workbook.py:728(clean_children_cells)
        1    0.000    0.000    0.000    0.000 earley_forest.py:390(__init__)
        2    0.000    0.000    0.000    0.000 <frozen abc>:117(__instancecheck__)
        1    0.000    0.000    0.000    0.000 parser_frontends.py:86(_verify_start)
        1    0.000    0.000    0.000    0.000 Parser.py:97(__init__)
        1    0.000    0.000    0.000    0.000 parse_tree_builder.py:145(__call__)
        1    0.000    0.000    0.000    0.000 visitors.py:421(_visit_tree)
        1    0.000    0.000    0.002    0.002 lark.py:640(parse)
        1    0.000    0.000    0.000    0.000 Sheet.py:104(set_cell_value)
        1    0.000    0.000    0.000    0.000 Parser.py:40(fix_formula)
        8    0.000    0.000    0.000    0.000 {built-in method builtins.hasattr}
        1    0.000    0.000    0.000    0.000 visitors.py:444(inner)
        3    0.000    0.000    0.000    0.000 {built-in method __new__ of type object at 0x860f60}
        3    0.000    0.000    0.000    0.000 {method 'join' of 'str' objects}
        1    0.000    0.000    0.000    0.000 visitors.py:429(visit_children)
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
        1    0.000    0.000    0.000    0.000 tree.py:61(__init__)
        3    0.000    0.000    0.000    0.000 utils.py:354(__bool__)
        3    0.000    0.000    0.000    0.000 {method 'group' of 're.Match' objects}
        1    0.000    0.000    0.000    0.000 {method 'sub' of 're.Pattern' objects}
        2    0.000    0.000    0.000    0.000 {built-in method _abc._abc_instancecheck}
        1    0.000    0.000    0.000    0.000 visitors.py:415(visit)
        1    0.000    0.000    0.000    0.000 utils.py:296(get_highest_precedence_error)
        1    0.000    0.000    0.000    0.000 utils.py:213(is_formula)
        1    0.000    0.000    0.000    0.000 earley_forest.py:447(visit_intermediate_node_out)
        1    0.000    0.000    0.000    0.000 Cell.py:131(set_children)
        1    0.000    0.000    0.000    0.000 visitors.py:430(<listcomp>)
        1    0.000    0.000    0.000    0.000 {method 'update' of 'dict' objects}
        1    0.000    0.000    0.000    0.000 earley_forest.py:232(__init__)
        3    0.000    0.000    0.000    0.000 earley_forest.py:207(__hash__)
        1    0.000    0.000    0.000    0.000 lark.py:220(__getattr__)
        1    0.000    0.000    0.000    0.000 {method 'quantize' of 'decimal.Decimal' objects}
        1    0.000    0.000    0.000    0.000 {method 'to_integral' of 'decimal.Decimal' objects}
        3    0.000    0.000    0.000    0.000 {method 'end' of 're.Match' objects}
        1    0.000    0.000    0.000    0.000 Cell.py:135(get_children)
        1    0.000    0.000    0.000    0.000 {method 'split' of 'str' objects}
        1    0.000    0.000    0.000    0.000 grammar.py:15(__init__)
        1    0.000    0.000    0.000    0.000 Cell.py:59(cache_formula)
        2    0.000    0.000    0.000    0.000 {built-in method builtins.ord}
        2    0.000    0.000    0.000    0.000 earley_forest.py:418(transform_token_node)
        1    0.000    0.000    0.000    0.000 {method 'upper' of 'str' objects}
        1    0.000    0.000    0.000    0.000 Cell.py:62(get_cached_formula)
        1    0.000    0.000    0.000    0.000 Parser.py:108(get_cell_refs)
        1    0.000    0.000    0.000    0.000 {method 'lstrip' of 'str' objects}
        1    0.000    0.000    0.000    0.000 {method 'is_finite' of 'decimal.Decimal' objects}
        1    0.000    0.000    0.000    0.000 {method 'rstrip' of 'str' objects}



##################Running pro_update_formula_pyramid... #######################
for test <function pro_update_formula_pyramid at 0x7f2a40461c60> total time: 0.0010351989999999995
Total Logs
         231 function calls (219 primitive calls) in 0.000 seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        2    0.000    0.000    0.000    0.000 Cell.py:81(set_cell_value)
        1    0.000    0.000    0.000    0.000 Graph.py:330(tarjans)
        1    0.000    0.000    0.000    0.000 Workbook.py:741(set_cell_contents)
        2    0.000    0.000    0.000    0.000 Workbook.py:596(recompute_cell_value)
        1    0.000    0.000    0.000    0.000 Workbook.py:652(recompute_cell_and_parents)
        8    0.000    0.000    0.000    0.000 {built-in method builtins.getattr}
        5    0.000    0.000    0.000    0.000 Sheet.py:93(get_cell_value)
        1    0.000    0.000    0.000    0.000 utils.py:180(convert_location_to_idx)
        1    0.000    0.000    0.000    0.000 Parser.py:253(cell)
      4/1    0.000    0.000    0.000    0.000 visitors.py:421(_visit_tree)
        1    0.000    0.000    0.000    0.000 Sheet.py:60(set_cell_contents)
        4    0.000    0.000    0.000    0.000 Parser.py:40(fix_formula)
        1    0.000    0.000    0.000    0.000 Workbook.py:558(get_formula_value)
      4/1    0.000    0.000    0.000    0.000 visitors.py:444(inner)
        3    0.000    0.000    0.000    0.000 __init__.py:272(_compile)
        2    0.000    0.000    0.000    0.000 utils.py:208(remove_exponent)
        1    0.000    0.000    0.000    0.000 utils.py:308(error_matcher)
       21    0.000    0.000    0.000    0.000 {built-in method builtins.isinstance}
       31    0.000    0.000    0.000    0.000 {method 'lower' of 'str' objects}
        1    0.000    0.000    0.000    0.000 Parser.py:211(mul_expr)
      4/1    0.000    0.000    0.000    0.000 visitors.py:430(<listcomp>)
        8    0.000    0.000    0.000    0.000 utils.py:79(get_hidden_name)
      4/1    0.000    0.000    0.000    0.000 visitors.py:429(visit_children)
        2    0.000    0.000    0.000    0.000 __init__.py:163(match)
        1    0.000    0.000    0.000    0.000 Sheet.py:124(update_extent)
        3    0.000    0.000    0.000    0.000 lexer.py:265(__eq__)
        1    0.000    0.000    0.000    0.000 {method 'sub' of 're.Pattern' objects}
        4    0.000    0.000    0.000    0.000 utils.py:296(get_highest_precedence_error)
        1    0.000    0.000    0.000    0.000 Workbook.py:36(run_func)
        2    0.000    0.000    0.000    0.000 Workbook.py:589(get_cell_from_location)
        2    0.000    0.000    0.000    0.000 utils.py:132(check_valid_cell_location)
        4    0.000    0.000    0.000    0.000 Graph.py:137(get_parents_from_cell)
        2    0.000    0.000    0.000    0.000 Workbook.py:554(get_sheet_name_from_hidden)
        1    0.000    0.000    0.000    0.000 __init__.py:178(sub)
        2    0.000    0.000    0.000    0.000 {method 'match' of 're.Pattern' objects}
        1    0.000    0.000    0.000    0.000 Parser.py:97(__init__)
        1    0.000    0.000    0.000    0.000 Cell.py:65(set_contents)
       10    0.000    0.000    0.000    0.000 {method 'get' of 'dict' objects}
        2    0.000    0.000    0.000    0.000 {method 'quantize' of 'decimal.Decimal' objects}
        1    0.000    0.000    0.000    0.000 Workbook.py:822(get_cell_value)
       10    0.000    0.000    0.000    0.000 {method 'append' of 'list' objects}
        4    0.000    0.000    0.000    0.000 Sheet.py:120(get_cell)
       12    0.000    0.000    0.000    0.000 {built-in method builtins.len}
        1    0.000    0.000    0.000    0.000 Workbook.py:728(clean_children_cells)
        5    0.000    0.000    0.000    0.000 Cell.py:125(get_value)
        3    0.000    0.000    0.000    0.000 utils.py:213(is_formula)
        1    0.000    0.000    0.000    0.000 cProfile.py:118(__exit__)
        6    0.000    0.000    0.000    0.000 {method 'pop' of 'list' objects}
        1    0.000    0.000    0.000    0.000 Sheet.py:104(set_cell_value)
       10    0.000    0.000    0.000    0.000 {method 'strip' of 'str' objects}
        1    0.000    0.000    0.000    0.000 visitors.py:415(visit)
        2    0.000    0.000    0.000    0.000 {method 'to_integral' of 'decimal.Decimal' objects}
        2    0.000    0.000    0.000    0.000 {method 'is_finite' of 'decimal.Decimal' objects}
        1    0.000    0.000    0.000    0.000 Parser.py:243(number)
        2    0.000    0.000    0.000    0.000 {method 'join' of 'str' objects}
        3    0.000    0.000    0.000    0.000 Cell.py:128(get_contents)
        2    0.000    0.000    0.000    0.000 Cell.py:135(get_children)
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
        2    0.000    0.000    0.000    0.000 Cell.py:62(get_cached_formula)
        2    0.000    0.000    0.000    0.000 Sheet.py:54(get_sheet_name)
        1    0.000    0.000    0.000    0.000 Parser.py:108(get_cell_refs)
        2    0.000    0.000    0.000    0.000 {built-in method builtins.ord}
        1    0.000    0.000    0.000    0.000 Cell.py:131(set_children)
        1    0.000    0.000    0.000    0.000 {method 'add' of 'set' objects}
        1    0.000    0.000    0.000    0.000 {method 'lstrip' of 'str' objects}
        1    0.000    0.000    0.000    0.000 Parser.py:111(parens)
        1    0.000    0.000    0.000    0.000 {method 'upper' of 'str' objects}
        1    0.000    0.000    0.000    0.000 {method 'rstrip' of 'str' objects}



##################Running pro_write_formula_pyramid... #######################
for test <function pro_write_formula_pyramid at 0x7f2a40461da0> total time: 2.445940837999999
Total Logs
         844961 function calls (844703 primitive calls) in 0.248 seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
      401    0.071    0.000    0.225    0.001 earley.py:78(predict_and_complete)
    73363    0.045    0.000    0.074    0.000 earley_common.py:9(__init__)
159814/159568    0.024    0.000    0.031    0.000 {built-in method builtins.hash}
    50739    0.019    0.000    0.030    0.000 utils.py:345(add)
    84684    0.015    0.000    0.020    0.000 grammar.py:25(__hash__)
    65777    0.010    0.000    0.010    0.000 earley_common.py:28(__eq__)
    26767    0.010    0.000    0.016    0.000 utils.py:342(__contains__)
    81070    0.006    0.000    0.006    0.000 earley_common.py:31(__hash__)
    75478    0.006    0.000    0.006    0.000 grammar.py:121(__hash__)
      400    0.005    0.000    0.015    0.000 xearley.py:41(scan)
    75196    0.005    0.000    0.005    0.000 {built-in method builtins.len}
    73767    0.004    0.000    0.004    0.000 {method 'append' of 'list' objects}
     9786    0.004    0.000    0.008    0.000 grammar.py:18(__eq__)
     5836    0.002    0.000    0.003    0.000 lexer.py:265(__eq__)
      732    0.002    0.000    0.003    0.000 earley_forest.py:50(__init__)
    17294    0.002    0.000    0.002    0.000 {built-in method builtins.isinstance}
     2862    0.001    0.000    0.002    0.000 {built-in method fromkeys}
     4306    0.001    0.000    0.002    0.000 parser_frontends.py:184(match)
       99    0.001    0.000    0.241    0.002 xearley.py:39(_parse)
     4406    0.001    0.000    0.001    0.000 {method 'match' of 're.Pattern' objects}
      301    0.001    0.000    0.001    0.000 lexer.py:202(__new__)
     2862    0.001    0.000    0.003    0.000 utils.py:339(__init__)
      734    0.001    0.000    0.002    0.000 earley_forest.py:64(add_family)
       99    0.001    0.000    0.246    0.002 Workbook.py:652(recompute_cell_and_parents)
      122    0.000    0.000    0.002    0.000 earley.py:135(<listcomp>)
      734    0.000    0.000    0.001    0.000 earley_forest.py:131(__init__)
       99    0.000    0.000    0.243    0.002 earley.py:262(parse)
     1784    0.000    0.000    0.001    0.000 utils.py:348(__iter__)
      397    0.000    0.000    0.001    0.000 Sheet.py:93(get_cell_value)
      734    0.000    0.000    0.002    0.000 earley_common.py:25(advance)
       99    0.000    0.000    0.244    0.002 Workbook.py:558(get_formula_value)
       99    0.000    0.000    0.248    0.003 Workbook.py:741(set_cell_contents)
       99    0.000    0.000    0.001    0.000 Sheet.py:60(set_cell_contents)
       98    0.000    0.000    0.000    0.000 exceptions.py:55(get_context)
     3833    0.000    0.000    0.000    0.000 {method 'pop' of 'collections.deque' objects}
        1    0.000    0.000    0.001    0.001 earley_forest.py:283(visit)
      301    0.000    0.000    0.000    0.000 lexer.py:213(_future_new)
       98    0.000    0.000    0.001    0.000 exceptions.py:179(__init__)
      754    0.000    0.000    0.000    0.000 {method 'setdefault' of 'dict' objects}
       99    0.000    0.000    0.000    0.000 utils.py:180(convert_location_to_idx)
      198    0.000    0.000    0.000    0.000 Cell.py:81(set_cell_value)
      142    0.000    0.000    0.000    0.000 {built-in method builtins.sorted}
     3532    0.000    0.000    0.000    0.000 {method 'append' of 'collections.deque' objects}
       99    0.000    0.000    0.000    0.000 parser_frontends.py:86(_verify_start)
     1828    0.000    0.000    0.000    0.000 {built-in method builtins.iter}
       99    0.000    0.000    0.000    0.000 parser_frontends.py:96(_make_lexer_thread)
       99    0.000    0.000    0.244    0.002 parser_frontends.py:100(parse)
      301    0.000    0.000    0.000    0.000 earley_forest.py:193(__init__)
      298    0.000    0.000    0.000    0.000 {method 'join' of 'str' objects}
       99    0.000    0.000    0.000    0.000 profiler.py:25(convert_to_excel_coordinates)
      499    0.000    0.000    0.000    0.000 utils.py:354(__bool__)
      898    0.000    0.000    0.000    0.000 {method 'lower' of 'str' objects}
      793    0.000    0.000    0.000    0.000 {method 'get' of 'dict' objects}
       99    0.000    0.000    0.248    0.003 Workbook.py:36(run_func)
       99    0.000    0.000    0.000    0.000 Sheet.py:104(set_cell_value)
       99    0.000    0.000    0.000    0.000 Cell.py:65(set_contents)
       99    0.000    0.000    0.000    0.000 Parser.py:97(__init__)
      301    0.000    0.000    0.000    0.000 {built-in method __new__ of type object at 0x860f60}
      101    0.000    0.000    0.000    0.000 __init__.py:272(_compile)
       99    0.000    0.000    0.000    0.000 Sheet.py:124(update_extent)
      734    0.000    0.000    0.000    0.000 earley_forest.py:169(__hash__)
       99    0.000    0.000    0.000    0.000 Workbook.py:554(get_sheet_name_from_hidden)
      100    0.000    0.000    0.000    0.000 __init__.py:163(match)
      200    0.000    0.000    0.000    0.000 utils.py:79(get_hidden_name)
      490    0.000    0.000    0.000    0.000 xearley.py:126(<genexpr>)
       99    0.000    0.000    0.244    0.002 lark.py:640(parse)
       99    0.000    0.000    0.000    0.000 Cell.py:46(__init__)
      392    0.000    0.000    0.000    0.000 xearley.py:124(<lambda>)
      439    0.000    0.000    0.000    0.000 earley_forest.py:101(__hash__)
       45    0.000    0.000    0.000    0.000 earley_forest.py:437(_visit_node_out_helper)
      198    0.000    0.000    0.000    0.000 Sheet.py:120(get_cell)
       23    0.000    0.000    0.000    0.000 earley_forest.py:603(transform_packed_node)
      100    0.000    0.000    0.000    0.000 utils.py:132(check_valid_cell_location)
       98    0.000    0.000    0.000    0.000 xearley.py:125(<setcomp>)
       99    0.000    0.000    0.000    0.000 Workbook.py:728(clean_children_cells)
      198    0.000    0.000    0.000    0.000 {built-in method _heapq.heappush}
       99    0.000    0.000    0.000    0.000 Graph.py:330(tarjans)
      380    0.000    0.000    0.000    0.000 {built-in method builtins.next}
      301    0.000    0.000    0.000    0.000 {method 'group' of 're.Match' objects}
      301    0.000    0.000    0.000    0.000 earley_forest.py:207(__hash__)
       99    0.000    0.000    0.000    0.000 utils.py:213(is_formula)
       99    0.000    0.000    0.000    0.000 lark.py:220(__getattr__)
      142    0.000    0.000    0.000    0.000 utils.py:357(__len__)
      298    0.000    0.000    0.000    0.000 Cell.py:125(get_value)
      396    0.000    0.000    0.000    0.000 {method 'strip' of 'str' objects}
      499    0.000    0.000    0.000    0.000 {built-in method builtins.id}
      296    0.000    0.000    0.000    0.000 Cell.py:128(get_contents)
      303    0.000    0.000    0.000    0.000 {method 'end' of 're.Match' objects}
       22    0.000    0.000    0.000    0.000 earley_forest.py:422(visit_symbol_node_in)
       98    0.000    0.000    0.000    0.000 {built-in method builtins.max}
       44    0.000    0.000    0.000    0.000 earley_forest.py:85(children)
       17    0.000    0.000    0.000    0.000 earley_forest.py:565(_call_rule_func)
       23    0.000    0.000    0.000    0.000 earley_forest.py:631(visit_packed_node_in)
       98    0.000    0.000    0.000    0.000 CellError.py:11(__init__)
       17    0.000    0.000    0.000    0.000 earley_forest.py:581(transform_symbol_node)
       98    0.000    0.000    0.000    0.000 {method 'rsplit' of 'str' objects}
       23    0.000    0.000    0.000    0.000 earley_forest.py:427(visit_packed_node_in)
       99    0.000    0.000    0.000    0.000 grammar.py:15(__init__)
       22    0.000    0.000    0.000    0.000 earley_forest.py:625(visit_symbol_node_in)
       23    0.000    0.000    0.000    0.000 earley_forest.py:638(visit_packed_node_out)
       46    0.000    0.000    0.000    0.000 earley_forest.py:145(sort_key)
       99    0.000    0.000    0.000    0.000 {method 'split' of 'str' objects}
       99    0.000    0.000    0.000    0.000 Cell.py:131(set_children)
      198    0.000    0.000    0.000    0.000 {built-in method builtins.ord}
       99    0.000    0.000    0.000    0.000 {method 'upper' of 'str' objects}
      114    0.000    0.000    0.000    0.000 {method 'add' of 'set' objects}
       99    0.000    0.000    0.000    0.000 {built-in method builtins.divmod}
       98    0.000    0.000    0.000    0.000 {method 'expandtabs' of 'str' objects}
       17    0.000    0.000    0.000    0.000 earley_forest.py:556(_collapse_ambig)
       99    0.000    0.000    0.000    0.000 Sheet.py:54(get_sheet_name)
       99    0.000    0.000    0.000    0.000 {method 'lstrip' of 'str' objects}
       99    0.000    0.000    0.000    0.000 Cell.py:62(get_cached_formula)
       23    0.000    0.000    0.000    0.000 earley_forest.py:155(children)
       99    0.000    0.000    0.000    0.000 {built-in method builtins.chr}
       99    0.000    0.000    0.000    0.000 {method 'rstrip' of 'str' objects}
       67    0.000    0.000    0.000    0.000 {method 'remove' of 'set' objects}
       22    0.000    0.000    0.000    0.000 earley_forest.py:70(load_paths)
       22    0.000    0.000    0.000    0.000 earley_forest.py:499(__init__)
       46    0.000    0.000    0.000    0.000 earley_forest.py:141(is_empty)
       23    0.000    0.000    0.000    0.000 earley_forest.py:450(visit_packed_node_out)
        1    0.000    0.000    0.000    0.000 utils.py:208(remove_exponent)
       16    0.000    0.000    0.000    0.000 {built-in method builtins.getattr}
       17    0.000    0.000    0.000    0.000 earley_forest.py:444(visit_symbol_node_out)
        5    0.000    0.000    0.000    0.000 earley_forest.py:591(transform_intermediate_node)
       23    0.000    0.000    0.000    0.000 earley_forest.py:158(<listcomp>)
       45    0.000    0.000    0.000    0.000 earley_forest.py:548(_check_cycle)
       17    0.000    0.000    0.000    0.000 earley_forest.py:571(_call_ambig_func)
        6    0.000    0.000    0.000    0.000 earley_forest.py:432(visit_token_node)
       14    0.000    0.000    0.000    0.000 parse_tree_builder.py:20(__call__)
       45    0.000    0.000    0.000    0.000 {method 'pop' of 'list' objects}
        4    0.000    0.000    0.000    0.000 Parser.py:40(fix_formula)
      4/1    0.000    0.000    0.000    0.000 visitors.py:421(_visit_tree)
        1    0.000    0.000    0.000    0.000 Parser.py:253(cell)
      4/1    0.000    0.000    0.000    0.000 visitors.py:444(inner)
      4/1    0.000    0.000    0.000    0.000 visitors.py:430(<listcomp>)
        1    0.000    0.000    0.000    0.000 cProfile.py:118(__exit__)
        1    0.000    0.000    0.001    0.001 earley_forest.py:535(visit)
        2    0.000    0.000    0.000    0.000 parse_tree_builder.py:145(__call__)
        1    0.000    0.000    0.001    0.001 earley_forest.py:397(transform)
        1    0.000    0.000    0.000    0.000 Parser.py:211(mul_expr)
        1    0.000    0.000    0.000    0.000 earley_forest.py:523(__init__)
        1    0.000    0.000    0.000    0.000 Workbook.py:701(_get_sheet_name_location)
        1    0.000    0.000    0.000    0.000 earley.py:284(<listcomp>)
      4/1    0.000    0.000    0.000    0.000 visitors.py:429(visit_children)
        5    0.000    0.000    0.000    0.000 earley_forest.py:447(visit_intermediate_node_out)
       17    0.000    0.000    0.000    0.000 {built-in method builtins.hasattr}
        1    0.000    0.000    0.000    0.000 earley_forest.py:390(__init__)
        4    0.000    0.000    0.000    0.000 utils.py:296(get_highest_precedence_error)
        1    0.000    0.000    0.000    0.000 Workbook.py:822(get_cell_value)
        1    0.000    0.000    0.000    0.000 Workbook.py:714(add_children_cells)
        1    0.000    0.000    0.000    0.000 Graph.py:68(add_connection)
        1    0.000    0.000    0.000    0.000 __init__.py:178(sub)
        1    0.000    0.000    0.000    0.000 xearley.py:85(<listcomp>)
        4    0.000    0.000    0.000    0.000 tree.py:61(__init__)
        1    0.000    0.000    0.000    0.000 <frozen abc>:117(__instancecheck__)
        1    0.000    0.000    0.000    0.000 Parser.py:243(number)
        1    0.000    0.000    0.000    0.000 {method 'sub' of 're.Pattern' objects}
        6    0.000    0.000    0.000    0.000 earley_forest.py:418(transform_token_node)
        1    0.000    0.000    0.000    0.000 visitors.py:415(visit)
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
        1    0.000    0.000    0.000    0.000 {built-in method _abc._abc_instancecheck}
        1    0.000    0.000    0.000    0.000 xearley.py:88(<listcomp>)
        2    0.000    0.000    0.000    0.000 {method 'extend' of 'list' objects}
        1    0.000    0.000    0.000    0.000 {method 'update' of 'dict' objects}
        1    0.000    0.000    0.000    0.000 {method 'to_integral' of 'decimal.Decimal' objects}
        1    0.000    0.000    0.000    0.000 {method 'quantize' of 'decimal.Decimal' objects}
        1    0.000    0.000    0.000    0.000 earley_forest.py:232(__init__)
        1    0.000    0.000    0.000    0.000 Parser.py:108(get_cell_refs)
        1    0.000    0.000    0.000    0.000 Cell.py:59(cache_formula)
        1    0.000    0.000    0.000    0.000 {method 'is_finite' of 'decimal.Decimal' objects}
        1    0.000    0.000    0.000    0.000 Parser.py:111(parens)



##################Running pro_cycle_formula_pyramid... #######################
for test <function pro_cycle_formula_pyramid at 0x7f2a40461ee0> total time: 1.682081845
Total Logs
         367038 function calls (364600 primitive calls) in 0.170 seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
     4855    0.021    0.000    0.024    0.000 utils.py:339(__init__)
        1    0.020    0.020    0.022    0.022 Graph.py:330(tarjans)
      400    0.019    0.000    0.095    0.000 earley.py:78(predict_and_complete)
        1    0.011    0.011    0.038    0.038 earley_forest.py:283(visit)
    13713    0.011    0.000    0.018    0.000 earley_common.py:9(__init__)
37476/35842    0.007    0.000    0.009    0.000 {built-in method builtins.hash}
    12158    0.006    0.000    0.011    0.000 grammar.py:18(__eq__)
    13036    0.005    0.000    0.008    0.000 utils.py:345(add)
    19801    0.004    0.000    0.005    0.000 grammar.py:25(__hash__)
    11930    0.004    0.000    0.005    0.000 lexer.py:265(__eq__)
      399    0.004    0.000    0.011    0.000 xearley.py:41(scan)
    34782    0.003    0.000    0.003    0.000 {built-in method builtins.isinstance}
     1828    0.003    0.000    0.027    0.000 earley_forest.py:50(__init__)
     4855    0.003    0.000    0.003    0.000 {built-in method fromkeys}
      816    0.003    0.000    0.012    0.000 earley.py:135(<listcomp>)
     1430    0.002    0.000    0.010    0.000 earley_forest.py:437(_visit_node_out_helper)
      715    0.002    0.000    0.004    0.000 earley_forest.py:603(transform_packed_node)
    20101    0.002    0.000    0.002    0.000 {built-in method builtins.min}
     9318    0.002    0.000    0.002    0.000 earley_common.py:28(__eq__)
    12254    0.002    0.000    0.002    0.000 {built-in method builtins.next}
    16443    0.002    0.000    0.002    0.000 grammar.py:121(__hash__)
     3970    0.002    0.000    0.002    0.000 utils.py:342(__contains__)
    17834    0.002    0.000    0.002    0.000 earley_common.py:31(__hash__)
    15933    0.002    0.000    0.002    0.000 {built-in method builtins.id}
     1430    0.002    0.000    0.004    0.000 {built-in method builtins.sorted}
    19127    0.002    0.000    0.002    0.000 {built-in method builtins.len}
     1830    0.001    0.000    0.004    0.000 earley_forest.py:64(add_family)
    17777    0.001    0.000    0.001    0.000 {method 'append' of 'list' objects}
     4162    0.001    0.000    0.002    0.000 utils.py:348(__iter__)
     1830    0.001    0.000    0.002    0.000 earley_forest.py:131(__init__)
     1830    0.001    0.000    0.005    0.000 earley_common.py:25(advance)
     1430    0.001    0.000    0.006    0.000 earley_forest.py:85(children)
      715    0.001    0.000    0.003    0.000 earley_forest.py:631(visit_packed_node_in)
      512    0.001    0.000    0.002    0.000 earley_forest.py:581(transform_symbol_node)
     3057    0.001    0.000    0.002    0.000 parser_frontends.py:184(match)
     1430    0.001    0.000    0.001    0.000 earley_forest.py:145(sort_key)
     2543    0.001    0.000    0.001    0.000 {method 'setdefault' of 'dict' objects}
      715    0.001    0.000    0.002    0.000 earley_forest.py:427(visit_packed_node_in)
      715    0.001    0.000    0.007    0.000 earley_forest.py:638(visit_packed_node_out)
      715    0.001    0.000    0.005    0.000 earley_forest.py:422(visit_symbol_node_in)
     3158    0.001    0.000    0.001    0.000 {method 'match' of 're.Pattern' objects}
        1    0.001    0.001    0.107    0.107 xearley.py:39(_parse)
     5592    0.001    0.000    0.001    0.000 {built-in method builtins.iter}
      715    0.001    0.000    0.007    0.000 earley_forest.py:625(visit_symbol_node_in)
     3675    0.001    0.000    0.001    0.000 {method 'add' of 'set' objects}
      512    0.001    0.000    0.001    0.000 earley_forest.py:556(_collapse_ambig)
     6244    0.001    0.000    0.001    0.000 {method 'pop' of 'collections.deque' objects}
      512    0.000    0.000    0.001    0.000 earley_forest.py:565(_call_rule_func)
     5940    0.000    0.000    0.000    0.000 {method 'append' of 'collections.deque' objects}
      715    0.000    0.000    0.001    0.000 earley_forest.py:155(children)
     1430    0.000    0.000    0.001    0.000 utils.py:357(__len__)
      715    0.000    0.000    0.001    0.000 earley_forest.py:70(load_paths)
     2145    0.000    0.000    0.000    0.000 {method 'remove' of 'set' objects}
      715    0.000    0.000    0.000    0.000 earley_forest.py:499(__init__)
      715    0.000    0.000    0.006    0.000 earley_forest.py:450(visit_packed_node_out)
     1430    0.000    0.000    0.000    0.000 earley_forest.py:141(is_empty)
        1    0.000    0.000    0.145    0.145 parser_frontends.py:100(parse)
      203    0.000    0.000    0.000    0.000 earley_forest.py:591(transform_intermediate_node)
     1829    0.000    0.000    0.000    0.000 earley_forest.py:101(__hash__)
      512    0.000    0.000    0.004    0.000 earley_forest.py:444(visit_symbol_node_out)
      304    0.000    0.000    0.000    0.000 lexer.py:213(_future_new)
      512    0.000    0.000    0.000    0.000 earley_forest.py:571(_call_ambig_func)
     1830    0.000    0.000    0.000    0.000 earley_forest.py:169(__hash__)
      410    0.000    0.000    0.000    0.000 parse_tree_builder.py:20(__call__)
     1430    0.000    0.000    0.000    0.000 earley_forest.py:548(_check_cycle)
     1730    0.000    0.000    0.000    0.000 {method 'pop' of 'list' objects}
        1    0.000    0.000    0.001    0.001 Workbook.py:630(_set_cycle_detected)
      304    0.000    0.000    0.000    0.000 lexer.py:202(__new__)
      100    0.000    0.000    0.001    0.000 Parser.py:253(cell)
      204    0.000    0.000    0.000    0.000 earley_forest.py:432(visit_token_node)
      715    0.000    0.000    0.000    0.000 earley_forest.py:158(<listcomp>)
      304    0.000    0.000    0.000    0.000 earley_forest.py:193(__init__)
    202/1    0.000    0.000    0.002    0.002 visitors.py:430(<listcomp>)
    202/1    0.000    0.000    0.002    0.002 visitors.py:429(visit_children)
      412    0.000    0.000    0.000    0.000 {built-in method builtins.getattr}
    202/1    0.000    0.000    0.002    0.002 visitors.py:421(_visit_tree)
    202/1    0.000    0.000    0.002    0.002 visitors.py:444(inner)
      202    0.000    0.000    0.001    0.000 Parser.py:40(fix_formula)
      100    0.000    0.000    0.000    0.000 Workbook.py:822(get_cell_value)
      400    0.000    0.000    0.000    0.000 utils.py:354(__bool__)
      100    0.000    0.000    0.000    0.000 Workbook.py:701(_get_sheet_name_location)
      403    0.000    0.000    0.000    0.000 utils.py:79(get_hidden_name)
     1010    0.000    0.000    0.000    0.000 {method 'lower' of 'str' objects}
      102    0.000    0.000    0.000    0.000 Cell.py:81(set_cell_value)
      203    0.000    0.000    0.001    0.000 earley_forest.py:447(visit_intermediate_node_out)
      104    0.000    0.000    0.000    0.000 Sheet.py:93(get_cell_value)
      202    0.000    0.000    0.000    0.000 utils.py:296(get_highest_precedence_error)
      100    0.000    0.000    0.000    0.000 Graph.py:68(add_connection)
       99    0.000    0.000    0.000    0.000 Parser.py:169(add_expr)
      201    0.000    0.000    0.000    0.000 __init__.py:272(_compile)
      200    0.000    0.000    0.000    0.000 Graph.py:137(get_parents_from_cell)
      512    0.000    0.000    0.000    0.000 {built-in method builtins.hasattr}
      304    0.000    0.000    0.000    0.000 {built-in method __new__ of type object at 0x860f60}
      208    0.000    0.000    0.000    0.000 {method 'get' of 'dict' objects}
      202    0.000    0.000    0.000    0.000 tree.py:61(__init__)
      100    0.000    0.000    0.000    0.000 __init__.py:178(sub)
      100    0.000    0.000    0.000    0.000 Workbook.py:589(get_cell_from_location)
        1    0.000    0.000    0.038    0.038 earley_forest.py:535(visit)
      102    0.000    0.000    0.000    0.000 Workbook.py:554(get_sheet_name_from_hidden)
      304    0.000    0.000    0.000    0.000 earley_forest.py:207(__hash__)
      304    0.000    0.000    0.000    0.000 {method 'group' of 're.Match' objects}
      204    0.000    0.000    0.000    0.000 Cell.py:125(get_value)
      101    0.000    0.000    0.000    0.000 __init__.py:163(match)
        1    0.000    0.000    0.000    0.000 Workbook.py:714(add_children_cells)
      101    0.000    0.000    0.000    0.000 utils.py:132(check_valid_cell_location)
      306    0.000    0.000    0.000    0.000 {method 'end' of 're.Match' objects}
      102    0.000    0.000    0.000    0.000 Cell.py:128(get_contents)
        1    0.000    0.000    0.145    0.145 earley.py:262(parse)
      204    0.000    0.000    0.000    0.000 earley_forest.py:418(transform_token_node)
      102    0.000    0.000    0.000    0.000 Sheet.py:120(get_cell)
      100    0.000    0.000    0.000    0.000 {method 'sub' of 're.Pattern' objects}
        1    0.000    0.000    0.170    0.170 Workbook.py:652(recompute_cell_and_parents)
        1    0.000    0.000    0.000    0.000 Cell.py:65(set_contents)
      100    0.000    0.000    0.000    0.000 CellError.py:11(__init__)
        1    0.000    0.000    0.170    0.170 Workbook.py:741(set_cell_contents)
      105    0.000    0.000    0.000    0.000 {method 'strip' of 'str' objects}
      100    0.000    0.000    0.000    0.000 {method 'split' of 'str' objects}
      102    0.000    0.000    0.000    0.000 Sheet.py:54(get_sheet_name)
      103    0.000    0.000    0.000    0.000 {method 'join' of 'str' objects}
        1    0.000    0.000    0.147    0.147 Workbook.py:558(get_formula_value)
        1    0.000    0.000    0.000    0.000 utils.py:180(convert_location_to_idx)
        1    0.000    0.000    0.170    0.170 Workbook.py:36(run_func)
        2    0.000    0.000    0.000    0.000 parse_tree_builder.py:145(__call__)
        1    0.000    0.000    0.000    0.000 Sheet.py:60(set_cell_contents)
        1    0.000    0.000    0.000    0.000 cProfile.py:118(__exit__)
        1    0.000    0.000    0.000    0.000 earley_forest.py:523(__init__)
        1    0.000    0.000    0.038    0.038 earley_forest.py:397(transform)
        1    0.000    0.000    0.000    0.000 parser_frontends.py:96(_make_lexer_thread)
        1    0.000    0.000    0.000    0.000 Parser.py:211(mul_expr)
        1    0.000    0.000    0.000    0.000 earley_forest.py:390(__init__)
        1    0.000    0.000    0.000    0.000 utils.py:208(remove_exponent)
        1    0.000    0.000    0.000    0.000 earley.py:284(<listcomp>)
        1    0.000    0.000    0.000    0.000 Sheet.py:124(update_extent)
        1    0.000    0.000    0.145    0.145 lark.py:640(parse)
        2    0.000    0.000    0.000    0.000 <frozen abc>:117(__instancecheck__)
        1    0.000    0.000    0.000    0.000 Parser.py:97(__init__)
        2    0.000    0.000    0.000    0.000 {built-in method _abc._abc_instancecheck}
        1    0.000    0.000    0.000    0.000 Sheet.py:104(set_cell_value)
        1    0.000    0.000    0.000    0.000 Parser.py:243(number)
        1    0.000    0.000    0.000    0.000 Workbook.py:728(clean_children_cells)
        1    0.000    0.000    0.002    0.002 visitors.py:415(visit)
        1    0.000    0.000    0.000    0.000 {method 'to_integral' of 'decimal.Decimal' objects}
        1    0.000    0.000    0.000    0.000 parser_frontends.py:86(_verify_start)
        1    0.000    0.000    0.000    0.000 xearley.py:85(<listcomp>)
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
        1    0.000    0.000    0.000    0.000 Cell.py:59(cache_formula)
        1    0.000    0.000    0.000    0.000 utils.py:213(is_formula)
        2    0.000    0.000    0.000    0.000 {method 'extend' of 'list' objects}
        1    0.000    0.000    0.000    0.000 {method 'update' of 'dict' objects}
        1    0.000    0.000    0.000    0.000 earley_forest.py:232(__init__)
        1    0.000    0.000    0.000    0.000 lark.py:220(__getattr__)
        1    0.000    0.000    0.000    0.000 Cell.py:131(set_children)
        1    0.000    0.000    0.000    0.000 {method 'normalize' of 'decimal.Decimal' objects}
        1    0.000    0.000    0.000    0.000 xearley.py:88(<listcomp>)
        1    0.000    0.000    0.000    0.000 grammar.py:15(__init__)
        1    0.000    0.000    0.000    0.000 Parser.py:111(parens)
        1    0.000    0.000    0.000    0.000 Cell.py:62(get_cached_formula)
        2    0.000    0.000    0.000    0.000 {built-in method builtins.ord}
        1    0.000    0.000    0.000    0.000 Cell.py:135(get_children)
        1    0.000    0.000    0.000    0.000 Parser.py:108(get_cell_refs)
        1    0.000    0.000    0.000    0.000 {method 'is_finite' of 'decimal.Decimal' objects}
        1    0.000    0.000    0.000    0.000 {method 'upper' of 'str' objects}
        1    0.000    0.000    0.000    0.000 {method 'lstrip' of 'str' objects}
        1    0.000    0.000    0.000    0.000 {method 'rstrip' of 'str' objects}



##################Running pro_cycle_break_unbreak... #######################
for test <function pro_cycle_break_unbreak at 0x7f2a40462020> total time: 50.72573260500001
Total Logs
         13173936 function calls (13170172 primitive calls) in 9.320 seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
      198    5.107    0.026    5.333    0.027 Graph.py:330(tarjans)
    99000    0.376    0.000    2.880    0.000 Workbook.py:596(recompute_cell_value)
   198396    0.241    0.000    0.414    0.000 Cell.py:81(set_cell_value)
   297792    0.193    0.000    0.294    0.000 Sheet.py:93(get_cell_value)
       99    0.178    0.002    0.550    0.006 Workbook.py:630(_set_cycle_detected)
    99198    0.174    0.000    1.964    0.000 Workbook.py:558(get_formula_value)
    99000    0.166    0.000    0.738    0.000 Parser.py:253(cell)
   594693    0.160    0.000    0.207    0.000 utils.py:79(get_hidden_name)
   396000    0.118    0.000    0.118    0.000 Graph.py:137(get_parents_from_cell)
   198000    0.111    0.000    0.267    0.000 Workbook.py:589(get_cell_from_location)
  1289475    0.109    0.000    0.109    0.000 {method 'lower' of 'str' objects}
    99000    0.104    0.000    0.415    0.000 Workbook.py:822(get_cell_value)
  1086921    0.103    0.000    0.103    0.000 {built-in method builtins.isinstance}
   198297    0.103    0.000    0.186    0.000 Workbook.py:554(get_sheet_name_from_hidden)
      198    0.091    0.000    9.299    0.047 Workbook.py:652(recompute_cell_and_parents)
   199980    0.086    0.000    0.139    0.000 {built-in method builtins.getattr}
      990    0.085    0.000    0.304    0.000 earley.py:78(predict_and_complete)
    99198    0.083    0.000    1.221    0.000 visitors.py:421(_visit_tree)
   595584    0.076    0.000    0.076    0.000 {method 'get' of 'dict' objects}
   198198    0.076    0.000    0.104    0.000 __init__.py:272(_compile)
    99198    0.074    0.000    0.401    0.000 Sheet.py:104(set_cell_value)
    99198    0.063    0.000    1.000    0.000 visitors.py:444(inner)
    99198    0.062    0.000    0.096    0.000 utils.py:208(remove_exponent)
    99198    0.058    0.000    0.058    0.000 Parser.py:97(__init__)
    99198    0.055    0.000    0.833    0.000 Parser.py:40(fix_formula)
   396792    0.054    0.000    0.054    0.000 Cell.py:125(get_value)
   134442    0.053    0.000    0.066    0.000 lexer.py:265(__eq__)
    76230    0.053    0.000    0.085    0.000 earley_common.py:9(__init__)
   198396    0.051    0.000    0.081    0.000 Sheet.py:120(get_cell)
   976436    0.050    0.000    0.050    0.000 {method 'append' of 'list' objects}
    99000    0.050    0.000    0.126    0.000 __init__.py:178(sub)
    99198    0.048    0.000    0.130    0.000 __init__.py:163(match)
    99198    0.047    0.000    0.104    0.000 visitors.py:429(visit_children)
    99198    0.046    0.000    0.056    0.000 visitors.py:430(<listcomp>)
   485991    0.041    0.000    0.041    0.000 {built-in method builtins.len}
    99198    0.038    0.000    0.168    0.000 utils.py:132(check_valid_cell_location)
    99198    0.037    0.000    1.258    0.000 visitors.py:415(visit)
   297396    0.035    0.000    0.035    0.000 Cell.py:128(get_contents)
   297099    0.032    0.000    0.032    0.000 {built-in method builtins.min}
   103554    0.032    0.000    0.032    0.000 {method 'match' of 're.Pattern' objects}
   597564    0.032    0.000    0.032    0.000 {method 'pop' of 'list' objects}
    99198    0.031    0.000    0.043    0.000 utils.py:213(is_formula)
    99198    0.030    0.000    0.039    0.000 utils.py:296(get_highest_precedence_error)
178299/174537    0.028    0.000    0.036    0.000 {built-in method builtins.hash}
      198    0.025    0.000    0.084    0.000 earley_forest.py:283(visit)
    99000    0.023    0.000    0.023    0.000 {method 'sub' of 're.Pattern' objects}
   198198    0.022    0.000    0.022    0.000 Cell.py:62(get_cached_formula)
    56232    0.022    0.000    0.034    0.000 utils.py:345(add)
    99297    0.022    0.000    0.038    0.000 <frozen abc>:117(__instancecheck__)
   198297    0.020    0.000    0.020    0.000 Sheet.py:54(get_sheet_name)
   198990    0.018    0.000    0.018    0.000 {method 'strip' of 'str' objects}
    99198    0.018    0.000    0.018    0.000 {method 'to_integral' of 'decimal.Decimal' objects}
    94644    0.018    0.000    0.024    0.000 grammar.py:25(__hash__)
    38511    0.017    0.000    0.033    0.000 grammar.py:18(__eq__)
    99297    0.016    0.000    0.016    0.000 {built-in method _abc._abc_instancecheck}
    99198    0.016    0.000    0.016    0.000 {method 'quantize' of 'decimal.Decimal' objects}
    99000    0.015    0.000    0.015    0.000 CellError.py:11(__init__)
    99198    0.014    0.000    0.014    0.000 Cell.py:131(set_children)
    99198    0.013    0.000    0.013    0.000 Parser.py:108(get_cell_refs)
    99198    0.013    0.000    0.013    0.000 Cell.py:135(get_children)
   108009    0.012    0.000    0.012    0.000 {method 'add' of 'set' objects}
    65934    0.012    0.000    0.012    0.000 earley_common.py:28(__eq__)
    28413    0.011    0.000    0.018    0.000 utils.py:342(__contains__)
    99198    0.010    0.000    0.010    0.000 {method 'is_finite' of 'decimal.Decimal' objects}
      198    0.008    0.000    9.320    0.047 Workbook.py:36(run_func)
    80487    0.008    0.000    0.008    0.000 grammar.py:121(__hash__)
      792    0.007    0.000    0.022    0.000 xearley.py:41(scan)
      198    0.007    0.000    9.312    0.047 Workbook.py:741(set_cell_contents)
    84645    0.007    0.000    0.007    0.000 earley_common.py:31(__hash__)
     1782    0.007    0.000    0.030    0.000 earley.py:135(<listcomp>)
     3366    0.006    0.000    0.011    0.000 earley_forest.py:50(__init__)
     3564    0.005    0.000    0.022    0.000 earley_forest.py:437(_visit_node_out_helper)
     1881    0.005    0.000    0.010    0.000 earley_forest.py:603(transform_packed_node)
    29304    0.004    0.000    0.004    0.000 {built-in method builtins.next}
     3366    0.004    0.000    0.008    0.000 {built-in method builtins.sorted}
    39204    0.003    0.000    0.003    0.000 {built-in method builtins.id}
     9504    0.003    0.000    0.006    0.000 utils.py:339(__init__)
     3564    0.003    0.000    0.009    0.000 earley_forest.py:64(add_family)
      198    0.003    0.000    0.421    0.002 earley.py:262(parse)
     9504    0.002    0.000    0.003    0.000 {built-in method fromkeys}
      198    0.002    0.000    0.328    0.002 xearley.py:39(_parse)
     3564    0.002    0.000    0.004    0.000 earley_forest.py:131(__init__)
     9603    0.002    0.000    0.003    0.000 utils.py:348(__iter__)
     1485    0.002    0.000    0.006    0.000 earley_forest.py:581(transform_symbol_node)
     3366    0.002    0.000    0.012    0.000 earley_forest.py:85(children)
     1881    0.002    0.000    0.006    0.000 earley_forest.py:631(visit_packed_node_in)
     3564    0.002    0.000    0.009    0.000 earley_common.py:25(advance)
     1881    0.002    0.000    0.004    0.000 earley_forest.py:427(visit_packed_node_in)
     1683    0.002    0.000    0.010    0.000 earley_forest.py:422(visit_symbol_node_in)
     1881    0.002    0.000    0.016    0.000 earley_forest.py:638(visit_packed_node_out)
     4356    0.002    0.000    0.003    0.000 parser_frontends.py:184(match)
     3762    0.002    0.000    0.002    0.000 earley_forest.py:145(sort_key)
     5049    0.002    0.000    0.002    0.000 {method 'setdefault' of 'dict' objects}
     1485    0.002    0.000    0.003    0.000 earley_forest.py:565(_call_rule_func)
     1683    0.001    0.000    0.015    0.000 earley_forest.py:625(visit_symbol_node_in)
    12969    0.001    0.000    0.001    0.000 {built-in method builtins.iter}
    16236    0.001    0.000    0.001    0.000 {method 'pop' of 'collections.deque' objects}
      198    0.001    0.000    0.423    0.002 parser_frontends.py:100(parse)
     1485    0.001    0.000    0.002    0.000 earley_forest.py:556(_collapse_ambig)
    15741    0.001    0.000    0.001    0.000 {method 'append' of 'collections.deque' objects}
     1881    0.001    0.000    0.002    0.000 earley_forest.py:155(children)
      198    0.001    0.000    0.001    0.000 utils.py:180(convert_location_to_idx)
     3366    0.001    0.000    0.001    0.000 utils.py:357(__len__)
     1881    0.001    0.000    0.014    0.000 earley_forest.py:450(visit_packed_node_out)
     5247    0.001    0.000    0.001    0.000 {method 'remove' of 'set' objects}
     1683    0.001    0.000    0.001    0.000 earley_forest.py:499(__init__)
      198    0.001    0.000    0.001    0.000 parser_frontends.py:96(_make_lexer_thread)
     1683    0.001    0.000    0.001    0.000 earley_forest.py:70(load_paths)
     3762    0.001    0.000    0.001    0.000 earley_forest.py:141(is_empty)
     1485    0.001    0.000    0.009    0.000 earley_forest.py:444(visit_symbol_node_out)
      198    0.001    0.000    0.003    0.000 Sheet.py:60(set_cell_contents)
      495    0.001    0.000    0.001    0.000 lexer.py:213(_future_new)
     1881    0.001    0.000    0.001    0.000 earley_forest.py:158(<listcomp>)
      198    0.001    0.000    0.002    0.000 earley.py:284(<listcomp>)
     1287    0.001    0.000    0.001    0.000 parse_tree_builder.py:20(__call__)
     1485    0.001    0.000    0.001    0.000 earley_forest.py:571(_call_ambig_func)
      495    0.001    0.000    0.001    0.000 lexer.py:202(__new__)
     3564    0.001    0.000    0.001    0.000 earley_forest.py:548(_check_cycle)
      198    0.000    0.000    0.001    0.000 Workbook.py:701(_get_sheet_name_location)
      495    0.000    0.000    0.001    0.000 earley_forest.py:193(__init__)
      396    0.000    0.000    0.001    0.000 earley_forest.py:432(visit_token_node)
     3267    0.000    0.000    0.000    0.000 earley_forest.py:101(__hash__)
      198    0.000    0.000    0.001    0.000 Workbook.py:728(clean_children_cells)
      198    0.000    0.000    0.001    0.000 earley_forest.py:523(__init__)
      198    0.000    0.000    0.084    0.000 earley_forest.py:535(visit)
      198    0.000    0.000    0.000    0.000 Parser.py:243(number)
      594    0.000    0.000    0.000    0.000 {method 'join' of 'str' objects}
     3564    0.000    0.000    0.000    0.000 earley_forest.py:169(__hash__)
      198    0.000    0.000    0.085    0.000 earley_forest.py:397(transform)
      198    0.000    0.000    0.424    0.002 lark.py:640(parse)
      198    0.000    0.000    0.000    0.000 earley_forest.py:390(__init__)
      198    0.000    0.000    0.000    0.000 earley_forest.py:591(transform_intermediate_node)
      198    0.000    0.000    0.000    0.000 Sheet.py:124(update_extent)
      198    0.000    0.000    0.000    0.000 parse_tree_builder.py:145(__call__)
      198    0.000    0.000    0.000    0.000 parser_frontends.py:86(_verify_start)
      198    0.000    0.000    0.001    0.000 Cell.py:65(set_contents)
      792    0.000    0.000    0.000    0.000 utils.py:354(__bool__)
      495    0.000    0.000    0.000    0.000 {built-in method __new__ of type object at 0x860f60}
     1485    0.000    0.000    0.000    0.000 {built-in method builtins.hasattr}
       99    0.000    0.000    0.001    0.000 Workbook.py:714(add_children_cells)
      495    0.000    0.000    0.000    0.000 {method 'group' of 're.Match' objects}
      198    0.000    0.000    0.000    0.000 lark.py:220(__getattr__)
       99    0.000    0.000    0.000    0.000 Graph.py:96(update_child)
      198    0.000    0.000    0.001    0.000 earley_forest.py:447(visit_intermediate_node_out)
      198    0.000    0.000    0.000    0.000 Cell.py:59(cache_formula)
      198    0.000    0.000    0.000    0.000 grammar.py:15(__init__)
       99    0.000    0.000    0.000    0.000 Graph.py:68(add_connection)
      198    0.000    0.000    0.000    0.000 {method 'split' of 'str' objects}
      495    0.000    0.000    0.000    0.000 earley_forest.py:207(__hash__)
      198    0.000    0.000    0.000    0.000 tree.py:61(__init__)
       99    0.000    0.000    0.000    0.000 {method 'remove' of 'list' objects}
      495    0.000    0.000    0.000    0.000 {method 'end' of 're.Match' objects}
      396    0.000    0.000    0.000    0.000 {built-in method builtins.ord}
      198    0.000    0.000    0.000    0.000 {method 'upper' of 'str' objects}
      198    0.000    0.000    0.000    0.000 earley_forest.py:232(__init__)
      396    0.000    0.000    0.000    0.000 earley_forest.py:418(transform_token_node)
      198    0.000    0.000    0.000    0.000 {method 'lstrip' of 'str' objects}
      198    0.000    0.000    0.000    0.000 {method 'rstrip' of 'str' objects}
      2/1    0.000    0.000    0.000    0.000 {built-in method _abc._abc_subclasscheck}
        1    0.000    0.000    0.000    0.000 cProfile.py:118(__exit__)
      2/1    0.000    0.000    0.000    0.000 <frozen abc>:121(__subclasscheck__)
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
        1    0.000    0.000    0.000    0.000 {method 'update' of 'dict' objects}



##################Running pro_copy_massive_sheet... #######################
for test <function pro_copy_massive_sheet at 0x7f2a40462160> total time: 17.441093324
Total Logs
         7600051 function calls (7500050 primitive calls) in 3.088 seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
  1900007    0.506    0.000    0.506    0.000 {method 'lower' of 'str' objects}
   100000    0.330    0.000    1.073    0.000 Cell.py:81(set_cell_value)
   100000    0.305    0.000    2.959    0.000 Workbook.py:741(set_cell_contents)
   100000    0.244    0.000    0.642    0.000 utils.py:308(error_matcher)
   100000    0.186    0.000    1.748    0.000 Sheet.py:60(set_cell_contents)
   100000    0.177    0.000    0.303    0.000 Workbook.py:652(recompute_cell_and_parents)
   100000    0.147    0.000    0.228    0.000 utils.py:180(convert_location_to_idx)
   200000    0.110    0.000    0.198    0.000 Sheet.py:93(get_cell_value)
   400000    0.077    0.000    0.077    0.000 {method 'get' of 'dict' objects}
   100000    0.077    0.000    1.167    0.000 Cell.py:65(set_contents)
        1    0.059    0.059    3.088    3.088 Workbook.py:1055(copy_sheet)
   100000    0.059    0.000    0.079    0.000 Sheet.py:124(update_extent)
 100002/1    0.058    0.000    3.088    3.088 Workbook.py:36(run_func)
   800000    0.055    0.000    0.055    0.000 {method 'strip' of 'str' objects}
   200000    0.054    0.000    0.054    0.000 {method 'join' of 'str' objects}
   700002    0.053    0.000    0.053    0.000 {built-in method builtins.len}
   100001    0.053    0.000    0.097    0.000 Workbook.py:554(get_sheet_name_from_hidden)
   200000    0.051    0.000    0.073    0.000 Sheet.py:120(get_cell)
   200004    0.049    0.000    0.065    0.000 utils.py:79(get_hidden_name)
   100000    0.047    0.000    0.134    0.000 __init__.py:163(match)
   100000    0.047    0.000    1.214    0.000 Cell.py:46(__init__)
   100000    0.040    0.000    0.059    0.000 __init__.py:272(_compile)
   100000    0.037    0.000    0.170    0.000 utils.py:132(check_valid_cell_location)
   100000    0.034    0.000    0.069    0.000 Workbook.py:728(clean_children_cells)
   200000    0.032    0.000    0.032    0.000 {built-in method _heapq.heappush}
   100000    0.029    0.000    0.039    0.000 utils.py:213(is_formula)
   200000    0.029    0.000    0.029    0.000 {built-in method builtins.isinstance}
   100000    0.027    0.000    0.027    0.000 {method 'match' of 're.Pattern' objects}
   100000    0.025    0.000    0.025    0.000 Graph.py:330(tarjans)
   100000    0.018    0.000    0.018    0.000 {method 'rstrip' of 'str' objects}
   200000    0.015    0.000    0.015    0.000 {built-in method builtins.ord}
   100000    0.012    0.000    0.012    0.000 Cell.py:128(get_contents)
   100000    0.012    0.000    0.012    0.000 Cell.py:125(get_value)
   100000    0.012    0.000    0.012    0.000 {method 'upper' of 'str' objects}
   100001    0.011    0.000    0.011    0.000 Sheet.py:54(get_sheet_name)
   100000    0.010    0.000    0.010    0.000 {method 'lstrip' of 'str' objects}
        1    0.000    0.000    0.000    0.000 Workbook.py:884(new_sheet)
        1    0.000    0.000    0.000    0.000 cProfile.py:118(__exit__)
        1    0.000    0.000    0.000    0.000 utils.py:97(check_new_name)
        2    0.000    0.000    0.000    0.000 Workbook.py:519(num_sheets)
        1    0.000    0.000    0.000    0.000 utils.py:208(remove_exponent)
        1    0.000    0.000    0.000    0.000 Graph.py:121(has_sheet)
        1    0.000    0.000    0.000    0.000 {built-in method _abc._abc_instancecheck}
        1    0.000    0.000    0.000    0.000 <frozen abc>:117(__instancecheck__)
        1    0.000    0.000    0.000    0.000 {method 'quantize' of 'decimal.Decimal' objects}
        1    0.000    0.000    0.000    0.000 Sheet.py:25(__init__)
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
       10    0.000    0.000    0.000    0.000 {method 'isalnum' of 'str' objects}
        4    0.000    0.000    0.000    0.000 {method 'keys' of 'collections.OrderedDict' objects}
        1    0.000    0.000    0.000    0.000 {method 'to_integral' of 'decimal.Decimal' objects}
        2    0.000    0.000    0.000    0.000 {method 'keys' of 'dict' objects}
        1    0.000    0.000    0.000    0.000 Graph.py:124(add_sheet)
        1    0.000    0.000    0.000    0.000 {method 'is_finite' of 'decimal.Decimal' objects}
        1    0.000    0.000    0.000    0.000 Sheet.py:57(get_sheet_cells)
        1    0.000    0.000    0.000    0.000 {method 'items' of 'dict' objects}



##################Running pro_pascals_triangle_speed... #######################
Total Logs
         2522066 function calls in 0.889 seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
    27448    0.087    0.000    0.714    0.000 Workbook.py:596(recompute_cell_value)
     1275    0.085    0.000    0.111    0.000 Graph.py:330(tarjans)
    82122    0.050    0.000    0.076    0.000 Sheet.py:93(get_cell_value)
    26524    0.044    0.000    0.390    0.000 Workbook.py:558(get_formula_value)
    27799    0.044    0.000    0.086    0.000 Cell.py:81(set_cell_value)
    26524    0.043    0.000    0.186    0.000 Parser.py:253(cell)
    26524    0.027    0.000    0.104    0.000 Workbook.py:822(get_cell_value)
   111644    0.026    0.000    0.036    0.000 utils.py:79(get_hidden_name)
   294913    0.025    0.000    0.025    0.000 {method 'lower' of 'str' objects}
     1275    0.023    0.000    0.853    0.001 Workbook.py:652(recompute_cell_and_parents)
   241266    0.023    0.000    0.023    0.000 {built-in method builtins.isinstance}
    53048    0.021    0.000    0.034    0.000 {built-in method builtins.getattr}
    26524    0.019    0.000    0.312    0.000 visitors.py:421(_visit_tree)
    54323    0.019    0.000    0.026    0.000 __init__.py:272(_compile)
    26524    0.018    0.000    0.102    0.000 Sheet.py:104(set_cell_value)
   138644    0.017    0.000    0.017    0.000 {method 'get' of 'dict' objects}
    27799    0.016    0.000    0.025    0.000 utils.py:208(remove_exponent)
    27448    0.016    0.000    0.035    0.000 Workbook.py:589(get_cell_from_location)
    26524    0.016    0.000    0.259    0.000 visitors.py:444(inner)
    27724    0.014    0.000    0.026    0.000 Workbook.py:554(get_sheet_name_from_hidden)
    26524    0.014    0.000    0.014    0.000 Parser.py:97(__init__)
    26524    0.014    0.000    0.214    0.000 Parser.py:40(fix_formula)
    54896    0.013    0.000    0.013    0.000 Graph.py:137(get_parents_from_cell)
    26524    0.013    0.000    0.017    0.000 visitors.py:430(<listcomp>)
    26524    0.012    0.000    0.031    0.000 __init__.py:178(sub)
    27799    0.012    0.000    0.033    0.000 __init__.py:163(match)
    26524    0.012    0.000    0.029    0.000 visitors.py:429(visit_children)
    26524    0.011    0.000    0.015    0.000 utils.py:296(get_highest_precedence_error)
    27799    0.010    0.000    0.043    0.000 utils.py:132(check_valid_cell_location)
    26524    0.010    0.000    0.012    0.000 lexer.py:265(__eq__)
   115945    0.010    0.000    0.010    0.000 {built-in method builtins.len}
    82122    0.009    0.000    0.009    0.000 Cell.py:125(get_value)
    26524    0.009    0.000    0.320    0.000 visitors.py:415(visit)
    28723    0.008    0.000    0.011    0.000 utils.py:213(is_formula)
    29998    0.008    0.000    0.012    0.000 Sheet.py:120(get_cell)
   137240    0.008    0.000    0.008    0.000 {method 'append' of 'list' objects}
    27799    0.008    0.000    0.008    0.000 {method 'match' of 're.Pattern' objects}
    53972    0.006    0.000    0.006    0.000 Cell.py:128(get_contents)
    26524    0.006    0.000    0.006    0.000 {method 'sub' of 're.Pattern' objects}
    82344    0.005    0.000    0.005    0.000 {method 'pop' of 'list' objects}
     1275    0.005    0.000    0.887    0.001 Workbook.py:741(set_cell_contents)
    53048    0.005    0.000    0.005    0.000 Cell.py:62(get_cached_formula)
    27799    0.005    0.000    0.005    0.000 {method 'to_integral' of 'decimal.Decimal' objects}
    27799    0.004    0.000    0.004    0.000 {method 'quantize' of 'decimal.Decimal' objects}
    26524    0.003    0.000    0.003    0.000 Cell.py:131(set_children)
    37999    0.003    0.000    0.003    0.000 {method 'strip' of 'str' objects}
    26524    0.003    0.000    0.003    0.000 Parser.py:108(get_cell_refs)
    27799    0.003    0.000    0.003    0.000 Cell.py:135(get_children)
     1275    0.003    0.000    0.005    0.000 utils.py:308(error_matcher)
    27724    0.003    0.000    0.003    0.000 Sheet.py:54(get_sheet_name)
    26524    0.003    0.000    0.003    0.000 {method 'add' of 'set' objects}
    27799    0.003    0.000    0.003    0.000 {method 'is_finite' of 'decimal.Decimal' objects}
     1275    0.002    0.000    0.004    0.000 utils.py:180(convert_location_to_idx)
     1275    0.002    0.000    0.017    0.000 Sheet.py:60(set_cell_contents)
     1275    0.002    0.000    0.006    0.000 Workbook.py:728(clean_children_cells)
     1225    0.002    0.000    0.003    0.000 Workbook.py:701(_get_sheet_name_location)
     1275    0.002    0.000    0.888    0.001 Workbook.py:36(run_func)
     1275    0.001    0.000    0.009    0.000 Cell.py:65(set_contents)
     1225    0.001    0.000    0.001    0.000 Graph.py:96(update_child)
     1275    0.001    0.000    0.001    0.000 Sheet.py:124(update_extent)
     3775    0.001    0.000    0.001    0.000 {method 'join' of 'str' objects}
     4725    0.000    0.000    0.000    0.000 {built-in method builtins.ord}
     1225    0.000    0.000    0.000    0.000 {method 'remove' of 'list' objects}
     1225    0.000    0.000    0.000    0.000 {method 'split' of 'str' objects}
     1575    0.000    0.000    0.000    0.000 {method 'upper' of 'str' objects}
     1575    0.000    0.000    0.000    0.000 {built-in method builtins.chr}
     1275    0.000    0.000    0.000    0.000 {method 'lstrip' of 'str' objects}
     1275    0.000    0.000    0.000    0.000 {method 'rstrip' of 'str' objects}
        1    0.000    0.000    0.000    0.000 cProfile.py:118(__exit__)
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}



##################Running pro_copy_massive_sheet2... #######################
for test <function pro_copy_massive_sheet2 at 0x7f2a404623e0> total time: 364.6603762800001
Total Logs
         96459794 function calls (96019880 primitive calls) in 31.982 seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
    88875    5.902    0.000   21.966    0.000 earley.py:78(predict_and_complete)
  5118976    3.440    0.000    6.130    0.000 earley_common.py:9(__init__)
12457508/12107578    2.537    0.000    3.112    0.000 {built-in method builtins.hash}
     9998    1.987    0.000    6.628    0.001 earley_forest.py:283(visit)
  4029194    1.547    0.000    2.367    0.000 utils.py:345(add)
  3089382    1.298    0.000    2.545    0.000 grammar.py:18(__eq__)
  6638672    1.222    0.000    1.692    0.000 grammar.py:25(__hash__)
  2929414    0.876    0.000    1.105    0.000 lexer.py:265(__eq__)
  4199160    0.728    0.000    0.738    0.000 earley_common.py:28(__eq__)
  1809638    0.709    0.000    1.124    0.000 utils.py:342(__contains__)
  8078386    0.660    0.000    0.660    0.000 {built-in method builtins.isinstance}
    78877    0.634    0.000    1.900    0.000 xearley.py:41(scan)
   169966    0.548    0.000    2.537    0.000 earley.py:135(<listcomp>)
  5508898    0.497    0.000    0.497    0.000 grammar.py:121(__hash__)
  5948810    0.495    0.000    0.495    0.000 earley_common.py:31(__hash__)
   319936    0.491    0.000    0.975    0.000 earley_forest.py:50(__init__)
  6298749    0.439    0.000    0.439    0.000 {built-in method builtins.len}
   299940    0.423    0.000    1.772    0.000 earley_forest.py:437(_visit_node_out_helper)
  5906604    0.421    0.000    0.421    0.000 {method 'append' of 'list' objects}
   149970    0.397    0.000    0.752    0.000 earley_forest.py:603(transform_packed_node)
  2539492    0.307    0.000    0.307    0.000 {built-in method builtins.next}
   896499    0.272    0.000    0.568    0.000 utils.py:339(__init__)
   299940    0.265    0.000    0.628    0.000 {built-in method builtins.sorted}
  3329334    0.264    0.000    0.264    0.000 {built-in method builtins.id}
   329934    0.258    0.000    0.786    0.000 earley_forest.py:64(add_family)
   896499    0.236    0.000    0.296    0.000 {built-in method fromkeys}
   329934    0.207    0.000    0.376    0.000 earley_forest.py:131(__init__)
   876503    0.205    0.000    0.290    0.000 utils.py:348(__iter__)
   119976    0.179    0.000    0.453    0.000 earley_forest.py:581(transform_symbol_node)
   329934    0.176    0.000    0.797    0.000 earley_common.py:25(advance)
   299940    0.170    0.000    0.909    0.000 earley_forest.py:85(children)
   149970    0.164    0.000    0.470    0.000 earley_forest.py:631(visit_packed_node_in)
     9998    0.163    0.000   24.029    0.002 xearley.py:39(_parse)
   518789    0.156    0.000    0.282    0.000 parser_frontends.py:184(match)
   149970    0.152    0.000    0.743    0.000 earley_forest.py:422(visit_symbol_node_in)
   469906    0.138    0.000    0.196    0.000 {method 'setdefault' of 'dict' objects}
   149970    0.138    0.000    1.237    0.000 earley_forest.py:638(visit_packed_node_out)
   538786    0.138    0.000    0.138    0.000 {method 'match' of 're.Pattern' objects}
   149970    0.133    0.000    0.281    0.000 earley_forest.py:427(visit_packed_node_in)
   149970    0.120    0.000    1.216    0.000 earley_forest.py:625(visit_symbol_node_in)
   299940    0.119    0.000    0.171    0.000 earley_forest.py:145(sort_key)
  1176443    0.115    0.000    0.115    0.000 {built-in method builtins.iter}
   759848    0.101    0.000    0.101    0.000 {method 'add' of 'set' objects}
  1379724    0.099    0.000    0.099    0.000 {method 'pop' of 'collections.deque' objects}
   119976    0.098    0.000    0.174    0.000 earley_forest.py:556(_collapse_ambig)
   119976    0.095    0.000    0.177    0.000 earley_forest.py:565(_call_rule_func)
     9998    0.082    0.000   30.963    0.003 earley.py:262(parse)
  1329734    0.081    0.000    0.081    0.000 {method 'append' of 'collections.deque' objects}
   149970    0.075    0.000    0.112    0.000 earley_forest.py:155(children)
     9999    0.072    0.000   31.723    0.003 Workbook.py:652(recompute_cell_and_parents)
   299940    0.072    0.000    0.102    0.000 utils.py:357(__len__)
   149970    0.065    0.000    0.067    0.000 earley_forest.py:499(__init__)
   449910    0.065    0.000    0.065    0.000 {method 'remove' of 'set' objects}
   149970    0.060    0.000    0.112    0.000 earley_forest.py:70(load_paths)
   149970    0.059    0.000    1.073    0.000 earley_forest.py:450(visit_packed_node_out)
     9998    0.056    0.000   31.051    0.003 parser_frontends.py:100(parse)
   299940    0.052    0.000    0.052    0.000 earley_forest.py:141(is_empty)
   119976    0.048    0.000    0.698    0.000 earley_forest.py:444(visit_symbol_node_out)
   139972    0.047    0.000    0.058    0.000 {built-in method builtins.getattr}
   319936    0.042    0.000    0.042    0.000 earley_forest.py:101(__hash__)
    49990    0.040    0.000    0.054    0.000 lexer.py:213(_future_new)
   119976    0.040    0.000    0.051    0.000 earley_forest.py:571(_call_ambig_func)
    49992    0.040    0.000    0.065    0.000 Sheet.py:93(get_cell_value)
   299940    0.040    0.000    0.040    0.000 earley_forest.py:548(_check_cycle)
    29994    0.039    0.000    0.054    0.000 earley_forest.py:591(transform_intermediate_node)
    99980    0.039    0.000    0.050    0.000 parse_tree_builder.py:20(__call__)
     9999    0.038    0.000   31.953    0.003 Workbook.py:741(set_cell_contents)
   149970    0.037    0.000    0.037    0.000 earley_forest.py:158(<listcomp>)
   329934    0.037    0.000    0.037    0.000 earley_forest.py:169(__hash__)
     9998    0.036    0.000   31.463    0.003 Workbook.py:558(get_formula_value)
    19997    0.035    0.000    0.062    0.000 Cell.py:81(set_cell_value)
   299940    0.034    0.000    0.034    0.000 {method 'pop' of 'list' objects}
    39992    0.034    0.000    0.042    0.000 earley_forest.py:432(visit_token_node)
    49990    0.033    0.000    0.087    0.000 lexer.py:202(__new__)
     9999    0.031    0.000    0.127    0.000 Sheet.py:60(set_cell_contents)
     9999    0.028    0.000    0.043    0.000 utils.py:180(convert_location_to_idx)
     9998    0.028    0.000    0.124    0.000 Parser.py:253(cell)
29994/9998    0.027    0.000    0.343    0.000 visitors.py:421(_visit_tree)
    49990    0.027    0.000    0.032    0.000 earley_forest.py:193(__init__)
29994/9998    0.024    0.000    0.308    0.000 visitors.py:444(inner)
29994/9998    0.024    0.000    0.256    0.000 visitors.py:430(<listcomp>)
    29994    0.022    0.000    0.196    0.000 Parser.py:40(fix_formula)
     9998    0.022    0.000    6.650    0.001 earley_forest.py:535(visit)
     9998    0.021    0.000    0.083    0.000 earley.py:284(<listcomp>)
   159994    0.019    0.000    0.019    0.000 {method 'lower' of 'str' objects}
    29995    0.019    0.000    0.026    0.000 __init__.py:272(_compile)
     9998    0.019    0.000    0.025    0.000 parser_frontends.py:96(_make_lexer_thread)
    89986    0.019    0.000    0.019    0.000 {method 'get' of 'dict' objects}
     9998    0.018    0.000    0.029    0.000 Workbook.py:701(_get_sheet_name_location)
29994/9998    0.018    0.000    0.263    0.000 visitors.py:429(visit_children)
    78877    0.017    0.000    0.017    0.000 utils.py:354(__bool__)
     9998    0.017    0.000    0.067    0.000 Workbook.py:822(get_cell_value)
    29994    0.015    0.000    0.021    0.000 utils.py:296(get_highest_precedence_error)
     9998    0.015    0.000    6.667    0.001 earley_forest.py:397(transform)
   119976    0.015    0.000    0.015    0.000 {built-in method builtins.hasattr}
     9998    0.014    0.000    0.031    0.000 earley_forest.py:523(__init__)
     9998    0.014    0.000    0.016    0.000 earley_forest.py:390(__init__)
     9998    0.014    0.000    0.019    0.000 Parser.py:169(add_expr)
    49990    0.014    0.000    0.014    0.000 {built-in method __new__ of type object at 0x860f60}
    39998    0.014    0.000    0.019    0.000 utils.py:79(get_hidden_name)
     9998    0.013    0.000    0.058    0.000 Workbook.py:714(add_children_cells)
        1    0.013    0.013   31.982   31.982 Workbook.py:1055(copy_sheet)
  10001/1    0.013    0.000   31.982   31.982 Workbook.py:36(run_func)
     9998    0.012    0.000    0.012    0.000 Parser.py:97(__init__)
    29994    0.012    0.000    0.121    0.000 earley_forest.py:447(visit_intermediate_node_out)
    29996    0.012    0.000    0.012    0.000 {method 'join' of 'str' objects}
    19997    0.012    0.000    0.040    0.000 __init__.py:163(match)
     9998    0.012    0.000    0.016    0.000 Graph.py:68(add_connection)
    19997    0.011    0.000    0.051    0.000 utils.py:132(check_valid_cell_location)
     9999    0.011    0.000    0.018    0.000 utils.py:208(remove_exponent)
     9999    0.011    0.000    0.026    0.000 Cell.py:65(set_contents)
     9998    0.011    0.000    0.015    0.000 parse_tree_builder.py:145(__call__)
     9998    0.010    0.000    0.062    0.000 Sheet.py:104(set_cell_value)
     9999    0.010    0.000    0.012    0.000 Sheet.py:124(update_extent)
    49990    0.009    0.000    0.009    0.000 {method 'group' of 're.Match' objects}
     9998    0.008    0.000    0.008    0.000 Parser.py:243(number)
    10000    0.008    0.000    0.014    0.000 Workbook.py:554(get_sheet_name_from_hidden)
     9998    0.008    0.000    0.025    0.000 __init__.py:178(sub)
     9998    0.008    0.000   31.059    0.003 lark.py:640(parse)
    19998    0.008    0.000    0.008    0.000 {built-in method _heapq.heappush}
     9999    0.008    0.000    0.008    0.000 Graph.py:330(tarjans)
    29994    0.007    0.000    0.007    0.000 tree.py:61(__init__)
    49990    0.007    0.000    0.007    0.000 earley_forest.py:207(__hash__)
     9999    0.007    0.000    0.032    0.000 Cell.py:46(__init__)
     9998    0.006    0.000    0.007    0.000 parser_frontends.py:86(_verify_start)
     9998    0.006    0.000    0.006    0.000 {method 'sub' of 're.Pattern' objects}
    19998    0.006    0.000    0.008    0.000 Sheet.py:120(get_cell)
    29995    0.006    0.000    0.006    0.000 Cell.py:128(get_contents)
    49990    0.005    0.000    0.005    0.000 {method 'end' of 're.Match' objects}
     9998    0.005    0.000    0.348    0.000 visitors.py:415(visit)
    39993    0.005    0.000    0.005    0.000 Cell.py:125(get_value)
     9999    0.005    0.000    0.009    0.000 Workbook.py:728(clean_children_cells)
     9998    0.005    0.000    0.005    0.000 lark.py:220(__getattr__)
    39992    0.004    0.000    0.004    0.000 earley_forest.py:418(transform_token_node)
     9999    0.004    0.000    0.004    0.000 {built-in method _abc._abc_instancecheck}
    40000    0.004    0.000    0.004    0.000 {method 'strip' of 'str' objects}
     9999    0.004    0.000    0.005    0.000 utils.py:213(is_formula)
     9998    0.004    0.000    0.004    0.000 {method 'split' of 'str' objects}
     9998    0.004    0.000    0.004    0.000 {method 'update' of 'dict' objects}
     9999    0.003    0.000    0.003    0.000 {method 'quantize' of 'decimal.Decimal' objects}
     9999    0.003    0.000    0.008    0.000 <frozen abc>:117(__instancecheck__)
     9999    0.003    0.000    0.003    0.000 {method 'to_integral' of 'decimal.Decimal' objects}
     9998    0.003    0.000    0.003    0.000 Cell.py:131(set_children)
     9998    0.002    0.000    0.002    0.000 grammar.py:15(__init__)
     9999    0.002    0.000    0.002    0.000 {method 'lstrip' of 'str' objects}
    19998    0.002    0.000    0.002    0.000 {built-in method builtins.ord}
     9998    0.002    0.000    0.002    0.000 earley_forest.py:232(__init__)
     9998    0.002    0.000    0.002    0.000 Cell.py:59(cache_formula)
     9999    0.002    0.000    0.002    0.000 {method 'upper' of 'str' objects}
     9998    0.002    0.000    0.002    0.000 Parser.py:108(get_cell_refs)
     9999    0.001    0.000    0.001    0.000 {method 'is_finite' of 'decimal.Decimal' objects}
    10000    0.001    0.000    0.001    0.000 Sheet.py:54(get_sheet_name)
     9998    0.001    0.000    0.001    0.000 Cell.py:62(get_cached_formula)
     9999    0.001    0.000    0.001    0.000 {method 'rstrip' of 'str' objects}
        1    0.000    0.000    0.000    0.000 Workbook.py:884(new_sheet)
        1    0.000    0.000    0.000    0.000 cProfile.py:118(__exit__)
        1    0.000    0.000    0.000    0.000 utils.py:97(check_new_name)
        2    0.000    0.000    0.000    0.000 Workbook.py:519(num_sheets)
        1    0.000    0.000    0.000    0.000 utils.py:308(error_matcher)
        1    0.000    0.000    0.000    0.000 Graph.py:121(has_sheet)
        1    0.000    0.000    0.000    0.000 Sheet.py:25(__init__)
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
        4    0.000    0.000    0.000    0.000 {method 'keys' of 'collections.OrderedDict' objects}
       10    0.000    0.000    0.000    0.000 {method 'isalnum' of 'str' objects}
        1    0.000    0.000    0.000    0.000 Graph.py:124(add_sheet)
        2    0.000    0.000    0.000    0.000 {method 'keys' of 'dict' objects}
        1    0.000    0.000    0.000    0.000 {method 'items' of 'dict' objects}
        1    0.000    0.000    0.000    0.000 Sheet.py:57(get_sheet_cells)


